<Type Name="ServiceCollectionExtensions" FullName="Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions">
  <TypeSignature Language="C#" Value="public static class ServiceCollectionExtensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit ServiceCollectionExtensions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions" />
  <TypeSignature Language="VB.NET" Value="Public Module ServiceCollectionExtensions" />
  <TypeSignature Language="F#" Value="type ServiceCollectionExtensions = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bot.Builder.Integration.AspNet.Core</AssemblyName>
    <AssemblyVersion>4.0.7.0</AssemblyVersion>
    <AssemblyVersion>4.1.5.0</AssemblyVersion>
    <AssemblyVersion>4.3.2.0</AssemblyVersion>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            A set of extension methods for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> which provide support for hosting bots with .NET Core.
            </summary>
    <remarks>To be added.</remarks>
    <altmember cref="T:Microsoft.Bot.Builder.Integration.AspNet.Core.ApplicationBuilderExtensions" />
    <altmember cref="T:Microsoft.Bot.Builder.BotAdapter" />
    <altmember cref="T:Microsoft.Bot.Builder.Integration.IAdapterIntegration" />
    <altmember cref="T:Microsoft.Bot.Builder.IBot" />
  </Docs>
  <Members>
    <Member MemberName="AddBot&lt;TBot&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddBot&lt;TBot&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; configureAction = null) where TBot : class, Microsoft.Bot.Builder.IBot;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddBot&lt;class (class Microsoft.Bot.Builder.IBot) TBot&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; configureAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBot``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Bot.Builder.Integration.BotFrameworkOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddBot(Of TBot As {Class, IBot}) (services As IServiceCollection, Optional configureAction As Action(Of BotFrameworkOptions) = null) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddBot : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Bot : null and 'Bot :&gt; Microsoft.Bot.Builder.IBot)" Usage="Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBot (services, configureAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Integration.AspNet.Core</AssemblyName>
        <AssemblyVersion>4.0.7.0</AssemblyVersion>
        <AssemblyVersion>4.1.5.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TBot">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.Bot.Builder.IBot</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="configureAction" Type="System.Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TBot">A concrete type of <see cref="T:Microsoft.Bot.Builder.IBot" /> that is to be registered and exposed to the Bot Framework.</typeparam>
        <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
        <param name="configureAction">A optional callback that, if provided, will be invoked to further configure of the bot.</param>
        <summary>
            Adds and optionally configures a <typeparamref name="TBot">specified bot type</typeparamref> to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        <returns>A reference to this instance after the operation has completed.</returns>
        <remarks>
                The <typeparamref name="TBot" /> will be registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient">transient</see> and be instantiated on each turn.
            </remarks>
        <altmember cref="T:Microsoft.Bot.Builder.IBot" />
      </Docs>
    </Member>
    <Member MemberName="AddBot&lt;TBot&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddBot&lt;TBot&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Func&lt;IServiceProvider,TBot&gt; botFactory, Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; configureAction = null) where TBot : class, Microsoft.Bot.Builder.IBot;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddBot&lt;class (class Microsoft.Bot.Builder.IBot) TBot&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Func`2&lt;class System.IServiceProvider, !!TBot&gt; botFactory, class System.Action`1&lt;class Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; configureAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBot``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0},System.Action{Microsoft.Bot.Builder.Integration.BotFrameworkOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddBot(Of TBot As {Class, IBot}) (services As IServiceCollection, botFactory As Func(Of IServiceProvider, TBot), Optional configureAction As Action(Of BotFrameworkOptions) = null) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddBot : Microsoft.Extensions.DependencyInjection.IServiceCollection * Func&lt;IServiceProvider, 'Bot (requires 'Bot : null and 'Bot :&gt; Microsoft.Bot.Builder.IBot)&gt; * Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Bot : null and 'Bot :&gt; Microsoft.Bot.Builder.IBot)" Usage="Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBot (services, botFactory, configureAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Integration.AspNet.Core</AssemblyName>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TBot">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.Bot.Builder.IBot</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="botFactory" Type="System.Func&lt;System.IServiceProvider,TBot&gt;" />
        <Parameter Name="configureAction" Type="System.Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TBot">A concrete type of <see cref="T:Microsoft.Bot.Builder.IBot" /> that is to be registered and exposed to the Bot Framework.</typeparam>
        <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
        <param name="botFactory">A factory method that will supply an instance of the <typeparamref name="TBot" /> when invoked.</param>
        <param name="configureAction">A optional callback that, if provided, will be invoked to further configure of the bot.</param>
        <summary>
            Adds and optionally configures a <typeparamref name="TBot">specified bot type</typeparamref> to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        <returns>A reference to this instance after the operation has completed.</returns>
        <remarks>
                The <paramref name="botFactory">factory</paramref> will be registered as <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Transient">transient</see>
                and be invoked on each turn.
            </remarks>
        <altmember cref="T:Microsoft.Bot.Builder.IBot" />
      </Docs>
    </Member>
    <Member MemberName="AddBot&lt;TBot&gt;">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddBot&lt;TBot&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, TBot bot, Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; configureAction = null) where TBot : class, Microsoft.Bot.Builder.IBot;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddBot&lt;class (class Microsoft.Bot.Builder.IBot) TBot&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, !!TBot bot, class System.Action`1&lt;class Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; configureAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBot``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0,System.Action{Microsoft.Bot.Builder.Integration.BotFrameworkOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddBot(Of TBot As {Class, IBot}) (services As IServiceCollection, bot As TBot, Optional configureAction As Action(Of BotFrameworkOptions) = null) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddBot : Microsoft.Extensions.DependencyInjection.IServiceCollection * 'Bot * Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Bot : null and 'Bot :&gt; Microsoft.Bot.Builder.IBot)" Usage="Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBot (services, bot, configureAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Integration.AspNet.Core</AssemblyName>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TBot">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>Microsoft.Bot.Builder.IBot</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="bot" Type="TBot" />
        <Parameter Name="configureAction" Type="System.Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TBot">A concrete type of <see cref="T:Microsoft.Bot.Builder.IBot" /> that is to be registered and exposed to the Bot Framework.</typeparam>
        <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
        <param name="bot">The instance of the bot that will be registered as a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />.</param>
        <param name="configureAction">A optional callback that, if provided, will be invoked to further configure of the bot.</param>
        <summary>
            Adds and optionally configures a singleton <paramref name="bot">bot</paramref> instance to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        <returns>A reference to this instance after the operation has completed.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:Microsoft.Bot.Builder.IBot" />
      </Docs>
    </Member>
    <Member MemberName="AddBotFrameworkAdapterIntegration">
      <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddBotFrameworkAdapterIntegration (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; configureAction = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddBotFrameworkAdapterIntegration(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; configureAction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBotFrameworkAdapterIntegration(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Bot.Builder.Integration.BotFrameworkOptions})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddBotFrameworkAdapterIntegration (services As IServiceCollection, Optional configureAction As Action(Of BotFrameworkOptions) = null) As IServiceCollection" />
      <MemberSignature Language="F#" Value="static member AddBotFrameworkAdapterIntegration : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBotFrameworkAdapterIntegration (services, configureAction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Integration.AspNet.Core</AssemblyName>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
        <Parameter Name="configureAction" Type="System.Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt;" />
      </Parameters>
      <Docs>
        <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
        <param name="configureAction">A optional callback that, if provided, will be invoked to further configure the integration.</param>
        <summary>
             Adds the <see cref="T:Microsoft.Bot.Builder.BotFrameworkAdapter" /> as the <see cref="T:Microsoft.Bot.Builder.Integration.IAdapterIntegration" /> which will be used by the integration layer
             for processing bot requests.
             </summary>
        <returns>A reference to this instance after the operation has completed.</returns>
        <remarks>
                 The <see cref="T:Microsoft.Bot.Builder.BotFrameworkAdapter" /> will be registered as a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton">singleton</see>.
            
                 NOTE: Calling any of the <c>AddBot</c> overloads those will attempt to implicitly register this for you if there is no
                 explicit <see cref="T:Microsoft.Bot.Builder.Integration.IAdapterIntegration" /> already registered in the <paramref name="services" /> collection.
             </remarks>
        <altmember cref="O:AddBot{TBot}()" />
        <altmember cref="T:Microsoft.Bot.Builder.BotFrameworkAdapter" />
        <altmember cref="T:Microsoft.Bot.Builder.Integration.IAdapterIntegration" />
      </Docs>
    </Member>
  </Members>
</Type>