<Type Name="OAuthPrompt" FullName="Microsoft.Bot.Builder.Dialogs.OAuthPrompt">
  <TypeSignature Language="C#" Value="public class OAuthPrompt : Microsoft.Bot.Builder.Dialogs.Dialog" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit OAuthPrompt extends Microsoft.Bot.Builder.Dialogs.Dialog" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Bot.Builder.Dialogs.OAuthPrompt" />
  <TypeSignature Language="VB.NET" Value="Public Class OAuthPrompt&#xA;Inherits Dialog" />
  <TypeSignature Language="F#" Value="type OAuthPrompt = class&#xA;    inherit Dialog" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bot.Builder.Dialogs</AssemblyName>
    <AssemblyVersion>4.0.7.0</AssemblyVersion>
    <AssemblyVersion>4.1.5.0</AssemblyVersion>
    <AssemblyVersion>4.3.2.0</AssemblyVersion>
    <AssemblyVersion>4.4.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Bot.Builder.Dialogs.Dialog</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             Creates a new prompt that asks the user to sign in using the Bot Frameworks Single Sign On (SSO)
             service.
            
             @remarks
             The prompt will attempt to retrieve the users current token and if the user isn't signed in, it
             will send them an `OAuthCard` containing a button they can press to signin. Depending on the
             channel, the user will be sent through one of two possible signin flows:
            
             - The automatic signin flow where once the user signs in and the SSO service will forward the bot
             the users access token using either an `event` or `invoke` activity.
             - The "magic code" flow where where once the user signs in they will be prompted by the SSO
             service to send the bot a six digit code confirming their identity. This code will be sent as a
             standard `message` activity.
            
             Both flows are automatically supported by the `OAuthPrompt` and the only thing you need to be
             careful of is that you don't block the `event` and `invoke` activities that the prompt might
             be waiting on.
            
             &gt; [!NOTE]
             &gt; You should avoid persisting the access token with your bots other state. The Bot Frameworks
             &gt; SSO service will securely store the token on your behalf. If you store it in your bots state
             &gt; it could expire or be revoked in between turns.
             &gt;
             &gt; When calling the prompt from within a waterfall step you should use the token within the step
             &gt; following the prompt and then let the token go out of scope at the end of your function.
            
             #### Prompt Usage
            
             When used with your bots `DialogSet` you can simply add a new instance of the prompt as a named
             dialog using `DialogSet.add()`. You can then start the prompt from a waterfall step using either
             `DialogContext.begin()` or `DialogContext.prompt()`. The user will be prompted to signin as
             needed and their access token will be passed as an argument to the callers next waterfall step.
             </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OAuthPrompt (string dialogId, Microsoft.Bot.Builder.Dialogs.OAuthPromptSettings settings, Microsoft.Bot.Builder.Dialogs.PromptValidator&lt;Microsoft.Bot.Schema.TokenResponse&gt; validator = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dialogId, class Microsoft.Bot.Builder.Dialogs.OAuthPromptSettings settings, class Microsoft.Bot.Builder.Dialogs.PromptValidator`1&lt;class Microsoft.Bot.Schema.TokenResponse&gt; validator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.OAuthPrompt.#ctor(System.String,Microsoft.Bot.Builder.Dialogs.OAuthPromptSettings,Microsoft.Bot.Builder.Dialogs.PromptValidator{Microsoft.Bot.Schema.TokenResponse})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dialogId As String, settings As OAuthPromptSettings, Optional validator As PromptValidator(Of TokenResponse) = null)" />
      <MemberSignature Language="F#" Value="new Microsoft.Bot.Builder.Dialogs.OAuthPrompt : string * Microsoft.Bot.Builder.Dialogs.OAuthPromptSettings * Microsoft.Bot.Builder.Dialogs.PromptValidator&lt;Microsoft.Bot.Schema.TokenResponse&gt; -&gt; Microsoft.Bot.Builder.Dialogs.OAuthPrompt" Usage="new Microsoft.Bot.Builder.Dialogs.OAuthPrompt (dialogId, settings, validator)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Dialogs</AssemblyName>
        <AssemblyVersion>4.0.7.0</AssemblyVersion>
        <AssemblyVersion>4.1.5.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dialogId" Type="System.String" />
        <Parameter Name="settings" Type="Microsoft.Bot.Builder.Dialogs.OAuthPromptSettings" />
        <Parameter Name="validator" Type="Microsoft.Bot.Builder.Dialogs.PromptValidator&lt;Microsoft.Bot.Schema.TokenResponse&gt;" />
      </Parameters>
      <Docs>
        <param name="dialogId">To be added.</param>
        <param name="settings">To be added.</param>
        <param name="validator">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginDialogAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Dialogs.DialogTurnResult&gt; BeginDialogAsync (Microsoft.Bot.Builder.Dialogs.DialogContext dc, object options = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Builder.Dialogs.DialogTurnResult&gt; BeginDialogAsync(class Microsoft.Bot.Builder.Dialogs.DialogContext dc, object options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.OAuthPrompt.BeginDialogAsync(Microsoft.Bot.Builder.Dialogs.DialogContext,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.BeginDialogAsync : Microsoft.Bot.Builder.Dialogs.DialogContext * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Dialogs.DialogTurnResult&gt;" Usage="oAuthPrompt.BeginDialogAsync (dc, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Dialogs</AssemblyName>
        <AssemblyVersion>4.0.7.0</AssemblyVersion>
        <AssemblyVersion>4.1.5.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Dialogs.DialogTurnResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dc" Type="Microsoft.Bot.Builder.Dialogs.DialogContext" />
        <Parameter Name="options" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="dc">To be added.</param>
        <param name="options">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinueDialogAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Dialogs.DialogTurnResult&gt; ContinueDialogAsync (Microsoft.Bot.Builder.Dialogs.DialogContext dc, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Builder.Dialogs.DialogTurnResult&gt; ContinueDialogAsync(class Microsoft.Bot.Builder.Dialogs.DialogContext dc, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.OAuthPrompt.ContinueDialogAsync(Microsoft.Bot.Builder.Dialogs.DialogContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="override this.ContinueDialogAsync : Microsoft.Bot.Builder.Dialogs.DialogContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Dialogs.DialogTurnResult&gt;" Usage="oAuthPrompt.ContinueDialogAsync (dc, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Dialogs</AssemblyName>
        <AssemblyVersion>4.0.7.0</AssemblyVersion>
        <AssemblyVersion>4.1.5.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Dialogs.DialogTurnResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dc" Type="Microsoft.Bot.Builder.Dialogs.DialogContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="dc">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUserTokenAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.TokenResponse&gt; GetUserTokenAsync (Microsoft.Bot.Builder.ITurnContext turnContext, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Schema.TokenResponse&gt; GetUserTokenAsync(class Microsoft.Bot.Builder.ITurnContext turnContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.OAuthPrompt.GetUserTokenAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.GetUserTokenAsync : Microsoft.Bot.Builder.ITurnContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.TokenResponse&gt;" Usage="oAuthPrompt.GetUserTokenAsync (turnContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Dialogs</AssemblyName>
        <AssemblyVersion>4.0.7.0</AssemblyVersion>
        <AssemblyVersion>4.1.5.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.TokenResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="turnContext" Type="Microsoft.Bot.Builder.ITurnContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="turnContext">Context for the current turn of the conversation with the user.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Get a token for a user signed in.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignOutUserAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SignOutUserAsync (Microsoft.Bot.Builder.ITurnContext turnContext, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task SignOutUserAsync(class Microsoft.Bot.Builder.ITurnContext turnContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.OAuthPrompt.SignOutUserAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="member this.SignOutUserAsync : Microsoft.Bot.Builder.ITurnContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="oAuthPrompt.SignOutUserAsync (turnContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Dialogs</AssemblyName>
        <AssemblyVersion>4.0.7.0</AssemblyVersion>
        <AssemblyVersion>4.1.5.0</AssemblyVersion>
        <AssemblyVersion>4.3.2.0</AssemblyVersion>
        <AssemblyVersion>4.4.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="turnContext" Type="Microsoft.Bot.Builder.ITurnContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="turnContext">Context for the current turn of the conversation with the user.</param>
        <param name="cancellationToken">The cancellation token.</param>
        <summary>
            Sign Out the User.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>