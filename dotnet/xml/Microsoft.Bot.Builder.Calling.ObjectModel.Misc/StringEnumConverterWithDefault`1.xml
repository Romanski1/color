<Type Name="StringEnumConverterWithDefault&lt;TEnum&gt;" FullName="Microsoft.Bot.Builder.Calling.ObjectModel.Misc.StringEnumConverterWithDefault&lt;TEnum&gt;">
  <TypeSignature Language="C#" Value="public class StringEnumConverterWithDefault&lt;TEnum&gt; : Newtonsoft.Json.Converters.StringEnumConverter where TEnum : struct" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit StringEnumConverterWithDefault`1&lt;struct .ctor (class System.ValueType) TEnum&gt; extends Newtonsoft.Json.Converters.StringEnumConverter" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Bot.Builder.Calling.ObjectModel.Misc.StringEnumConverterWithDefault`1" />
  <TypeSignature Language="VB.NET" Value="Public Class StringEnumConverterWithDefault(Of TEnum)&#xA;Inherits StringEnumConverter" />
  <TypeSignature Language="F#" Value="type StringEnumConverterWithDefault&lt;'Enum (requires 'Enum : struct)&gt; = class&#xA;    inherit StringEnumConverter" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Bot.Builder.Calling</AssemblyName>
    <AssemblyVersion>3.20.1.42</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEnum">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
        <BaseTypeName>System.ValueType</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Newtonsoft.Json.Converters.StringEnumConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TEnum">To be added.</typeparam>
    <summary>
            Specialized StringEnumConverter that returns the default enum value instead of throwing if the string
            cannot be matched to an enum value during deserialization.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StringEnumConverterWithDefault ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Calling.ObjectModel.Misc.StringEnumConverterWithDefault`1.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Calling</AssemblyName>
        <AssemblyVersion>3.20.1.42</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadJson">
      <MemberSignature Language="C#" Value="public override object ReadJson (Newtonsoft.Json.JsonReader reader, Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ReadJson(class Newtonsoft.Json.JsonReader reader, class System.Type objectType, object existingValue, class Newtonsoft.Json.JsonSerializer serializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Calling.ObjectModel.Misc.StringEnumConverterWithDefault`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadJson (reader As JsonReader, objectType As Type, existingValue As Object, serializer As JsonSerializer) As Object" />
      <MemberSignature Language="F#" Value="override this.ReadJson : Newtonsoft.Json.JsonReader * Type * obj * Newtonsoft.Json.JsonSerializer -&gt; obj" Usage="stringEnumConverterWithDefault.ReadJson (reader, objectType, existingValue, serializer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Bot.Builder.Calling</AssemblyName>
        <AssemblyVersion>3.20.1.42</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="Newtonsoft.Json.JsonReader" />
        <Parameter Name="objectType" Type="System.Type" />
        <Parameter Name="existingValue" Type="System.Object" />
        <Parameter Name="serializer" Type="Newtonsoft.Json.JsonSerializer" />
      </Parameters>
      <Docs>
        <param name="reader">To be added.</param>
        <param name="objectType">To be added.</param>
        <param name="existingValue">To be added.</param>
        <param name="serializer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>