<Overview>
  <Assemblies>
    <Assembly Name="Microsoft.Bot.Builder.CognitiveServices.LuisActionBinding" Version="1.1.7.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyCompany("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyConfiguration("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright ©  2017")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyDescription("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyFileVersion("1.1.7")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Bot.Builder.CognitiveServices.LuisActionBinding")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Bot.Builder.CognitiveServices.LuisActionBinding")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyTrademark("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Runtime.InteropServices.Guid("abdf486d-cbf1-43a7-9044-ca46b5ab2a88")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.6", FrameworkDisplayName=".NET Framework 4.6")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Bot.Builder.CognitiveServices.QnAMaker" Version="1.1.7.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyCompany("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyConfiguration("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright ©  2017")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyDescription("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyFileVersion("1.1.7")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyProduct("QnADialogs")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyTitle("QnADialogs")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyTrademark("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Resources.NeutralResourcesLanguage("en")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Runtime.InteropServices.Guid("cbfe0d35-d6c2-4b25-a498-cfc474a2c3a5")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.6", FrameworkDisplayName=".NET Framework 4.6")</AttributeName>
        </Attribute>
      </Attributes>
    </Assembly>
    <Assembly Name="Microsoft.Bot.Builder.Autofac" Version="3.20.1.42">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright �  2016")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Bot Builder")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Bot.Builder.Autofac")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTrademark("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.Guid("cdfec7d6-847e-4c13-956b-0a960ae3eb60")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.6", FrameworkDisplayName=".NET Framework 4.6")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("3.20.1.42")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Bot.Builder.Calling" Version="3.20.1.42">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright �  2016")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("3.20.1.42")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Bot.Builder.Calling")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Bot.Builder.Calling")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTrademark("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.Guid("cebd91e9-cdbd-4cc2-adc1-8a5b626ce0ce")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.6", FrameworkDisplayName=".NET Framework 4.6")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Bot.Builder.FormFlow.Json" Version="3.20.1.42">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright �  2016")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("3.20.1.42")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Bot.Builder.FormFlow.Json")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Bot.Builder.FormFlow.Json")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTrademark("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.Guid("8674f271-4437-4178-b4e2-15f91b322e5d")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.6", FrameworkDisplayName=".NET Framework 4.6")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Bot.Builder.History" Version="3.20.1.42">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright �  2016")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Bot.Builder.History")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Bot.Builder.History")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTrademark("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.Guid("d2834d71-d7a2-451b-9a61-1488af049526")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.6", FrameworkDisplayName=".NET Framework 4.6")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("3.20.1.42")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Bot.Connector.AspNetCore" Version="2.0.1.44133">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft Corporation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright � Microsoft Corporation 2016")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("2.0.1.44133")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Bot Framework")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Bot.Connector.AspNetCore")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTrademark("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Bot.Builder.AI.Luis" Version="4.4.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("LUIS Middleware and Recognizers for the Microsoft Bot Builder SDK")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Bot Builder SDK")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Bot.Builder.AI.Luis")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.4.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.4.0")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Bot.Builder.AI.QnA" Version="4.4.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Classes for using QnA Maker Cognitive Service on the Microsoft Bot Builder SDK")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Bot Builder SDK")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Bot.Builder.AI.QnA")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.4.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.4.0")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Bot.Builder.ApplicationInsights" Version="4.4.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("This library integrates the Microsoft Bot Builder SDK with Application Insights.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Bot Builder SDK")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Bot.Builder.ApplicationInsights")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.4.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.4.0")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Bot.Builder.Azure" Version="4.4.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyCompany("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyConfiguration("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright � 2017")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyDescription("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyFileVersion("3.16.3.40383")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft.Bot.Builder.Azure")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Bot.Builder.Azure")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyTrademark("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Runtime.InteropServices.Guid("77299f9c-8f49-4839-b7ea-55ba726321d5")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.6", FrameworkDisplayName=".NET Framework 4.6")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Azure classes for using Azure Services on the Microsoft Bot Builder SDK")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Bot Builder SDK")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.4.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.4.0")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Bot.Builder.Dialogs" Version="4.4.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("This library implements .NET Simple Dialog classes ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Bot Builder SDK")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Bot.Builder.Dialogs")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.4.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.4.0")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Bot.Builder" Version="4.4.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyConfiguration("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyCopyright("Copyright �  2016")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyDescription("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Bot Builder")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Bot.Builder")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyTrademark("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Resources.NeutralResourcesLanguage("en")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Runtime.InteropServices.Guid("cdfec7d6-847e-4c13-956b-0a960ae3eb60")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.6", FrameworkDisplayName=".NET Framework 4.6")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-stable">
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-stable">
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-stable">
          <AttributeName>System.Reflection.AssemblyDescription("Library for building bots using Microsoft Bot Framework Connector")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-stable">
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Bot Builder SDK")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-stable">
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyFileVersion("3.20.1.42")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-stable">
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-stable">
          <AttributeName>System.Reflection.AssemblyFileVersion("4.4.0.0")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-stable">
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.4.0")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Bot.Builder.Integration.ApplicationInsights.Core" Version="4.4.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("This library integrates the Microsoft Bot Builder SDK with Application Insights.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Bot Builder SDK")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Bot.Builder.Integration.ApplicationInsights.Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.4.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.4.0")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Bot.Builder.Integration.ApplicationInsights.WebApi" Version="4.4.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("This library integrates the Microsoft Bot Builder SDK with Application Insights WebAPI.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Bot Builder SDK")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Bot.Builder.Integration.ApplicationInsights.WebApi")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.6.1", FrameworkDisplayName=".NET Framework 4.6.1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.4.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.4.0")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Bot.Builder.Integration.AspNet.Core" Version="4.4.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("This library integrates the Microsoft Bot Builder SDK with ASP.NET Core. It offers idiomatic configuration APIs in addition to providing all the plumbing to direct incoming bot messages to a configured bot.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Bot Builder SDK")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Bot.Builder.Integration.AspNet.Core")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.4.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.4.0")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Bot.Builder.Integration.AspNet.WebApi" Version="4.4.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("This library integrates the Microsoft Bot Builder SDK with ASP.NET WebAPI. It offers idiomatic configuration APIs in addition to providing all the plumbing to direct incoming bot messages to a configured bot.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Bot Builder SDK")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Bot.Builder.Integration.AspNet.WebApi")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETFramework,Version=v4.6.1", FrameworkDisplayName=".NET Framework 4.6.1")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.4.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.4.0")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Bot.Builder.TemplateManager" Version="4.4.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("This library implements .NET TemplateManager classes to manage libraries of template renderers in Microsoft Bot Builder SDK v4")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Bot Builder SDK")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Bot.Builder.TemplateManager")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.4.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.4.0")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Bot.Configuration" Version="4.4.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("Classes for loading and saving bot configuration files")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Bot Builder SDK")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Bot.Configuration")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.4.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.4.0")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Bot.Connector" Version="4.4.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-stable">
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-stable">
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-stable">
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-stable">
          <AttributeName>System.Reflection.AssemblyDescription("This library implements C# classes for using the Bot Framework Connector REST API.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-stable">
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Bot.Connector")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-3.0">
          <AttributeName>System.Reflection.AssemblyFileVersion("3.20.1.42")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-stable">
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Bot Builder SDK")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-stable">
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-stable">
          <AttributeName>System.Reflection.AssemblyFileVersion("4.4.0.0")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="botbuilder-dotnet-stable">
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.4.0")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
    </Assembly>
    <Assembly Name="Microsoft.Bot.Schema" Version="4.4.0.0">
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.Debuggable(System.Diagnostics.DebuggableAttribute+DebuggingModes.IgnoreSymbolStoreSequencePoints)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCompany("Microsoft")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyConfiguration("Release")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyCopyright("© Microsoft Corporation. All rights reserved.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyDescription("This library implements C# schema classes for using the Bot Framework.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyTitle("Microsoft.Bot.Schema")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.CompilationRelaxations(8)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.RuntimeCompatibility(WrapNonExceptionThrows=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.Versioning.TargetFramework(".NETStandard,Version=v2.0", FrameworkDisplayName="")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyProduct("Microsoft Bot Builder SDK")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Resources.NeutralResourcesLanguage("en-US")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyFileVersion("4.4.0.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Reflection.AssemblyInformationalVersion("4.4.0")</AttributeName>
        </Attribute>
      </Attributes>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
      <AssemblyPublicKey>[00 24 00 00 04 80 00 00 94 00 00 00 06 02 00 00 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 b5 fc 90 e7 02 7f 67 87 1e 77 3a 8f de 89 38 c8 1d d4 02 ba 65 b9 20 1d 60 59 3e 96 c4 92 65 1e 88 9c c1 3f 14 15 eb b5 3f ac 11 31 ae 0b d3 33 c5 ee 60 21 67 2d 97 18 ea 31 a8 ae bd 0d a0 07 2f 25 d8 7d ba 6f c9 0f fd 59 8e d4 da 35 e4 4c 39 8c 45 43 07 e8 e3 3b 84 26 14 3d ae c9 f5 96 83 6f 97 c8 f7 47 50 e5 97 5c 64 e2 18 9f 45 de f4 6b 2a 2b 12 47 ad c3 65 2b f5 c3 08 05 5d a9 ]</AssemblyPublicKey>
    </Assembly>
  </Assemblies>
  <Remarks>To be added.</Remarks>
  <Copyright>To be added.</Copyright>
  <Types>
    <Namespace Name="Microsoft.Bot.Builder">
      <Type Name="ActivityHandler" Kind="Class" />
      <Type Name="AutoSaveStateMiddleware" Kind="Class" />
      <Type Name="BotAdapter" Kind="Class" />
      <Type Name="BotAssert" Kind="Class" />
      <Type Name="BotCallbackHandler" Kind="Delegate" />
      <Type Name="BotFrameworkAdapter" Kind="Class" />
      <Type Name="BotFrameworkHttpStatusCodeErrorDetectionStrategy" Kind="Class" />
      <Type Name="BotState" Kind="Class" />
      <Type Name="BotStateSet" Kind="Class" />
      <Type Name="ConversationState" Kind="Class" />
      <Type Name="DeleteActivityHandler" Kind="Delegate" />
      <Type Name="IBot" Kind="Interface" />
      <Type Name="IBotTelemetryClient" Kind="Interface" />
      <Type Name="IMiddleware" Kind="Interface" />
      <Type Name="InspectionMiddleware" Kind="Class" />
      <Type Name="InspectionState" Kind="Class" />
      <Type Name="IntentScore" Kind="Class" />
      <Type Name="InterceptionMiddleware" Kind="Class" />
      <Type Name="InvokeResponse" Kind="Class" />
      <Type Name="IPropertyManager" Kind="Interface" />
      <Type Name="IRecognizer" Kind="Interface" />
      <Type Name="IRecognizerConvert" Kind="Interface" />
      <Type Name="IStatePropertyAccessor`1" DisplayName="IStatePropertyAccessor&lt;T&gt;" Kind="Interface" />
      <Type Name="IStatePropertyInfo" Kind="Interface" />
      <Type Name="IStorage" Kind="Interface" />
      <Type Name="IStoreItem" Kind="Interface" />
      <Type Name="ITranscriptLogger" Kind="Interface" />
      <Type Name="ITranscriptStore" Kind="Interface" />
      <Type Name="ITurnContext" Kind="Interface" />
      <Type Name="ITurnContext`1" DisplayName="ITurnContext&lt;T&gt;" Kind="Interface" />
      <Type Name="IUserTokenProvider" Kind="Interface" />
      <Type Name="MemoryStorage" Kind="Class" />
      <Type Name="MemoryTranscriptStore" Kind="Class" />
      <Type Name="MessageFactory" Kind="Class" />
      <Type Name="MiddlewareSet" Kind="Class" />
      <Type Name="NextDelegate" Kind="Delegate" />
      <Type Name="NullBotTelemetryClient" Kind="Class" />
      <Type Name="PagedResult`1" DisplayName="PagedResult&lt;T&gt;" Kind="Class" />
      <Type Name="PrivateConversationState" Kind="Class" />
      <Type Name="RecognizerResult" Kind="Class" />
      <Type Name="RecognizerResultExtensions" Kind="Class" />
      <Type Name="SendActivitiesHandler" Kind="Delegate" />
      <Type Name="Severity" Kind="Enumeration" />
      <Type Name="ShowTypingMiddleware" Kind="Class" />
      <Type Name="StorageExtensions" Kind="Class" />
      <Type Name="TelemetryConstants" Kind="Class" />
      <Type Name="TelemetryLoggerConstants" Kind="Class" />
      <Type Name="TelemetryLoggerMiddleware" Kind="Class" />
      <Type Name="TraceTranscriptLogger" Kind="Class" />
      <Type Name="TranscriptInfo" Kind="Class" />
      <Type Name="TranscriptLoggerMiddleware" Kind="Class" />
      <Type Name="TurnContext" Kind="Class" />
      <Type Name="TurnContextStateCollection" Kind="Class" />
      <Type Name="UpdateActivityHandler" Kind="Delegate" />
      <Type Name="UserState" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Adapters">
      <Type Name="TestAdapter" Kind="Class" />
      <Type Name="TestFlow" Kind="Class" />
      <Type Name="ValidateReply" Kind="Delegate" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.AI.Luis">
      <Type Name="Age" Kind="Class" />
      <Type Name="DateTimeSpec" Kind="Class" />
      <Type Name="Dimension" Kind="Class" />
      <Type Name="InstanceData" Kind="Class" />
      <Type Name="ITelemetryRecognizer" Kind="Interface" />
      <Type Name="LuisApplication" Kind="Class" />
      <Type Name="LuisPredictionOptions" Kind="Class" />
      <Type Name="LuisRecognizer" Kind="Class" />
      <Type Name="LuisTelemetryConstants" Kind="Class" />
      <Type Name="Money" Kind="Class" />
      <Type Name="NumberWithUnits" Kind="Class" />
      <Type Name="Temperature" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.AI.QnA">
      <Type Name="ITelemetryQnAMaker" Kind="Interface" />
      <Type Name="Metadata" Kind="Class" />
      <Type Name="QnAMaker" Kind="Class" />
      <Type Name="QnAMakerEndpoint" Kind="Class" />
      <Type Name="QnAMakerOptions" Kind="Class" />
      <Type Name="QnAMakerTraceInfo" Kind="Class" />
      <Type Name="QnATelemetryConstants" Kind="Class" />
      <Type Name="QueryResult" Kind="Class" />
      <Type Name="QueryResults" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.ApplicationInsights">
      <Type Name="BotTelemetryClient" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Autofac.Base">
      <Type Name="Extensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Azure">
      <Type Name="AzureBlobStorage" Kind="Class" />
      <Type Name="AzureBlobTranscriptStore" Kind="Class" />
      <Type Name="CosmosDbCustomClientOptions" Kind="Class" />
      <Type Name="CosmosDbKeyEscape" Kind="Class" />
      <Type Name="CosmosDbStorage" Kind="Class" />
      <Type Name="CosmosDbStorageOptions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Base">
      <Type Name="EventQueue`1" DisplayName="EventQueue&lt;Event&gt;" Kind="Class" />
      <Type Name="IEventConsumer`1" DisplayName="IEventConsumer&lt;Event&gt;" Kind="Interface" />
      <Type Name="IEventLoop" Kind="Interface" />
      <Type Name="IEventProducer`1" DisplayName="IEventProducer&lt;Event&gt;" Kind="Interface" />
      <Type Name="LocalizedScope" Kind="Structure" />
      <Type Name="Types" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.BotFramework">
      <Type Name="ConfigurationChannelProvider" Kind="Class" />
      <Type Name="ConfigurationCredentialProvider" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Calling">
      <Type Name="CallingBotService" Kind="Class" />
      <Type Name="CallingBotServiceSettings" Kind="Class" />
      <Type Name="CallingContext" Kind="Class" />
      <Type Name="CallingConversation" Kind="Class" />
      <Type Name="CallingModule" Kind="Class" />
      <Type Name="CallingModule_MakeBot" Kind="Class" />
      <Type Name="CallRequestType" Kind="Enumeration" />
      <Type Name="ICallingBot" Kind="Interface" />
      <Type Name="ICallingBotService" Kind="Interface" />
      <Type Name="ParsedCallingRequest" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Calling.Events">
      <Type Name="AnswerOutcomeEvent" Kind="Class" />
      <Type Name="HangupOutcomeEvent" Kind="Class" />
      <Type Name="IncomingCallEvent" Kind="Class" />
      <Type Name="OutcomeEventBase" Kind="Class" />
      <Type Name="PlayPromptOutcomeEvent" Kind="Class" />
      <Type Name="RecognizeOutcomeEvent" Kind="Class" />
      <Type Name="RecordOutcomeEvent" Kind="Class" />
      <Type Name="RejectOutcomeEvent" Kind="Class" />
      <Type Name="WorkflowValidationOutcomeEvent" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Calling.Exceptions">
      <Type Name="BotCallingServiceException" Kind="Class" />
      <Type Name="BotConfigurationException" Kind="Class" />
      <Type Name="BotException" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Calling.ObjectModel.Contracts">
      <Type Name="ActionBase" Kind="Class" />
      <Type Name="ActionConverter" Kind="Class" />
      <Type Name="AgentContactNotification" Kind="Class" />
      <Type Name="Answer" Kind="Class" />
      <Type Name="AnswerOutcome" Kind="Class" />
      <Type Name="BaseMessage" Kind="Class" />
      <Type Name="CallbackLink" Kind="Class" />
      <Type Name="ChoiceOutcome" Kind="Class" />
      <Type Name="CollectDigits" Kind="Class" />
      <Type Name="CollectDigitsOutcome" Kind="Class" />
      <Type Name="Conversation" Kind="Class" />
      <Type Name="ConversationBase" Kind="Class" />
      <Type Name="ConversationResult" Kind="Class" />
      <Type Name="Hangup" Kind="Class" />
      <Type Name="HangupOutcome" Kind="Class" />
      <Type Name="OperationOutcomeBase" Kind="Class" />
      <Type Name="OperationOutcomeConverter" Kind="Class" />
      <Type Name="Participant" Kind="Class" />
      <Type Name="PlayPrompt" Kind="Class" />
      <Type Name="PlayPromptOutcome" Kind="Class" />
      <Type Name="Prompt" Kind="Class" />
      <Type Name="RecognitionOption" Kind="Class" />
      <Type Name="Recognize" Kind="Class" />
      <Type Name="RecognizeOutcome" Kind="Class" />
      <Type Name="Record" Kind="Class" />
      <Type Name="RecordOutcome" Kind="Class" />
      <Type Name="Reject" Kind="Class" />
      <Type Name="RejectOutcome" Kind="Class" />
      <Type Name="ValidActions" Kind="Class" />
      <Type Name="ValidDtmfs" Kind="Class" />
      <Type Name="ValidOutcomes" Kind="Class" />
      <Type Name="Workflow" Kind="Class" />
      <Type Name="WorkflowValidationOutcome" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Calling.ObjectModel.Misc">
      <Type Name="ApplicationState" Kind="Class" />
      <Type Name="CallState" Kind="Enumeration" />
      <Type Name="Culture" Kind="Enumeration" />
      <Type Name="DigitCollectionCompletionReason" Kind="Enumeration" />
      <Type Name="JSONConstants" Kind="Class" />
      <Type Name="JsonCreationConverter`1" DisplayName="JsonCreationConverter&lt;T&gt;" Kind="Class" />
      <Type Name="MaxValues" Kind="Class" />
      <Type Name="MinValues" Kind="Class" />
      <Type Name="ModalityType" Kind="Enumeration" />
      <Type Name="MultiPartConstants" Kind="Class" />
      <Type Name="Outcome" Kind="Enumeration" />
      <Type Name="RecognitionCompletionReason" Kind="Enumeration" />
      <Type Name="RecordingCompletionReason" Kind="Enumeration" />
      <Type Name="RecordingFormat" Kind="Enumeration" />
      <Type Name="ResolutionFormat" Kind="Enumeration" />
      <Type Name="SayAs" Kind="Enumeration" />
      <Type Name="Serializer" Kind="Class" />
      <Type Name="StringEnumConverterWithDefault`1" DisplayName="StringEnumConverterWithDefault&lt;TEnum&gt;" Kind="Class" />
      <Type Name="Utils" Kind="Class" />
      <Type Name="VoiceGender" Kind="Enumeration" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.CognitiveServices.LuisActionBinding">
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.CognitiveServices.LuisActionBinding.Bot">
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.CognitiveServices.QnAMaker">
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.CognitiveServices.QnAMaker.Resource">
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.ConnectorEx">
      <Type Name="ConversationReferenceHelpers" Kind="Class" />
      <Type Name="Extensions" Kind="Class" />
      <Type Name="FacebookMessage" Kind="Class" />
      <Type Name="FacebookQuickReply" Kind="Class" />
      <Type Name="FacebookQuickReply+ContentTypes" Kind="Class" />
      <Type Name="ILocaleFinder" Kind="Interface" />
      <Type Name="KeyboardCard" Kind="Class" />
      <Type Name="KeyboardCardEx" Kind="Class" />
      <Type Name="LocaleFinder" Kind="Class" />
      <Type Name="ResumptionContext" Kind="Class" />
      <Type Name="ResumptionData" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Dialogs">
      <Type Name="ActivityPrompt" Kind="Class" />
      <Type Name="Address" Kind="Class" />
      <Type Name="AttachmentPrompt" Kind="Class" />
      <Type Name="Awaitable" Kind="Class" />
      <Type Name="AwaitableFromItem`1" DisplayName="AwaitableFromItem&lt;T&gt;" Kind="Class" />
      <Type Name="AwaitableFromSource`2" DisplayName="AwaitableFromSource&lt;TSource,TItem&gt;" Kind="Class" />
      <Type Name="Case`2" DisplayName="Case&lt;T,R&gt;" Kind="Class" />
      <Type Name="Chain" Kind="Class" />
      <Type Name="Chain+Continuation`2" DisplayName="Chain+Continuation&lt;T,R&gt;" Kind="Delegate" />
      <Type Name="Chain+WhereCanceledException" Kind="Class" />
      <Type Name="ChannelCapability" Kind="Class" />
      <Type Name="ChannelCapabilityEx" Kind="Class" />
      <Type Name="ChannelIds" Kind="Class" />
      <Type Name="ChoicePrompt" Kind="Class" />
      <Type Name="ChronoDuration" Kind="Class" />
      <Type Name="ChronoDurationResolution" Kind="Class" />
      <Type Name="CommandDialog`1" DisplayName="CommandDialog&lt;T&gt;" Kind="Class" />
      <Type Name="CommandDialog`1+Command" DisplayName="CommandDialog&lt;T&gt;+Command" Kind="Class" />
      <Type Name="ComponentDialog" Kind="Class" />
      <Type Name="ConfirmPrompt" Kind="Class" />
      <Type Name="ContextualSelector`2" DisplayName="ContextualSelector&lt;T,R&gt;" Kind="Delegate" />
      <Type Name="Conversation" Kind="Class" />
      <Type Name="ConversationAddressComparer" Kind="Class" />
      <Type Name="DateTimePrompt" Kind="Class" />
      <Type Name="DateTimeResolution" Kind="Class" />
      <Type Name="DefaultCase`2" DisplayName="DefaultCase&lt;T,R&gt;" Kind="Class" />
      <Type Name="DeleteProfileScorable" Kind="Class" />
      <Type Name="Dialog" Kind="Class" />
      <Type Name="DialogContext" Kind="Class" />
      <Type Name="DialogExtensions" Kind="Class" />
      <Type Name="DialogInstance" Kind="Class" />
      <Type Name="DialogReason" Kind="Enumeration" />
      <Type Name="DialogSet" Kind="Class" />
      <Type Name="DialogStackException" Kind="Class" />
      <Type Name="DialogState" Kind="Class" />
      <Type Name="DialogTurnResult" Kind="Class" />
      <Type Name="DialogTurnStatus" Kind="Enumeration" />
      <Type Name="DispatchDialog" Kind="Class" />
      <Type Name="DispatchDialog`1" DisplayName="DispatchDialog&lt;TResult&gt;" Kind="Class" />
      <Type Name="EndConversationEvent" Kind="Class" />
      <Type Name="Extensions" Kind="Class" />
      <Type Name="GetTokenDialog" Kind="Class" />
      <Type Name="GetTokenResponse" Kind="Class" />
      <Type Name="IAddress" Kind="Interface" />
      <Type Name="IAwaitable`1" DisplayName="IAwaitable&lt;T&gt;" Kind="Interface" />
      <Type Name="IBotContext" Kind="Interface" />
      <Type Name="IBotDataBag" Kind="Interface" />
      <Type Name="ICase`2" DisplayName="ICase&lt;T,R&gt;" Kind="Interface" />
      <Type Name="IChannelCapability" Kind="Interface" />
      <Type Name="IDialog" Kind="Interface" />
      <Type Name="IDialog`1" DisplayName="IDialog&lt;TResult&gt;" Kind="Interface" />
      <Type Name="IDialogContext" Kind="Interface" />
      <Type Name="IntentActivityHandler" Kind="Delegate" />
      <Type Name="IntentHandler" Kind="Delegate" />
      <Type Name="InvalidIntentHandlerException" Kind="Class" />
      <Type Name="IPromptOptions`1" DisplayName="IPromptOptions&lt;T&gt;" Kind="Interface" />
      <Type Name="IPromptRecognizeChoicesOptions" Kind="Interface" />
      <Type Name="IPromptRecognizeNumbersOptions" Kind="Interface" />
      <Type Name="IPromptRecognizer" Kind="Interface" />
      <Type Name="IPromptRecognizeValuesOptions" Kind="Interface" />
      <Type Name="LuisActionDialog" Kind="Class" />
      <Type Name="LuisDialog`1" DisplayName="LuisDialog&lt;TResult&gt;" Kind="Class" />
      <Type Name="LuisIntentAttribute" Kind="Class" />
      <Type Name="LuisServiceResult" Kind="Class" />
      <Type Name="LuisTraceInfo" Kind="Class" />
      <Type Name="MessageOptions" Kind="Class" />
      <Type Name="MultipleResumeHandlerException" Kind="Class" />
      <Type Name="NoResumeHandlerException" Kind="Class" />
      <Type Name="NumberPrompt`1" DisplayName="NumberPrompt&lt;T&gt;" Kind="Class" />
      <Type Name="OAuthPrompt" Kind="Class" />
      <Type Name="OAuthPromptSettings" Kind="Class" />
      <Type Name="Prompt`1" DisplayName="Prompt&lt;T&gt;" Kind="Class" />
      <Type Name="PromptDialog" Kind="Class" />
      <Type Name="PromptDialog+PromptAttachment" Kind="Class" />
      <Type Name="PromptDialog+PromptChoice`1" DisplayName="PromptDialog+PromptChoice&lt;T&gt;" Kind="Class" />
      <Type Name="PromptDialog+PromptConfirm" Kind="Class" />
      <Type Name="PromptDialog+PromptDouble" Kind="Class" />
      <Type Name="PromptDialog+PromptInt64" Kind="Class" />
      <Type Name="PromptDialog+PromptString" Kind="Class" />
      <Type Name="PromptException" Kind="Class" />
      <Type Name="PromptOptions" Kind="Class" />
      <Type Name="PromptOptions`1" DisplayName="PromptOptions&lt;T&gt;" Kind="Class" />
      <Type Name="PromptOptionsWithSynonyms`1" DisplayName="PromptOptionsWithSynonyms&lt;T&gt;" Kind="Class" />
      <Type Name="PromptRecognizeChoicesOptions" Kind="Class" />
      <Type Name="PromptRecognizeNumbersOptions" Kind="Class" />
      <Type Name="PromptRecognizer" Kind="Class" />
      <Type Name="PromptRecognizerResult`1" DisplayName="PromptRecognizerResult&lt;T&gt;" Kind="Class" />
      <Type Name="PromptStyle" Kind="Enumeration" />
      <Type Name="PromptStyler" Kind="Class" />
      <Type Name="PromptValidator`1" DisplayName="PromptValidator&lt;T&gt;" Kind="Delegate" />
      <Type Name="PromptValidatorContext`1" DisplayName="PromptValidatorContext&lt;T&gt;" Kind="Class" />
      <Type Name="RecognizeEntity`1" DisplayName="RecognizeEntity&lt;T&gt;" Kind="Class" />
      <Type Name="RegexCase`1" DisplayName="RegexCase&lt;R&gt;" Kind="Class" />
      <Type Name="ResumeAfter`1" DisplayName="ResumeAfter&lt;T&gt;" Kind="Delegate" />
      <Type Name="ResumptionCookie" Kind="Class" />
      <Type Name="StartAsync" Kind="Delegate" />
      <Type Name="TextPrompt" Kind="Class" />
      <Type Name="TooManyAttemptsException" Kind="Class" />
      <Type Name="UrlToken" Kind="Class" />
      <Type Name="WaterfallDialog" Kind="Class" />
      <Type Name="WaterfallStep" Kind="Delegate" />
      <Type Name="WaterfallStepContext" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Dialogs.Choices">
      <Type Name="Channel" Kind="Class" />
      <Type Name="Channel+Channels" Kind="Class" />
      <Type Name="Choice" Kind="Class" />
      <Type Name="ChoiceFactory" Kind="Class" />
      <Type Name="ChoiceFactoryOptions" Kind="Class" />
      <Type Name="ChoiceRecognizers" Kind="Class" />
      <Type Name="Find" Kind="Class" />
      <Type Name="FindChoicesOptions" Kind="Class" />
      <Type Name="FindValuesOptions" Kind="Class" />
      <Type Name="FoundChoice" Kind="Class" />
      <Type Name="FoundValue" Kind="Class" />
      <Type Name="ListStyle" Kind="Enumeration" />
      <Type Name="ModelResult`1" DisplayName="ModelResult&lt;T&gt;" Kind="Class" />
      <Type Name="SortedValue" Kind="Class" />
      <Type Name="Token" Kind="Class" />
      <Type Name="Tokenizer" Kind="Class" />
      <Type Name="TokenizerFunction" Kind="Delegate" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Dialogs.Internals">
      <Type Name="AlwaysSendDirect_BotToUser" Kind="Class" />
      <Type Name="AutoInputHint_BotToUser" Kind="Class" />
      <Type Name="BotDataBagStream" Kind="Class" />
      <Type Name="BotDataBase`1" DisplayName="BotDataBase&lt;T&gt;" Kind="Class" />
      <Type Name="BotStoreType" Kind="Enumeration" />
      <Type Name="BotToUserQueue" Kind="Class" />
      <Type Name="BotToUserTextWriter" Kind="Class" />
      <Type Name="CachingBotDataStore" Kind="Class" />
      <Type Name="CachingBotDataStoreConsistencyPolicy" Kind="Enumeration" />
      <Type Name="ConnectorClientFactory" Kind="Class" />
      <Type Name="ConnectorStore" Kind="Class" />
      <Type Name="DialogContext" Kind="Class" />
      <Type Name="DialogModule" Kind="Class" />
      <Type Name="DialogModule_MakeRoot" Kind="Class" />
      <Type Name="DialogRouter" Kind="Class" />
      <Type Name="DialogSystem" Kind="Class" />
      <Type Name="DialogTask" Kind="Class" />
      <Type Name="DialogTask+IThunk" Kind="Interface" />
      <Type Name="DialogTaskManager" Kind="Class" />
      <Type Name="DialogTaskManagerBotDataLoader" Kind="Class" />
      <Type Name="DictionaryBotData" Kind="Class" />
      <Type Name="EventLoopDialogTask" Kind="Class" />
      <Type Name="ExceptionTranslationDialogTask" Kind="Class" />
      <Type Name="Extensions" Kind="Class" />
      <Type Name="IBotData" Kind="Interface" />
      <Type Name="IBotDataStore`1" DisplayName="IBotDataStore&lt;T&gt;" Kind="Interface" />
      <Type Name="IBotToUser" Kind="Interface" />
      <Type Name="IConnectorClientFactory" Kind="Interface" />
      <Type Name="IDialogStack" Kind="Interface" />
      <Type Name="IDialogSystem" Kind="Interface" />
      <Type Name="IDialogTask" Kind="Interface" />
      <Type Name="IDialogTaskManager" Kind="Interface" />
      <Type Name="IDialogTasks" Kind="Interface" />
      <Type Name="IMessageActivityMapper" Kind="Interface" />
      <Type Name="IMessageQueue" Kind="Interface" />
      <Type Name="InMemoryDataStore" Kind="Class" />
      <Type Name="InputHintQueue" Kind="Class" />
      <Type Name="IPostToBot" Kind="Interface" />
      <Type Name="JObjectBotData" Kind="Class" />
      <Type Name="KeyboardCardMapper" Kind="Class" />
      <Type Name="LogBotToUser" Kind="Class" />
      <Type Name="LogPostToBot" Kind="Class" />
      <Type Name="MapToChannelData_BotToUser" Kind="Class" />
      <Type Name="NullBotToUser" Kind="Class" />
      <Type Name="NullPostToBot" Kind="Class" />
      <Type Name="PassBotToUser" Kind="Class" />
      <Type Name="PassPostToBot" Kind="Class" />
      <Type Name="PersistentDialogTask" Kind="Class" />
      <Type Name="PostUnhandledExceptionToUser" Kind="Class" />
      <Type Name="Prompt`2" DisplayName="Prompt&lt;T,U&gt;" Kind="Class" />
      <Type Name="QueueDrainingDialogTask" Kind="Class" />
      <Type Name="ReactiveDialogTask" Kind="Class" />
      <Type Name="ScoringEventLoop`1" DisplayName="ScoringEventLoop&lt;Score&gt;" Kind="Class" />
      <Type Name="SerializeByConversation" Kind="Class" />
      <Type Name="SetAmbientThreadCulture" Kind="Class" />
      <Type Name="SetLocalTimestampMapper" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.FormFlow">
      <Type Name="ActiveDelegate`1" DisplayName="ActiveDelegate&lt;T&gt;" Kind="Delegate" />
      <Type Name="BoolDefault" Kind="Enumeration" />
      <Type Name="BuildFormDelegate`1" DisplayName="BuildFormDelegate&lt;T&gt;" Kind="Delegate" />
      <Type Name="CaseNormalization" Kind="Enumeration" />
      <Type Name="Choice" Kind="Class" />
      <Type Name="ChoiceStyleOptions" Kind="Enumeration" />
      <Type Name="CommandDescription" Kind="Class" />
      <Type Name="DescribeAttribute" Kind="Class" />
      <Type Name="FeedbackOptions" Kind="Enumeration" />
      <Type Name="FormBuilder`1" DisplayName="FormBuilder&lt;T&gt;" Kind="Class" />
      <Type Name="FormBuilderBase`1" DisplayName="FormBuilderBase&lt;T&gt;" Kind="Class" />
      <Type Name="FormBuilderBase`1+Form" DisplayName="FormBuilderBase&lt;T&gt;+Form" Kind="Class" />
      <Type Name="FormCanceledException" Kind="Class" />
      <Type Name="FormCanceledException`1" DisplayName="FormCanceledException&lt;T&gt;" Kind="Class" />
      <Type Name="FormCommand" Kind="Enumeration" />
      <Type Name="FormConfiguration" Kind="Class" />
      <Type Name="FormDialog" Kind="Class" />
      <Type Name="FormDialog`1" DisplayName="FormDialog&lt;T&gt;" Kind="Class" />
      <Type Name="FormFlowAttribute" Kind="Class" />
      <Type Name="FormOptions" Kind="Enumeration" />
      <Type Name="IForm`1" DisplayName="IForm&lt;T&gt;" Kind="Class" />
      <Type Name="IFormBuilder`1" DisplayName="IFormBuilder&lt;T&gt;" Kind="Interface" />
      <Type Name="IFormDialog`1" DisplayName="IFormDialog&lt;T&gt;" Kind="Interface" />
      <Type Name="IgnoreFieldAttribute" Kind="Class" />
      <Type Name="MessageDelegate`1" DisplayName="MessageDelegate&lt;T&gt;" Kind="Delegate" />
      <Type Name="NumericAttribute" Kind="Class" />
      <Type Name="OnCompletionAsyncDelegate`1" DisplayName="OnCompletionAsyncDelegate&lt;T&gt;" Kind="Delegate" />
      <Type Name="OptionalAttribute" Kind="Class" />
      <Type Name="OrderAttribute" Kind="Class" />
      <Type Name="PatternAttribute" Kind="Class" />
      <Type Name="PromptAttribute" Kind="Class" />
      <Type Name="TemplateAttribute" Kind="Class" />
      <Type Name="TemplateUsage" Kind="Enumeration" />
      <Type Name="TermsAttribute" Kind="Class" />
      <Type Name="ValidateAsyncDelegate`1" DisplayName="ValidateAsyncDelegate&lt;T&gt;" Kind="Delegate" />
      <Type Name="ValidateResult" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.FormFlow.Advanced">
      <Type Name="AttachmentContentTypeValidatorAttribute" Kind="Class" />
      <Type Name="AttachmentValidatorAttribute" Kind="Class" />
      <Type Name="AwaitableAttachment" Kind="Class" />
      <Type Name="Confirmation`1" DisplayName="Confirmation&lt;T&gt;" Kind="Class" />
      <Type Name="DefineAsyncDelegate`1" DisplayName="DefineAsyncDelegate&lt;T&gt;" Kind="Delegate" />
      <Type Name="Extensions" Kind="Class" />
      <Type Name="Field`1" DisplayName="Field&lt;T&gt;" Kind="Class" />
      <Type Name="FieldReflector`1" DisplayName="FieldReflector&lt;T&gt;" Kind="Class" />
      <Type Name="FieldRole" Kind="Enumeration" />
      <Type Name="Fields`1" DisplayName="Fields&lt;T&gt;" Kind="Class" />
      <Type Name="FormButton" Kind="Class" />
      <Type Name="FormPrompt" Kind="Class" />
      <Type Name="IField`1" DisplayName="IField&lt;T&gt;" Kind="Interface" />
      <Type Name="IFieldDescription" Kind="Interface" />
      <Type Name="IFieldPrompt`1" DisplayName="IFieldPrompt&lt;T&gt;" Kind="Interface" />
      <Type Name="IFieldResources" Kind="Interface" />
      <Type Name="IFields`1" DisplayName="IFields&lt;T&gt;" Kind="Interface" />
      <Type Name="IFieldState`1" DisplayName="IFieldState&lt;T&gt;" Kind="Interface" />
      <Type Name="ILocalizer" Kind="Interface" />
      <Type Name="IPrompt`1" DisplayName="IPrompt&lt;T&gt;" Kind="Interface" />
      <Type Name="IRecognize`1" DisplayName="IRecognize&lt;T&gt;" Kind="Interface" />
      <Type Name="Language" Kind="Class" />
      <Type Name="LanguageResources" Kind="Class" />
      <Type Name="Localizer" Kind="Class" />
      <Type Name="NextDelegate`1" DisplayName="NextDelegate&lt;T&gt;" Kind="Delegate" />
      <Type Name="NextStep" Kind="Class" />
      <Type Name="PromptAsyncDelegate`1" DisplayName="PromptAsyncDelegate&lt;T&gt;" Kind="Delegate" />
      <Type Name="Prompter`1" DisplayName="Prompter&lt;T&gt;" Kind="Class" />
      <Type Name="RecognizeAttachment`1" DisplayName="RecognizeAttachment&lt;T&gt;" Kind="Class" />
      <Type Name="RecognizeBool`1" DisplayName="RecognizeBool&lt;T&gt;" Kind="Class" />
      <Type Name="RecognizeDateTime`1" DisplayName="RecognizeDateTime&lt;T&gt;" Kind="Class" />
      <Type Name="RecognizeDouble`1" DisplayName="RecognizeDouble&lt;T&gt;" Kind="Class" />
      <Type Name="RecognizeEnumeration`1" DisplayName="RecognizeEnumeration&lt;T&gt;" Kind="Class" />
      <Type Name="RecognizeEnumeration`1+DescriptionDelegate" DisplayName="RecognizeEnumeration&lt;T&gt;+DescriptionDelegate" Kind="Delegate" />
      <Type Name="RecognizeEnumeration`1+TermsDelegate" DisplayName="RecognizeEnumeration&lt;T&gt;+TermsDelegate" Kind="Delegate" />
      <Type Name="RecognizeNumber`1" DisplayName="RecognizeNumber&lt;T&gt;" Kind="Class" />
      <Type Name="RecognizePrimitive`1" DisplayName="RecognizePrimitive&lt;T&gt;" Kind="Class" />
      <Type Name="RecognizeString`1" DisplayName="RecognizeString&lt;T&gt;" Kind="Class" />
      <Type Name="ScriptGlobals" Kind="Class" />
      <Type Name="SpecialValues" Kind="Enumeration" />
      <Type Name="StepDirection" Kind="Enumeration" />
      <Type Name="TemplateBaseAttribute" Kind="Class" />
      <Type Name="TermMatch" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.FormFlow.Json">
      <Type Name="FieldJson" Kind="Class" />
      <Type Name="FormBuilderJson" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.History">
      <Type Name="IActivityLogger" Kind="Interface" />
      <Type Name="IActivityManager" Kind="Interface" />
      <Type Name="IActivitySource" Kind="Interface" />
      <Type Name="NullActivityLogger" Kind="Class" />
      <Type Name="ReplayTranscript" Kind="Class" />
      <Type Name="TraceActivityLogger" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Integration">
      <Type Name="BotFrameworkOptions" Kind="Class" />
      <Type Name="BotFrameworkPaths" Kind="Class" />
      <Type Name="IAdapterIntegration" Kind="Interface" />
      <Type Name="MessageSerializerSettings" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Integration.ApplicationInsights.Core">
      <Type Name="ApplicationBuilderExtensions" Kind="Class" />
      <Type Name="ServiceCollectionExtensions" Kind="Class" />
      <Type Name="TelemetryBotIdInitializer" Kind="Class" />
      <Type Name="TelemetrySaveBodyASPMiddleware" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Integration.ApplicationInsights.WebApi">
      <Type Name="TelemetryBotIdInitializer" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Integration.AspNet.Core">
      <Type Name="ApplicationBuilderExtensions" Kind="Class" />
      <Type Name="BotFrameworkHttpAdapter" Kind="Class" />
      <Type Name="IBotFrameworkHttpAdapter" Kind="Interface" />
      <Type Name="ServiceCollectionExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Integration.AspNet.Core.Handlers">
      <Type Name="BotMessageHandler" Kind="Class" />
      <Type Name="BotMessageHandlerBase" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Integration.AspNet.WebApi">
      <Type Name="BotFrameworkConfigurationBuilder" Kind="Class" />
      <Type Name="BotFrameworkConfigurationBuilderExtensions" Kind="Class" />
      <Type Name="BotFrameworkHttpAdapter" Kind="Class" />
      <Type Name="HttpConfigurationExtensions" Kind="Class" />
      <Type Name="IBotFrameworkHttpAdapter" Kind="Interface" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Integration.AspNet.WebApi.Handlers">
      <Type Name="BotMessageHandler" Kind="Class" />
      <Type Name="BotMessageHandlerBase" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Internals.Fibers">
      <Type Name="ClosureCaptureException" Kind="Class" />
      <Type Name="DoNotSerializeResolver" Kind="Class" />
      <Type Name="ErrorResilientStore`1" DisplayName="ErrorResilientStore&lt;T&gt;" Kind="Class" />
      <Type Name="Extensions" Kind="Class" />
      <Type Name="FactoryStore`1" DisplayName="FactoryStore&lt;T&gt;" Kind="Class" />
      <Type Name="Fiber`1" DisplayName="Fiber&lt;C&gt;" Kind="Class" />
      <Type Name="FiberModule" Kind="Class" />
      <Type Name="FiberModule`1" DisplayName="FiberModule&lt;C&gt;" Kind="Class" />
      <Type Name="FormatterStore`1" DisplayName="FormatterStore&lt;T&gt;" Kind="Class" />
      <Type Name="Frame`1" DisplayName="Frame&lt;C&gt;" Kind="Class" />
      <Type Name="FrameFactory`1" DisplayName="FrameFactory&lt;C&gt;" Kind="Class" />
      <Type Name="IAwaiter`1" DisplayName="IAwaiter&lt;T&gt;" Kind="Interface" />
      <Type Name="IFiber`1" DisplayName="IFiber&lt;C&gt;" Kind="Interface" />
      <Type Name="IFiberLoop`1" DisplayName="IFiberLoop&lt;C&gt;" Kind="Interface" />
      <Type Name="IFrame`1" DisplayName="IFrame&lt;C&gt;" Kind="Interface" />
      <Type Name="IFrameFactory`1" DisplayName="IFrameFactory&lt;C&gt;" Kind="Interface" />
      <Type Name="IFrameLoop`1" DisplayName="IFrameLoop&lt;C&gt;" Kind="Interface" />
      <Type Name="IItem`1" DisplayName="IItem&lt;T&gt;" Kind="Interface" />
      <Type Name="InvalidNeedException" Kind="Class" />
      <Type Name="InvalidNextException" Kind="Class" />
      <Type Name="InvalidTypeException" Kind="Class" />
      <Type Name="InvalidWaitException" Kind="Class" />
      <Type Name="IPost`1" DisplayName="IPost&lt;T&gt;" Kind="Interface" />
      <Type Name="IScope`1" DisplayName="IScope&lt;T&gt;" Kind="Interface" />
      <Type Name="IStackStoreFactory`1" DisplayName="IStackStoreFactory&lt;C&gt;" Kind="Interface" />
      <Type Name="IStore`1" DisplayName="IStore&lt;T&gt;" Kind="Interface" />
      <Type Name="ITraits`1" DisplayName="ITraits&lt;T&gt;" Kind="Interface" />
      <Type Name="IWait" Kind="Interface" />
      <Type Name="IWait`1" DisplayName="IWait&lt;C&gt;" Kind="Interface" />
      <Type Name="IWait`2" DisplayName="IWait&lt;C,T&gt;" Kind="Interface" />
      <Type Name="IWaiter`1" DisplayName="IWaiter&lt;C&gt;" Kind="Interface" />
      <Type Name="IWaitFactory`1" DisplayName="IWaitFactory&lt;C&gt;" Kind="Interface" />
      <Type Name="LocalMutualExclusion`1" DisplayName="LocalMutualExclusion&lt;T&gt;" Kind="Class" />
      <Type Name="Methods" Kind="Class" />
      <Type Name="Need" Kind="Enumeration" />
      <Type Name="NormalizedTraits" Kind="Class" />
      <Type Name="NullWait`1" DisplayName="NullWait&lt;C&gt;" Kind="Class" />
      <Type Name="Pair" Kind="Class" />
      <Type Name="Pair`2" DisplayName="Pair&lt;T1,T2&gt;" Kind="Structure" />
      <Type Name="PostStruct`1" DisplayName="PostStruct&lt;T&gt;" Kind="Class" />
      <Type Name="Range" Kind="Class" />
      <Type Name="Range`1" DisplayName="Range&lt;T&gt;" Kind="Structure" />
      <Type Name="ReflectionSurrogateModule" Kind="Class" />
      <Type Name="Rest`2" DisplayName="Rest&lt;C,T&gt;" Kind="Delegate" />
      <Type Name="Serialization" Kind="Class" />
      <Type Name="Serialization+ClosureCaptureErrorSurrogate" Kind="Class" />
      <Type Name="Serialization+ISurrogateProvider" Kind="Interface" />
      <Type Name="Serialization+JObjectSurrogate" Kind="Class" />
      <Type Name="Serialization+StoreInstanceByFieldsSurrogate" Kind="Class" />
      <Type Name="Serialization+StoreInstanceByTypeSurrogate" Kind="Class" />
      <Type Name="Serialization+StoreInstanceByTypeSurrogate+ObjectReference" Kind="Class" />
      <Type Name="Serialization+SurrogateLogDecorator" Kind="Class" />
      <Type Name="Serialization+SurrogateSelector" Kind="Class" />
      <Type Name="SetField" Kind="Class" />
      <Type Name="StoreFromStack`1" DisplayName="StoreFromStack&lt;C&gt;" Kind="Class" />
      <Type Name="Tasks`1" DisplayName="Tasks&lt;T&gt;" Kind="Class" />
      <Type Name="Wait`2" DisplayName="Wait&lt;C,T&gt;" Kind="Class" />
      <Type Name="WaitFactory`1" DisplayName="WaitFactory&lt;C&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Luis">
      <Type Name="BuiltIn" Kind="Class" />
      <Type Name="BuiltIn+DateTime" Kind="Class" />
      <Type Name="BuiltIn+DateTime+DateTimeResolution" Kind="Class" />
      <Type Name="BuiltIn+DateTime+DayPart" Kind="Enumeration" />
      <Type Name="BuiltIn+DateTime+DurationResolution" Kind="Class" />
      <Type Name="BuiltIn+DateTime+Reference" Kind="Enumeration" />
      <Type Name="Extensions" Kind="Class" />
      <Type Name="ICalendarPlus" Kind="Interface" />
      <Type Name="IEntityToType" Kind="Interface" />
      <Type Name="ILuisModel" Kind="Interface" />
      <Type Name="ILuisOptions" Kind="Interface" />
      <Type Name="ILuisService" Kind="Interface" />
      <Type Name="IResolutionParser" Kind="Interface" />
      <Type Name="LuisApiVersion" Kind="Enumeration" />
      <Type Name="LuisModelAttribute" Kind="Class" />
      <Type Name="LuisRequest" Kind="Class" />
      <Type Name="LuisService" Kind="Class" />
      <Type Name="Resolution" Kind="Class" />
      <Type Name="ResolutionParser" Kind="Class" />
      <Type Name="StrictEntityToType" Kind="Class" />
      <Type Name="WesternCalendarPlus" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Luis.Models">
      <Type Name="Action" Kind="Class" />
      <Type Name="ActionParameter" Kind="Class" />
      <Type Name="CompositeChild" Kind="Class" />
      <Type Name="CompositeEntity" Kind="Class" />
      <Type Name="DialogResponse" Kind="Class" />
      <Type Name="DialogResponse+DialogStatus" Kind="Class" />
      <Type Name="EntityRecommendation" Kind="Class" />
      <Type Name="IntentRecommendation" Kind="Class" />
      <Type Name="LuisResult" Kind="Class" />
      <Type Name="Sentiment" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Resource">
      <Type Name="Extensions" Kind="Class" />
      <Type Name="Resources" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Scorables">
      <Type Name="Actions" Kind="Class" />
      <Type Name="Actions+WhereScorable`1" DisplayName="Actions+WhereScorable&lt;Score&gt;" Kind="Class" />
      <Type Name="Actions+WhereScorable`1+Token" DisplayName="Actions+WhereScorable&lt;Score&gt;+Token" Kind="Class" />
      <Type Name="Dispatcher" Kind="Class" />
      <Type Name="EntityAttribute" Kind="Class" />
      <Type Name="IDispatcher" Kind="Interface" />
      <Type Name="IScorable`2" DisplayName="IScorable&lt;Item,Score&gt;" Kind="Interface" />
      <Type Name="MethodBindAttribute" Kind="Class" />
      <Type Name="RegexPatternAttribute" Kind="Class" />
      <Type Name="Scorable" Kind="Class" />
      <Type Name="ScorableGroupAttribute" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.Scorables.Internals">
      <Type Name="ActivityResolver" Kind="Class" />
      <Type Name="ArrayResolver" Kind="Class" />
      <Type Name="AttributeString" Kind="Class" />
      <Type Name="AutofacResolver" Kind="Class" />
      <Type Name="Binder" Kind="Class" />
      <Type Name="Binding" Kind="Class" />
      <Type Name="Binding`1" DisplayName="Binding&lt;R&gt;" Kind="Class" />
      <Type Name="BindingComparer" Kind="Class" />
      <Type Name="DelegateScorable" Kind="Class" />
      <Type Name="DelegatingFoldScorable`2" DisplayName="DelegatingFoldScorable&lt;Item,Score&gt;" Kind="Class" />
      <Type Name="DelegatingResolver" Kind="Class" />
      <Type Name="DelegatingScorable`2" DisplayName="DelegatingScorable&lt;Item,Score&gt;" Kind="Class" />
      <Type Name="EnumResolver" Kind="Class" />
      <Type Name="EventActivityValueResolver" Kind="Class" />
      <Type Name="Extensions" Kind="Class" />
      <Type Name="FirstScorable`2" DisplayName="FirstScorable&lt;Item,Score&gt;" Kind="Class" />
      <Type Name="FoldScorable`2" DisplayName="FoldScorable&lt;Item,Score&gt;" Kind="Class" />
      <Type Name="FoldScorable`2+OnStageDelegate" DisplayName="FoldScorable&lt;Item,Score&gt;+OnStageDelegate" Kind="Delegate" />
      <Type Name="FoldScorable`2+State" DisplayName="FoldScorable&lt;Item,Score&gt;+State" Kind="Structure" />
      <Type Name="FoldStage" Kind="Enumeration" />
      <Type Name="IBinder" Kind="Interface" />
      <Type Name="IBinding" Kind="Interface" />
      <Type Name="IBinding`1" DisplayName="IBinding&lt;R&gt;" Kind="Interface" />
      <Type Name="InheritedAttributes" Kind="Class" />
      <Type Name="IntentComparer" Kind="Class" />
      <Type Name="InvokeActivityValueResolver" Kind="Class" />
      <Type Name="IResolver" Kind="Interface" />
      <Type Name="IScorableFactory`2" DisplayName="IScorableFactory&lt;Item,Score&gt;" Kind="Interface" />
      <Type Name="LuisIntentScorable`2" DisplayName="LuisIntentScorable&lt;InnerState,InnerScore&gt;" Kind="Class" />
      <Type Name="LuisIntentScorable`2+Scope" DisplayName="LuisIntentScorable&lt;InnerState,InnerScore&gt;+Scope" Kind="Class" />
      <Type Name="LuisIntentScorableFactory" Kind="Class" />
      <Type Name="MatchComparer" Kind="Class" />
      <Type Name="MethodResolutionException" Kind="Class" />
      <Type Name="MethodScorable" Kind="Class" />
      <Type Name="MethodScorableBase" Kind="Class" />
      <Type Name="MethodScorableFactory" Kind="Class" />
      <Type Name="NoneResolver" Kind="Class" />
      <Type Name="NullComparer`1" DisplayName="NullComparer&lt;T&gt;" Kind="Class" />
      <Type Name="NullResolver" Kind="Class" />
      <Type Name="NullScorable`2" DisplayName="NullScorable&lt;Item,Score&gt;" Kind="Class" />
      <Type Name="OrderScorableFactory`2" DisplayName="OrderScorableFactory&lt;Item,Score&gt;" Kind="Class" />
      <Type Name="PropertyResolver`1" DisplayName="PropertyResolver&lt;T&gt;" Kind="Class" />
      <Type Name="RegexMatchScorable" Kind="Class" />
      <Type Name="RegexMatchScorable`2" DisplayName="RegexMatchScorable&lt;InnerState,InnerScore&gt;" Kind="Class" />
      <Type Name="RegexMatchScorable`2+Scope" DisplayName="RegexMatchScorable&lt;InnerState,InnerScore&gt;+Scope" Kind="Class" />
      <Type Name="RegexMatchScorableFactory" Kind="Class" />
      <Type Name="ResolverScope`1" DisplayName="ResolverScope&lt;InnerScore&gt;" Kind="Class" />
      <Type Name="ResolverScorable`4" DisplayName="ResolverScorable&lt;OuterState,OuterScore,InnerState,InnerScore&gt;" Kind="Class" />
      <Type Name="ScorableAggregator`6" DisplayName="ScorableAggregator&lt;OuterItem,OuterState,OuterScore,InnerItem,InnerState,InnerScore&gt;" Kind="Class" />
      <Type Name="ScorableBase`3" DisplayName="ScorableBase&lt;Item,State,Score&gt;" Kind="Class" />
      <Type Name="SelectItemScorable`3" DisplayName="SelectItemScorable&lt;OuterItem,InnerItem,Score&gt;" Kind="Class" />
      <Type Name="SelectScoreScorable`3" DisplayName="SelectScoreScorable&lt;Item,SourceScore,TargetScore&gt;" Kind="Class" />
      <Type Name="Token`2" DisplayName="Token&lt;InnerItem,InnerScore&gt;" Kind="Class" />
      <Type Name="TraitsScorable`2" DisplayName="TraitsScorable&lt;Item,Score&gt;" Kind="Class" />
      <Type Name="TryResolve" Kind="Delegate" />
      <Type Name="WhereScoreScorable`2" DisplayName="WhereScoreScorable&lt;Item,Score&gt;" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.TemplateManager">
      <Type Name="DictionaryRenderer" Kind="Class" />
      <Type Name="ITemplateRenderer" Kind="Interface" />
      <Type Name="LanguageTemplateDictionary" Kind="Class" />
      <Type Name="TemplateIdMap" Kind="Class" />
      <Type Name="TemplateManager" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Builder.TraceExtensions">
      <Type Name="ITurnContextExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Configuration">
      <Type Name="AppInsightsService" Kind="Class" />
      <Type Name="AzureService" Kind="Class" />
      <Type Name="BlobStorageService" Kind="Class" />
      <Type Name="BotConfiguration" Kind="Class" />
      <Type Name="BotConfigurationExtensions" Kind="Class" />
      <Type Name="BotService" Kind="Class" />
      <Type Name="ConnectedService" Kind="Class" />
      <Type Name="CosmosDbService" Kind="Class" />
      <Type Name="DispatchService" Kind="Class" />
      <Type Name="EndpointService" Kind="Class" />
      <Type Name="FileService" Kind="Class" />
      <Type Name="GenericService" Kind="Class" />
      <Type Name="LuisService" Kind="Class" />
      <Type Name="QnAMakerService" Kind="Class" />
      <Type Name="ServiceTypes" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Configuration.Encryption">
      <Type Name="EncryptUtilities" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Connector">
      <Type Name="ActionTypes" Kind="Class" />
      <Type Name="Activity" Kind="Class" />
      <Type Name="ActivityExtensions" Kind="Class" />
      <Type Name="ActivityImportance" Kind="Class" />
      <Type Name="ActivityTypes" Kind="Class" />
      <Type Name="AnimationCard" Kind="Class" />
      <Type Name="APIResponse" Kind="Class" />
      <Type Name="Attachment" Kind="Class" />
      <Type Name="AttachmentData" Kind="Class" />
      <Type Name="AttachmentInfo" Kind="Class" />
      <Type Name="AttachmentLayoutTypes" Kind="Class" />
      <Type Name="Attachments" Kind="Class" />
      <Type Name="AttachmentsExtensions" Kind="Class" />
      <Type Name="AttachmentView" Kind="Class" />
      <Type Name="AudioCard" Kind="Class" />
      <Type Name="BasicCard" Kind="Class" />
      <Type Name="BotAuthenticationExtensions" Kind="Class" />
      <Type Name="BotAuthenticationHandler" Kind="Class" />
      <Type Name="BotAuthenticationOptions" Kind="Class" />
      <Type Name="BotAuthenticator" Kind="Class" />
      <Type Name="BotAuthenticator+EndorsementsValidator" Kind="Delegate" />
      <Type Name="BotData" Kind="Class" />
      <Type Name="BotSignIn" Kind="Class" />
      <Type Name="BotSignInExtensions" Kind="Class" />
      <Type Name="BotState" Kind="Class" />
      <Type Name="BotStateData" Kind="Class" />
      <Type Name="BotStateDataResult" Kind="Class" />
      <Type Name="BotStateExtensions" Kind="Class" />
      <Type Name="CardAction" Kind="Class" />
      <Type Name="CardImage" Kind="Class" />
      <Type Name="ChannelAccount" Kind="Class" />
      <Type Name="Channels" Kind="Class" />
      <Type Name="ClaimsIdentityEx" Kind="Class" />
      <Type Name="ConfigurationCredentialProvider" Kind="Class" />
      <Type Name="ConnectorClient" Kind="Class" />
      <Type Name="ContactRelationUpdateActionTypes" Kind="Class" />
      <Type Name="ConversationAccount" Kind="Class" />
      <Type Name="ConversationMembers" Kind="Class" />
      <Type Name="ConversationParameters" Kind="Class" />
      <Type Name="ConversationReference" Kind="Class" />
      <Type Name="ConversationResourceResponse" Kind="Class" />
      <Type Name="Conversations" Kind="Class" />
      <Type Name="ConversationsExtensions" Kind="Class" />
      <Type Name="ConversationsResult" Kind="Class" />
      <Type Name="CustomRedirectHandler" Kind="Class" />
      <Type Name="DeliveryModes" Kind="Class" />
      <Type Name="EndOfConversationCodes" Kind="Class" />
      <Type Name="EndorsementsRetriever" Kind="Class" />
      <Type Name="Entity" Kind="Class" />
      <Type Name="Error" Kind="Class" />
      <Type Name="ErrorCodes" Kind="Class" />
      <Type Name="ErrorHandling" Kind="Class" />
      <Type Name="ErrorResponse" Kind="Class" />
      <Type Name="ErrorResponseException" Kind="Class" />
      <Type Name="Extensions" Kind="Class" />
      <Type Name="Fact" Kind="Class" />
      <Type Name="GeoCoordinates" Kind="Class" />
      <Type Name="HeroCard" Kind="Class" />
      <Type Name="HttpClientEx" Kind="Class" />
      <Type Name="IActivity" Kind="Interface" />
      <Type Name="IAttachments" Kind="Interface" />
      <Type Name="IBotSignIn" Kind="Interface" />
      <Type Name="IBotState" Kind="Interface" />
      <Type Name="IConnectorClient" Kind="Interface" />
      <Type Name="IContactRelationUpdateActivity" Kind="Interface" />
      <Type Name="IConversations" Kind="Interface" />
      <Type Name="IConversationUpdateActivity" Kind="Interface" />
      <Type Name="ICredentialProvider" Kind="Interface" />
      <Type Name="IdentityToken" Kind="Class" />
      <Type Name="IdentityTokenExtensions" Kind="Class" />
      <Type Name="IEndOfConversationActivity" Kind="Interface" />
      <Type Name="IEventActivity" Kind="Interface" />
      <Type Name="IHandoffActivity" Kind="Interface" />
      <Type Name="IInstallationUpdateActivity" Kind="Interface" />
      <Type Name="IInvokeActivity" Kind="Interface" />
      <Type Name="IMessageActivity" Kind="Interface" />
      <Type Name="IMessageDeleteActivity" Kind="Interface" />
      <Type Name="IMessageReactionActivity" Kind="Interface" />
      <Type Name="IMessageUpdateActivity" Kind="Interface" />
      <Type Name="InnerHttpError" Kind="Class" />
      <Type Name="InputHints" Kind="Class" />
      <Type Name="InstallationUpdateActionTypes" Kind="Class" />
      <Type Name="IOAuthApi" Kind="Interface" />
      <Type Name="IOAuthClient" Kind="Interface" />
      <Type Name="IStateClient" Kind="Interface" />
      <Type Name="ISuggestionActivity" Kind="Interface" />
      <Type Name="ITraceActivity" Kind="Interface" />
      <Type Name="ITypingActivity" Kind="Interface" />
      <Type Name="IUserToken" Kind="Interface" />
      <Type Name="JwtConfig" Kind="Class" />
      <Type Name="JwtTokenExtractor" Kind="Class" />
      <Type Name="JwtTokenExtractor+EndorsementsValidator" Kind="Delegate" />
      <Type Name="MediaCard" Kind="Class" />
      <Type Name="MediaEventValue" Kind="Class" />
      <Type Name="MediaUrl" Kind="Class" />
      <Type Name="Mention" Kind="Class" />
      <Type Name="MessageReaction" Kind="Class" />
      <Type Name="MessageReactionTypes" Kind="Class" />
      <Type Name="MicrosoftAppCredentials" Kind="Class" />
      <Type Name="MicrosoftAppCredentials+OAuthException" Kind="Class" />
      <Type Name="MicrosoftPayMethodData" Kind="Class" />
      <Type Name="OAuthApi" Kind="Class" />
      <Type Name="OAuthCard" Kind="Class" />
      <Type Name="OAuthClient" Kind="Class" />
      <Type Name="OAuthClientConfig" Kind="Class" />
      <Type Name="OAuthClientOld" Kind="Class" />
      <Type Name="PagedMembersResult" Kind="Class" />
      <Type Name="PaymentAddress" Kind="Class" />
      <Type Name="PaymentCurrencyAmount" Kind="Class" />
      <Type Name="PaymentDetails" Kind="Class" />
      <Type Name="PaymentDetailsModifier" Kind="Class" />
      <Type Name="PaymentItem" Kind="Class" />
      <Type Name="PaymentMethodData" Kind="Class" />
      <Type Name="PaymentOperations" Kind="Class" />
      <Type Name="PaymentOptions" Kind="Class" />
      <Type Name="PaymentRequest" Kind="Class" />
      <Type Name="PaymentRequestComplete" Kind="Class" />
      <Type Name="PaymentRequestCompleteResult" Kind="Class" />
      <Type Name="PaymentRequestUpdate" Kind="Class" />
      <Type Name="PaymentRequestUpdateResult" Kind="Class" />
      <Type Name="PaymentResponse" Kind="Class" />
      <Type Name="PaymentShippingOption" Kind="Class" />
      <Type Name="PaymentShippingTypes" Kind="Class" />
      <Type Name="Place" Kind="Class" />
      <Type Name="ReceiptCard" Kind="Class" />
      <Type Name="ReceiptItem" Kind="Class" />
      <Type Name="ResourceResponse" Kind="Class" />
      <Type Name="RoleTypes" Kind="Class" />
      <Type Name="SemanticAction" Kind="Class" />
      <Type Name="SigninCard" Kind="Class" />
      <Type Name="SimpleCredentialProvider" Kind="Class" />
      <Type Name="StateClient" Kind="Class" />
      <Type Name="StateClientExtensions" Kind="Class" />
      <Type Name="StaticCredentialProvider" Kind="Class" />
      <Type Name="SuggestedActions" Kind="Class" />
      <Type Name="TextFormatTypes" Kind="Class" />
      <Type Name="TextHighlight" Kind="Class" />
      <Type Name="Thing" Kind="Class" />
      <Type Name="ThumbnailCard" Kind="Class" />
      <Type Name="ThumbnailUrl" Kind="Class" />
      <Type Name="TokenOperations" Kind="Class" />
      <Type Name="TokenRequest" Kind="Class" />
      <Type Name="TokenResponse" Kind="Class" />
      <Type Name="Transcript" Kind="Class" />
      <Type Name="TrustServiceUrlAttribute" Kind="Class" />
      <Type Name="UserToken" Kind="Class" />
      <Type Name="UserTokenExtensions" Kind="Class" />
      <Type Name="VideoCard" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Connector.Authentication">
      <Type Name="AdalAuthenticator" Kind="Class" />
      <Type Name="AuthenticationConstants" Kind="Class" />
      <Type Name="ChannelValidation" Kind="Class" />
      <Type Name="EmulatorValidation" Kind="Class" />
      <Type Name="EndorsementsRetriever" Kind="Class" />
      <Type Name="EndorsementsValidator" Kind="Class" />
      <Type Name="EnterpriseChannelValidation" Kind="Class" />
      <Type Name="GovernmentAuthenticationConstants" Kind="Class" />
      <Type Name="GovernmentChannelValidation" Kind="Class" />
      <Type Name="IChannelProvider" Kind="Interface" />
      <Type Name="ICredentialProvider" Kind="Interface" />
      <Type Name="JwtTokenExtractor" Kind="Class" />
      <Type Name="JwtTokenValidation" Kind="Class" />
      <Type Name="MicrosoftAppCredentials" Kind="Class" />
      <Type Name="MicrosoftGovernmentAppCredentials" Kind="Class" />
      <Type Name="OAuthConfiguration" Kind="Class" />
      <Type Name="Retry" Kind="Class" />
      <Type Name="RetryParams" Kind="Class" />
      <Type Name="SimpleChannelProvider" Kind="Class" />
      <Type Name="SimpleCredentialProvider" Kind="Class" />
      <Type Name="ThrottleException" Kind="Class" />
      <Type Name="TimeSpanExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Connector.Shared.Authentication">
      <Type Name="AdalAuthenticator" Kind="Class" />
      <Type Name="Retry" Kind="Class" />
      <Type Name="RetryParams" Kind="Class" />
      <Type Name="ThrottleException" Kind="Class" />
      <Type Name="TimeSpanExtensions" Kind="Class" />
    </Namespace>
    <Namespace Name="Microsoft.Bot.Schema">
      <Type Name="AadResourceUrls" Kind="Class" />
      <Type Name="ActionTypes" Kind="Class" />
      <Type Name="Activity" Kind="Class" />
      <Type Name="ActivityExtensions" Kind="Class" />
      <Type Name="ActivityImportance" Kind="Class" />
      <Type Name="ActivityTypes" Kind="Class" />
      <Type Name="ActivityTypesEx" Kind="Class" />
      <Type Name="AnimationCard" Kind="Class" />
      <Type Name="Attachment" Kind="Class" />
      <Type Name="AttachmentData" Kind="Class" />
      <Type Name="AttachmentInfo" Kind="Class" />
      <Type Name="AttachmentLayoutTypes" Kind="Class" />
      <Type Name="AttachmentView" Kind="Class" />
      <Type Name="AudioCard" Kind="Class" />
      <Type Name="BasicCard" Kind="Class" />
      <Type Name="CardAction" Kind="Class" />
      <Type Name="CardImage" Kind="Class" />
      <Type Name="ChannelAccount" Kind="Class" />
      <Type Name="ContactRelationUpdateActionTypes" Kind="Class" />
      <Type Name="ConversationAccount" Kind="Class" />
      <Type Name="ConversationMembers" Kind="Class" />
      <Type Name="ConversationParameters" Kind="Class" />
      <Type Name="ConversationReference" Kind="Class" />
      <Type Name="ConversationResourceResponse" Kind="Class" />
      <Type Name="ConversationsResult" Kind="Class" />
      <Type Name="DeliveryModes" Kind="Class" />
      <Type Name="EndOfConversationCodes" Kind="Class" />
      <Type Name="Entity" Kind="Class" />
      <Type Name="Error" Kind="Class" />
      <Type Name="ErrorCodes" Kind="Class" />
      <Type Name="ErrorResponse" Kind="Class" />
      <Type Name="ErrorResponseException" Kind="Class" />
      <Type Name="Extensions" Kind="Class" />
      <Type Name="Fact" Kind="Class" />
      <Type Name="GeoCoordinates" Kind="Class" />
      <Type Name="HeroCard" Kind="Class" />
      <Type Name="IActivity" Kind="Interface" />
      <Type Name="IContactRelationUpdateActivity" Kind="Interface" />
      <Type Name="IConversationUpdateActivity" Kind="Interface" />
      <Type Name="IEndOfConversationActivity" Kind="Interface" />
      <Type Name="IEventActivity" Kind="Interface" />
      <Type Name="IHandoffActivity" Kind="Interface" />
      <Type Name="IInstallationUpdateActivity" Kind="Interface" />
      <Type Name="IInvokeActivity" Kind="Interface" />
      <Type Name="IMessageActivity" Kind="Interface" />
      <Type Name="IMessageDeleteActivity" Kind="Interface" />
      <Type Name="IMessageReactionActivity" Kind="Interface" />
      <Type Name="IMessageUpdateActivity" Kind="Interface" />
      <Type Name="InnerHttpError" Kind="Class" />
      <Type Name="InputHints" Kind="Class" />
      <Type Name="InstallationUpdateActionTypes" Kind="Class" />
      <Type Name="ISuggestionActivity" Kind="Interface" />
      <Type Name="ITraceActivity" Kind="Interface" />
      <Type Name="ITypingActivity" Kind="Interface" />
      <Type Name="MediaCard" Kind="Class" />
      <Type Name="MediaEventValue" Kind="Class" />
      <Type Name="MediaUrl" Kind="Class" />
      <Type Name="Mention" Kind="Class" />
      <Type Name="MessageReaction" Kind="Class" />
      <Type Name="MessageReactionTypes" Kind="Class" />
      <Type Name="MicrosoftPayMethodData" Kind="Class" />
      <Type Name="OAuthCard" Kind="Class" />
      <Type Name="PagedMembersResult" Kind="Class" />
      <Type Name="PaymentAddress" Kind="Class" />
      <Type Name="PaymentCurrencyAmount" Kind="Class" />
      <Type Name="PaymentDetails" Kind="Class" />
      <Type Name="PaymentDetailsModifier" Kind="Class" />
      <Type Name="PaymentItem" Kind="Class" />
      <Type Name="PaymentMethodData" Kind="Class" />
      <Type Name="PaymentOperations" Kind="Class" />
      <Type Name="PaymentOptions" Kind="Class" />
      <Type Name="PaymentRequest" Kind="Class" />
      <Type Name="PaymentRequestComplete" Kind="Class" />
      <Type Name="PaymentRequestCompleteResult" Kind="Class" />
      <Type Name="PaymentRequestUpdate" Kind="Class" />
      <Type Name="PaymentRequestUpdateResult" Kind="Class" />
      <Type Name="PaymentResponse" Kind="Class" />
      <Type Name="PaymentShippingOption" Kind="Class" />
      <Type Name="PaymentShippingTypes" Kind="Class" />
      <Type Name="Place" Kind="Class" />
      <Type Name="ReceiptCard" Kind="Class" />
      <Type Name="ReceiptItem" Kind="Class" />
      <Type Name="ResourceResponse" Kind="Class" />
      <Type Name="RoleTypes" Kind="Class" />
      <Type Name="SemanticAction" Kind="Class" />
      <Type Name="SigninCard" Kind="Class" />
      <Type Name="SuggestedActions" Kind="Class" />
      <Type Name="TextFormatTypes" Kind="Class" />
      <Type Name="TextHighlight" Kind="Class" />
      <Type Name="Thing" Kind="Class" />
      <Type Name="ThumbnailCard" Kind="Class" />
      <Type Name="ThumbnailUrl" Kind="Class" />
      <Type Name="TokenExchangeState" Kind="Class" />
      <Type Name="TokenRequest" Kind="Class" />
      <Type Name="TokenResponse" Kind="Class" />
      <Type Name="TokenStatus" Kind="Class" />
      <Type Name="Transcript" Kind="Class" />
      <Type Name="VideoCard" Kind="Class" />
    </Namespace>
  </Types>
  <Title>Untitled</Title>
  <ExtensionMethods>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Autofac.ContainerBuilder" />
      </Targets>
      <Member MemberName="RegisterAdapterChain&lt;TLimit&gt;">
        <MemberSignature Language="C#" Value="public static Autofac.Builder.IRegistrationBuilder&lt;TLimit,Autofac.Builder.SimpleActivatorData,Autofac.Builder.SingleRegistrationStyle&gt; RegisterAdapterChain&lt;TLimit&gt; (this Autofac.ContainerBuilder builder, params Type[] types);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Autofac.Builder.IRegistrationBuilder`3&lt;!!TLimit, class Autofac.Builder.SimpleActivatorData, class Autofac.Builder.SingleRegistrationStyle&gt; RegisterAdapterChain&lt;TLimit&gt;(class Autofac.ContainerBuilder builder, class System.Type[] types) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Autofac.Base.Extensions.RegisterAdapterChain``1(Autofac.ContainerBuilder,System.Type[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RegisterAdapterChain(Of TLimit) (builder As ContainerBuilder, ParamArray types As Type()) As IRegistrationBuilder(Of TLimit, SimpleActivatorData, SingleRegistrationStyle)" />
        <MemberSignature Language="F#" Value="static member RegisterAdapterChain : Autofac.ContainerBuilder * Type[] -&gt; Autofac.Builder.IRegistrationBuilder&lt;'Limit, Autofac.Builder.SimpleActivatorData, Autofac.Builder.SingleRegistrationStyle&gt;" Usage="Microsoft.Bot.Builder.Autofac.Base.Extensions.RegisterAdapterChain (builder, types)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Autofac.Builder.IRegistrationBuilder&lt;TLimit,Autofac.Builder.SimpleActivatorData,Autofac.Builder.SingleRegistrationStyle&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TLimit" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="builder" Type="Autofac.ContainerBuilder" RefType="this" />
          <Parameter Name="types" Type="System.Type[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="TLimit">The service type provided by the component.</typeparam>
          <param name="builder">Container builder.</param>
          <param name="types">The services type keys that can be used to retrieve the components in the chain.</param>
          <summary>
            Register an adapter chain of components, exposing a shared service interface.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Autofac.Base.Extensions" Member="M:Microsoft.Bot.Builder.Autofac.Base.Extensions.RegisterAdapterChain``1(Autofac.ContainerBuilder,System.Type[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Autofac.ContainerBuilder" />
      </Targets>
      <Member MemberName="RegisterKeyedType&lt;TImplementer,TLimit&gt;">
        <MemberSignature Language="C#" Value="public static Autofac.Builder.IRegistrationBuilder&lt;TImplementer,Autofac.Builder.ConcreteReflectionActivatorData,Autofac.Builder.SingleRegistrationStyle&gt; RegisterKeyedType&lt;TImplementer,TLimit&gt; (this Autofac.ContainerBuilder builder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Autofac.Builder.IRegistrationBuilder`3&lt;!!TImplementer, class Autofac.Builder.ConcreteReflectionActivatorData, class Autofac.Builder.SingleRegistrationStyle&gt; RegisterKeyedType&lt;TImplementer, TLimit&gt;(class Autofac.ContainerBuilder builder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Autofac.Base.Extensions.RegisterKeyedType``2(Autofac.ContainerBuilder)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RegisterKeyedType(Of TImplementer, TLimit) (builder As ContainerBuilder) As IRegistrationBuilder(Of TImplementer, ConcreteReflectionActivatorData, SingleRegistrationStyle)" />
        <MemberSignature Language="F#" Value="static member RegisterKeyedType : Autofac.ContainerBuilder -&gt; Autofac.Builder.IRegistrationBuilder&lt;'Implementer, Autofac.Builder.ConcreteReflectionActivatorData, Autofac.Builder.SingleRegistrationStyle&gt;" Usage="Microsoft.Bot.Builder.Autofac.Base.Extensions.RegisterKeyedType builder" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Autofac.Builder.IRegistrationBuilder&lt;TImplementer,Autofac.Builder.ConcreteReflectionActivatorData,Autofac.Builder.SingleRegistrationStyle&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TImplementer" />
          <TypeParameter Name="TLimit" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="builder" Type="Autofac.ContainerBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TImplementer">The type of the component implementation.</typeparam>
          <typeparam name="TLimit">The service type provided by the component.</typeparam>
          <param name="builder">Container builder.</param>
          <summary>
            Register a component to be created through reflection, and
            provide a key that can be used to retrieve the component.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Autofac.Base.Extensions" Member="M:Microsoft.Bot.Builder.Autofac.Base.Extensions.RegisterKeyedType``2(Autofac.ContainerBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.ConversationReference" />
      </Targets>
      <Member MemberName="GZipSerialize">
        <MemberSignature Language="C#" Value="public static string GZipSerialize (this Microsoft.Bot.Connector.ConversationReference conversationReference);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GZipSerialize(class Microsoft.Bot.Connector.ConversationReference conversationReference) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.ConnectorEx.Extensions.GZipSerialize(Microsoft.Bot.Connector.ConversationReference)" />
        <MemberSignature Language="F#" Value="static member GZipSerialize : Microsoft.Bot.Connector.ConversationReference -&gt; string" Usage="Microsoft.Bot.Builder.ConnectorEx.Extensions.GZipSerialize conversationReference" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="conversationReference" Type="Microsoft.Bot.Connector.ConversationReference" RefType="this" />
        </Parameters>
        <Docs>
          <param name="conversationReference"> The resumption cookie.</param>
          <summary>
            Binary serializes <see cref="T:Microsoft.Bot.Connector.ConversationReference" /> using <see cref="T:System.IO.Compression.GZipStream" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.ConnectorEx.Extensions" Member="M:Microsoft.Bot.Builder.ConnectorEx.Extensions.GZipSerialize(Microsoft.Bot.Connector.ConversationReference)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IAddress" />
      </Targets>
      <Member MemberName="ToConversationReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.ConversationReference ToConversationReference (this Microsoft.Bot.Builder.Dialogs.IAddress address);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.ConversationReference ToConversationReference(class Microsoft.Bot.Builder.Dialogs.IAddress address) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.ConnectorEx.Extensions.ToConversationReference(Microsoft.Bot.Builder.Dialogs.IAddress)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToConversationReference (address As IAddress) As ConversationReference" />
        <MemberSignature Language="F#" Value="static member ToConversationReference : Microsoft.Bot.Builder.Dialogs.IAddress -&gt; Microsoft.Bot.Connector.ConversationReference" Usage="Microsoft.Bot.Builder.ConnectorEx.Extensions.ToConversationReference address" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.ConversationReference</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="address" Type="Microsoft.Bot.Builder.Dialogs.IAddress" RefType="this" />
        </Parameters>
        <Docs>
          <param name="address"> The address.</param>
          <summary>
            Creates a <see cref="T:Microsoft.Bot.Connector.ConversationReference" /> from <see cref="T:Microsoft.Bot.Builder.Dialogs.IAddress" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.ConnectorEx.Extensions" Member="M:Microsoft.Bot.Builder.ConnectorEx.Extensions.ToConversationReference(Microsoft.Bot.Builder.Dialogs.IAddress)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.ResumptionCookie" />
      </Targets>
      <Member MemberName="ToConversationReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.ConversationReference ToConversationReference (this Microsoft.Bot.Builder.Dialogs.ResumptionCookie resumptionCookie);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.ConversationReference ToConversationReference(class Microsoft.Bot.Builder.Dialogs.ResumptionCookie resumptionCookie) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.ConnectorEx.Extensions.ToConversationReference(Microsoft.Bot.Builder.Dialogs.ResumptionCookie)" />
        <MemberSignature Language="F#" Value="static member ToConversationReference : Microsoft.Bot.Builder.Dialogs.ResumptionCookie -&gt; Microsoft.Bot.Connector.ConversationReference" Usage="Microsoft.Bot.Builder.ConnectorEx.Extensions.ToConversationReference resumptionCookie" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.ConversationReference</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="resumptionCookie" Type="Microsoft.Bot.Builder.Dialogs.ResumptionCookie" RefType="this" />
        </Parameters>
        <Docs>
          <param name="resumptionCookie"> The resumption cookie.</param>
          <summary>
            Creates a <see cref="T:Microsoft.Bot.Connector.ConversationReference" /> from <see cref="T:Microsoft.Bot.Builder.Dialogs.ResumptionCookie" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.ConnectorEx.Extensions" Member="M:Microsoft.Bot.Builder.ConnectorEx.Extensions.ToConversationReference(Microsoft.Bot.Builder.Dialogs.ResumptionCookie)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IActivity" />
      </Targets>
      <Member MemberName="ToConversationReference">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.ConversationReference ToConversationReference (this Microsoft.Bot.Connector.IActivity activity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.ConversationReference ToConversationReference(class Microsoft.Bot.Connector.IActivity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.ConnectorEx.Extensions.ToConversationReference(Microsoft.Bot.Connector.IActivity)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToConversationReference (activity As IActivity) As ConversationReference" />
        <MemberSignature Language="F#" Value="static member ToConversationReference : Microsoft.Bot.Connector.IActivity -&gt; Microsoft.Bot.Connector.ConversationReference" Usage="Microsoft.Bot.Builder.ConnectorEx.Extensions.ToConversationReference activity" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.ConversationReference</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.IActivity" RefType="this" />
        </Parameters>
        <Docs>
          <param name="activity"> The <see cref="T:Microsoft.Bot.Connector.IActivity" />  posted to bot.</param>
          <summary>
            Creates a <see cref="T:Microsoft.Bot.Connector.ConversationReference" /> from <see cref="T:Microsoft.Bot.Connector.IActivity" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.ConnectorEx.Extensions" Member="M:Microsoft.Bot.Builder.ConnectorEx.Extensions.ToConversationReference(Microsoft.Bot.Connector.IActivity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.ConnectorEx.KeyboardCard" />
      </Targets>
      <Member MemberName="ToAttachment">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.Attachment ToAttachment (this Microsoft.Bot.Builder.ConnectorEx.KeyboardCard keyboard);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.Attachment ToAttachment(class Microsoft.Bot.Builder.ConnectorEx.KeyboardCard keyboard) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.ConnectorEx.KeyboardCardEx.ToAttachment(Microsoft.Bot.Builder.ConnectorEx.KeyboardCard)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToAttachment (keyboard As KeyboardCard) As Attachment" />
        <MemberSignature Language="F#" Value="static member ToAttachment : Microsoft.Bot.Builder.ConnectorEx.KeyboardCard -&gt; Microsoft.Bot.Connector.Attachment" Usage="Microsoft.Bot.Builder.ConnectorEx.KeyboardCardEx.ToAttachment keyboard" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.Attachment</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="keyboard" Type="Microsoft.Bot.Builder.ConnectorEx.KeyboardCard" RefType="this" />
        </Parameters>
        <Docs>
          <param name="keyboard">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.ConnectorEx.KeyboardCardEx" Member="M:Microsoft.Bot.Builder.ConnectorEx.KeyboardCardEx.ToAttachment(Microsoft.Bot.Builder.ConnectorEx.KeyboardCard)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.ConnectorEx.KeyboardCard" />
      </Targets>
      <Member MemberName="ToFacebookMessage">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.ConnectorEx.FacebookMessage ToFacebookMessage (this Microsoft.Bot.Builder.ConnectorEx.KeyboardCard keyboard);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.ConnectorEx.FacebookMessage ToFacebookMessage(class Microsoft.Bot.Builder.ConnectorEx.KeyboardCard keyboard) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.ConnectorEx.KeyboardCardEx.ToFacebookMessage(Microsoft.Bot.Builder.ConnectorEx.KeyboardCard)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToFacebookMessage (keyboard As KeyboardCard) As FacebookMessage" />
        <MemberSignature Language="F#" Value="static member ToFacebookMessage : Microsoft.Bot.Builder.ConnectorEx.KeyboardCard -&gt; Microsoft.Bot.Builder.ConnectorEx.FacebookMessage" Usage="Microsoft.Bot.Builder.ConnectorEx.KeyboardCardEx.ToFacebookMessage keyboard" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.ConnectorEx.FacebookMessage</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="keyboard" Type="Microsoft.Bot.Builder.ConnectorEx.KeyboardCard" RefType="this" />
        </Parameters>
        <Docs>
          <param name="keyboard"> The keyboard card.</param>
          <summary>
            Maps a <see cref="T:Microsoft.Bot.Builder.ConnectorEx.KeyboardCard" /> to a <see cref="T:Microsoft.Bot.Builder.ConnectorEx.FacebookMessage" /></summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.ConnectorEx.KeyboardCardEx" Member="M:Microsoft.Bot.Builder.ConnectorEx.KeyboardCardEx.ToFacebookMessage(Microsoft.Bot.Builder.ConnectorEx.KeyboardCard)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.ConnectorEx.KeyboardCard" />
      </Targets>
      <Member MemberName="ToHeroCard">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.HeroCard ToHeroCard (this Microsoft.Bot.Builder.ConnectorEx.KeyboardCard keyboard);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.HeroCard ToHeroCard(class Microsoft.Bot.Builder.ConnectorEx.KeyboardCard keyboard) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.ConnectorEx.KeyboardCardEx.ToHeroCard(Microsoft.Bot.Builder.ConnectorEx.KeyboardCard)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToHeroCard (keyboard As KeyboardCard) As HeroCard" />
        <MemberSignature Language="F#" Value="static member ToHeroCard : Microsoft.Bot.Builder.ConnectorEx.KeyboardCard -&gt; Microsoft.Bot.Connector.HeroCard" Usage="Microsoft.Bot.Builder.ConnectorEx.KeyboardCardEx.ToHeroCard keyboard" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.HeroCard</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="keyboard" Type="Microsoft.Bot.Builder.ConnectorEx.KeyboardCard" RefType="this" />
        </Parameters>
        <Docs>
          <param name="keyboard"> The keyboard card.</param>
          <summary>
            Maps a <see cref="T:Microsoft.Bot.Builder.ConnectorEx.KeyboardCard" /> to a <see cref="T:Microsoft.Bot.Connector.HeroCard" /></summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.ConnectorEx.KeyboardCardEx" Member="M:Microsoft.Bot.Builder.ConnectorEx.KeyboardCardEx.ToHeroCard(Microsoft.Bot.Builder.ConnectorEx.KeyboardCard)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />
      </Targets>
      <Member MemberName="Catch&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; Catch&lt;T&gt; (this Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; antecedent, Func&lt;Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;,Exception,Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;&gt; block);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; Catch&lt;T&gt;(class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; antecedent, class System.Func`3&lt;class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt;, class System.Exception, class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt;&gt; block) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Chain.Catch``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0},System.Func{Microsoft.Bot.Builder.Dialogs.IDialog{``0},System.Exception,Microsoft.Bot.Builder.Dialogs.IDialog{``0}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Catch(Of T) (antecedent As IDialog(Of T), block As Func(Of IDialog(Of T), Exception, IDialog(Of T))) As IDialog(Of T)" />
        <MemberSignature Language="F#" Value="static member Catch : Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt; * Func&lt;Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt;, Exception, Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt;&gt; -&gt; Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Chain.Catch (antecedent, block)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="antecedent" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;" RefType="this" />
          <Parameter Name="block" Type="System.Func&lt;Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;,System.Exception,Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type returned by the antecedent dialog.</typeparam>
          <param name="antecedent">The antecedent dialog <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />.</param>
          <param name="block">The lambda expression representing the catch block handler.</param>
          <summary>
            When the antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" /> has completed, catch and handle any exceptions.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Chain" Member="M:Microsoft.Bot.Builder.Dialogs.Chain.Catch``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0},System.Func{Microsoft.Bot.Builder.Dialogs.IDialog{``0},System.Exception,Microsoft.Bot.Builder.Dialogs.IDialog{``0}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />
      </Targets>
      <Member MemberName="Catch&lt;T,E&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; Catch&lt;T,E&gt; (this Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; antecedent, Func&lt;Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;,E,Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;&gt; block) where E : Exception;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; Catch&lt;T, (class System.Exception) E&gt;(class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; antecedent, class System.Func`3&lt;class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt;, !!E, class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt;&gt; block) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Chain.Catch``2(Microsoft.Bot.Builder.Dialogs.IDialog{``0},System.Func{Microsoft.Bot.Builder.Dialogs.IDialog{``0},``1,Microsoft.Bot.Builder.Dialogs.IDialog{``0}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Catch(Of T, E) (antecedent As IDialog(Of T), block As Func(Of IDialog(Of T), E, IDialog(Of T))) As IDialog(Of T)" />
        <MemberSignature Language="F#" Value="static member Catch : Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt; * Func&lt;Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt;, 'E, Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt; (requires 'E :&gt; Exception)&gt; -&gt; Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt; (requires 'E :&gt; Exception)" Usage="Microsoft.Bot.Builder.Dialogs.Chain.Catch (antecedent, block)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
          <TypeParameter Name="E">
            <Constraints>
              <BaseTypeName>System.Exception</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="antecedent" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;" RefType="this" />
          <Parameter Name="block" Type="System.Func&lt;Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;,E,Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type returned by the antecedent dialog.</typeparam>
          <typeparam name="E">The type of exception to catch and handle.</typeparam>
          <param name="antecedent">The antecedent dialog <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />.</param>
          <param name="block">The lambda expression representing the catch block handler.</param>
          <summary>
            When the antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" /> has completed, catch and handle any exceptions of type <typeparamref name="E" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Chain" Member="M:Microsoft.Bot.Builder.Dialogs.Chain.Catch``2(Microsoft.Bot.Builder.Dialogs.IDialog{``0},System.Func{Microsoft.Bot.Builder.Dialogs.IDialog{``0},``1,Microsoft.Bot.Builder.Dialogs.IDialog{``0}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />
      </Targets>
      <Member MemberName="ContinueWith&lt;T,R&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Dialogs.IDialog&lt;R&gt; ContinueWith&lt;T,R&gt; (this Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; antecedent, Microsoft.Bot.Builder.Dialogs.Chain.Continuation&lt;T,R&gt; continuation);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!R&gt; ContinueWith&lt;T, R&gt;(class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; antecedent, class Microsoft.Bot.Builder.Dialogs.Chain/Continuation`2&lt;!!T, !!R&gt; continuation) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Chain.ContinueWith``2(Microsoft.Bot.Builder.Dialogs.IDialog{``0},Microsoft.Bot.Builder.Dialogs.Chain.Continuation{``0,``1})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ContinueWith(Of T, R) (antecedent As IDialog(Of T), continuation As Chain.Continuation(Of T, R)) As IDialog(Of R)" />
        <MemberSignature Language="F#" Value="static member ContinueWith : Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt; * Microsoft.Bot.Builder.Dialogs.Chain.Continuation&lt;'T, 'R&gt; -&gt; Microsoft.Bot.Builder.Dialogs.IDialog&lt;'R&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Chain.ContinueWith (antecedent, continuation)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Dialogs.IDialog&lt;R&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
          <TypeParameter Name="R" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="antecedent" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;" RefType="this" />
          <Parameter Name="continuation" Type="Microsoft.Bot.Builder.Dialogs.Chain+Continuation&lt;T,R&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the antecedent dialog.</typeparam>
          <typeparam name="R">The type of the next dialog.</typeparam>
          <param name="antecedent">The antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />.</param>
          <param name="continuation">The continuation to produce the next <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />.</param>
          <summary>
            When the antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" /> has completed, execute the continuation to produce the next <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Chain" Member="M:Microsoft.Bot.Builder.Dialogs.Chain.ContinueWith``2(Microsoft.Bot.Builder.Dialogs.IDialog{``0},Microsoft.Bot.Builder.Dialogs.Chain.Continuation{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />
      </Targets>
      <Member MemberName="DefaultIfException&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; DefaultIfException&lt;T&gt; (this Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; antecedent);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; DefaultIfException&lt;T&gt;(class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; antecedent) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Chain.DefaultIfException``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DefaultIfException(Of T) (antecedent As IDialog(Of T)) As IDialog(Of T)" />
        <MemberSignature Language="F#" Value="static member DefaultIfException : Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt; -&gt; Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Chain.DefaultIfException antecedent" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="antecedent" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type returned by the antecedent dialog.</typeparam>
          <param name="antecedent"> The antecedent dialog <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />.</param>
          <summary>
            When the antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" /> has completed, stop the propagation of Exception.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Chain" Member="M:Microsoft.Bot.Builder.Dialogs.Chain.DefaultIfException``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />
      </Targets>
      <Member MemberName="DefaultIfException&lt;T,E&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; DefaultIfException&lt;T,E&gt; (this Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; antecedent) where E : Exception;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; DefaultIfException&lt;T, (class System.Exception) E&gt;(class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; antecedent) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Chain.DefaultIfException``2(Microsoft.Bot.Builder.Dialogs.IDialog{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DefaultIfException(Of T, E) (antecedent As IDialog(Of T)) As IDialog(Of T)" />
        <MemberSignature Language="F#" Value="static member DefaultIfException : Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt; -&gt; Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt; (requires 'E :&gt; Exception)" Usage="Microsoft.Bot.Builder.Dialogs.Chain.DefaultIfException antecedent" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
          <TypeParameter Name="E">
            <Constraints>
              <BaseTypeName>System.Exception</BaseTypeName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="antecedent" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type returned by the antecedent dialog.</typeparam>
          <typeparam name="E">The type of exception to swallow.</typeparam>
          <param name="antecedent"> The antecedent dialog <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />.</param>
          <summary>
            When the antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" /> has completed, stop the propagation of an exception of <typeparamref name="E" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Chain" Member="M:Microsoft.Bot.Builder.Dialogs.Chain.DefaultIfException``2(Microsoft.Bot.Builder.Dialogs.IDialog{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />
      </Targets>
      <Member MemberName="Do&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; Do&lt;T&gt; (this Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; antecedent, Func&lt;Microsoft.Bot.Builder.Dialogs.IBotContext,Microsoft.Bot.Builder.Dialogs.IAwaitable&lt;T&gt;,System.Threading.Tasks.Task&gt; callback);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; Do&lt;T&gt;(class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; antecedent, class System.Func`3&lt;class Microsoft.Bot.Builder.Dialogs.IBotContext, class Microsoft.Bot.Builder.Dialogs.IAwaitable`1&lt;!!T&gt;, class System.Threading.Tasks.Task&gt; callback) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Chain.Do``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0},System.Func{Microsoft.Bot.Builder.Dialogs.IBotContext,Microsoft.Bot.Builder.Dialogs.IAwaitable{``0},System.Threading.Tasks.Task})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Do(Of T) (antecedent As IDialog(Of T), callback As Func(Of IBotContext, IAwaitable(Of T), Task)) As IDialog(Of T)" />
        <MemberSignature Language="F#" Value="static member Do : Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt; * Func&lt;Microsoft.Bot.Builder.Dialogs.IBotContext, Microsoft.Bot.Builder.Dialogs.IAwaitable&lt;'T&gt;, System.Threading.Tasks.Task&gt; -&gt; Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Chain.Do (antecedent, callback)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="antecedent" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;" RefType="this" />
          <Parameter Name="callback" Type="System.Func&lt;Microsoft.Bot.Builder.Dialogs.IBotContext,Microsoft.Bot.Builder.Dialogs.IAwaitable&lt;T&gt;,System.Threading.Tasks.Task&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the dialog.</typeparam>
          <param name="antecedent">The antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />.</param>
          <param name="callback">The callback method.</param>
          <summary>
            Execute a side-effect after a <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" /> completes.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Chain" Member="M:Microsoft.Bot.Builder.Dialogs.Chain.Do``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0},System.Func{Microsoft.Bot.Builder.Dialogs.IBotContext,Microsoft.Bot.Builder.Dialogs.IAwaitable{``0},System.Threading.Tasks.Task})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />
      </Targets>
      <Member MemberName="Fold&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; Fold&lt;T&gt; (this Microsoft.Bot.Builder.Dialogs.IDialog&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;&gt;&gt; antecedent, Func&lt;T,T,T&gt; folder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; Fold&lt;T&gt;(class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt;&gt;&gt; antecedent, class System.Func`3&lt;!!T, !!T, !!T&gt; folder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Chain.Fold``1(Microsoft.Bot.Builder.Dialogs.IDialog{System.Collections.Generic.IEnumerable{Microsoft.Bot.Builder.Dialogs.IDialog{``0}}},System.Func{``0,``0,``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Fold(Of T) (antecedent As IDialog(Of IEnumerable(Of IDialog(Of T))), folder As Func(Of T, T, T)) As IDialog(Of T)" />
        <MemberSignature Language="F#" Value="static member Fold : Microsoft.Bot.Builder.Dialogs.IDialog&lt;seq&lt;Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt;&gt;&gt; * Func&lt;'T, 'T, 'T&gt; -&gt; Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Chain.Fold (antecedent, folder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="antecedent" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;&gt;&gt;" RefType="this" />
          <Parameter Name="folder" Type="System.Func&lt;T,T,T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T"> The type of the dialogs in the enumeration produced by the antecedent dialog.</typeparam>
          <param name="antecedent">The antecedent dialog that produces an enumeration of <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />.</param>
          <param name="folder">The accumulator for the dialog enumeration.</param>
          <summary>
            Fold items from an enumeration of dialogs.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Chain" Member="M:Microsoft.Bot.Builder.Dialogs.Chain.Fold``1(Microsoft.Bot.Builder.Dialogs.IDialog{System.Collections.Generic.IEnumerable{Microsoft.Bot.Builder.Dialogs.IDialog{``0}}},System.Func{``0,``0,``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />
      </Targets>
      <Member MemberName="Loop&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; Loop&lt;T&gt; (this Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; antecedent);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; Loop&lt;T&gt;(class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; antecedent) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Chain.Loop``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Loop(Of T) (antecedent As IDialog(Of T)) As IDialog(Of T)" />
        <MemberSignature Language="F#" Value="static member Loop : Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt; -&gt; Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Chain.Loop antecedent" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="antecedent" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="antecedent">The antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />.</param>
          <summary>
            Loop the <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" /> forever.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Chain" Member="M:Microsoft.Bot.Builder.Dialogs.Chain.Loop``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />
      </Targets>
      <Member MemberName="PostEvent&lt;T,E&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; PostEvent&lt;T,E&gt; (this Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; antecedent, E event);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; PostEvent&lt;T, E&gt;(class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; antecedent, !!E event) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Chain.PostEvent``2(Microsoft.Bot.Builder.Dialogs.IDialog{``0},``1)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PostEvent(Of T, E) (antecedent As IDialog(Of T), event As E) As IDialog(Of T)" />
        <MemberSignature Language="F#" Value="static member PostEvent : Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt; * 'E -&gt; Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Chain.PostEvent (antecedent, event)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
          <TypeParameter Name="E" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="antecedent" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;" RefType="this" />
          <Parameter Name="event" Type="E" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the antecedent dialog.</typeparam>
          <typeparam name="E">The type of the event.</typeparam>
          <param name="antecedent">The antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />.</param>
          <param name="event">The event.</param>
          <summary>
            When the antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" /> has completed, post the item to the event queue.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Chain" Member="M:Microsoft.Bot.Builder.Dialogs.Chain.PostEvent``2(Microsoft.Bot.Builder.Dialogs.IDialog{``0},``1)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />
      </Targets>
      <Member MemberName="PostToUser&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; PostToUser&lt;T&gt; (this Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; antecedent);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; PostToUser&lt;T&gt;(class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; antecedent) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Chain.PostToUser``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function PostToUser(Of T) (antecedent As IDialog(Of T)) As IDialog(Of T)" />
        <MemberSignature Language="F#" Value="static member PostToUser : Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt; -&gt; Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Chain.PostToUser antecedent" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="antecedent" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the dialog.</typeparam>
          <param name="antecedent">The antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />.</param>
          <summary>
            Post to the user the result of a <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Chain" Member="M:Microsoft.Bot.Builder.Dialogs.Chain.PostToUser``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />
      </Targets>
      <Member MemberName="Select&lt;T,R&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Dialogs.IDialog&lt;R&gt; Select&lt;T,R&gt; (this Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; antecedent, Func&lt;T,R&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!R&gt; Select&lt;T, R&gt;(class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; antecedent, class System.Func`2&lt;!!T, !!R&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Chain.Select``2(Microsoft.Bot.Builder.Dialogs.IDialog{``0},System.Func{``0,``1})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of T, R) (antecedent As IDialog(Of T), selector As Func(Of T, R)) As IDialog(Of R)" />
        <MemberSignature Language="F#" Value="static member Select : Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt; * Func&lt;'T, 'R&gt; -&gt; Microsoft.Bot.Builder.Dialogs.IDialog&lt;'R&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Chain.Select (antecedent, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Dialogs.IDialog&lt;R&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
          <TypeParameter Name="R" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="antecedent" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;T,R&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the antecedent dialog.</typeparam>
          <typeparam name="R">The type of the projected dialog.</typeparam>
          <param name="antecedent">The antecedent dialog <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />.</param>
          <param name="selector">The projection function from <typeparamref name="T" /> to <typeparamref name="R" />.</param>
          <summary>
            When the antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" /> has completed, project the result into a new <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Chain" Member="M:Microsoft.Bot.Builder.Dialogs.Chain.Select``2(Microsoft.Bot.Builder.Dialogs.IDialog{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />
      </Targets>
      <Member MemberName="SelectMany&lt;T,C,R&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Dialogs.IDialog&lt;R&gt; SelectMany&lt;T,C,R&gt; (this Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; antecedent, Func&lt;T,Microsoft.Bot.Builder.Dialogs.IDialog&lt;C&gt;&gt; function, Func&lt;T,C,R&gt; projection);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!R&gt; SelectMany&lt;T, C, R&gt;(class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; antecedent, class System.Func`2&lt;!!T, class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!C&gt;&gt; function, class System.Func`3&lt;!!T, !!C, !!R&gt; projection) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Chain.SelectMany``3(Microsoft.Bot.Builder.Dialogs.IDialog{``0},System.Func{``0,Microsoft.Bot.Builder.Dialogs.IDialog{``1}},System.Func{``0,``1,``2})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of T, C, R) (antecedent As IDialog(Of T), function As Func(Of T, IDialog(Of C)), projection As Func(Of T, C, R)) As IDialog(Of R)" />
        <MemberSignature Language="F#" Value="static member SelectMany : Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt; * Func&lt;'T, Microsoft.Bot.Builder.Dialogs.IDialog&lt;'C&gt;&gt; * Func&lt;'T, 'C, 'R&gt; -&gt; Microsoft.Bot.Builder.Dialogs.IDialog&lt;'R&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Chain.SelectMany (antecedent, function, projection)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Dialogs.IDialog&lt;R&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
          <TypeParameter Name="C" />
          <TypeParameter Name="R" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="antecedent" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;" RefType="this" />
          <Parameter Name="function" Type="System.Func&lt;T,Microsoft.Bot.Builder.Dialogs.IDialog&lt;C&gt;&gt;" />
          <Parameter Name="projection" Type="System.Func&lt;T,C,R&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the antecedent dialog.</typeparam>
          <typeparam name="C">The type of the intermediate dialog.</typeparam>
          <typeparam name="R">The type of the projected dialog.</typeparam>
          <param name="antecedent">The antecedent dialog <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />.</param>
          <param name="function">The factory method to create the next dialog <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />.</param>
          <param name="projection">The projection function for the combination of the two dialogs.</param>
          <summary>
            When the antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" /> has completed, execute the next <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />, and use the projection to combine the results.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Chain" Member="M:Microsoft.Bot.Builder.Dialogs.Chain.SelectMany``3(Microsoft.Bot.Builder.Dialogs.IDialog{``0},System.Func{``0,Microsoft.Bot.Builder.Dialogs.IDialog{``1}},System.Func{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />
      </Targets>
      <Member MemberName="Switch&lt;T,R&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Dialogs.IDialog&lt;R&gt; Switch&lt;T,R&gt; (this Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; antecedent, params Microsoft.Bot.Builder.Dialogs.ICase&lt;T,R&gt;[] cases);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!R&gt; Switch&lt;T, R&gt;(class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; antecedent, class Microsoft.Bot.Builder.Dialogs.ICase`2&lt;!!T, !!R&gt;[] cases) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Chain.Switch``2(Microsoft.Bot.Builder.Dialogs.IDialog{``0},Microsoft.Bot.Builder.Dialogs.ICase{``0,``1}[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Switch(Of T, R) (antecedent As IDialog(Of T), ParamArray cases As ICase(Of T, R)()) As IDialog(Of R)" />
        <MemberSignature Language="F#" Value="static member Switch : Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt; * Microsoft.Bot.Builder.Dialogs.ICase&lt;'T, 'R&gt;[] -&gt; Microsoft.Bot.Builder.Dialogs.IDialog&lt;'R&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Chain.Switch (antecedent, cases)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Dialogs.IDialog&lt;R&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
          <TypeParameter Name="R" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="antecedent" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;" RefType="this" />
          <Parameter Name="cases" Type="Microsoft.Bot.Builder.Dialogs.ICase&lt;T,R&gt;[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <typeparam name="T"> The type of the antecedent dialog.</typeparam>
          <typeparam name="R"> The type of the Dialog returned by <see cref="T:Microsoft.Bot.Builder.Dialogs.ContextualSelector`2" /></typeparam>
          <param name="antecedent"> The antecedent dialog <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />.</param>
          <param name="cases"> Cases for the switch</param>
          <summary>
            When the antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" /> has completed, go through each <see cref="T:Microsoft.Bot.Builder.Dialogs.ICase`2" /> 
            and run the <see cref="T:Microsoft.Bot.Builder.Dialogs.ContextualSelector`2" />" of the first <see cref="T:Microsoft.Bot.Builder.Dialogs.ICase`2" /> that 
            the returned value by the antecedent dialog satisfies.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Chain" Member="M:Microsoft.Bot.Builder.Dialogs.Chain.Switch``2(Microsoft.Bot.Builder.Dialogs.IDialog{``0},Microsoft.Bot.Builder.Dialogs.ICase{``0,``1}[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />
      </Targets>
      <Member MemberName="Then&lt;T,R&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Dialogs.IDialog&lt;R&gt; Then&lt;T,R&gt; (this Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; Antecedent, Func&lt;Microsoft.Bot.Builder.Dialogs.IBotContext,Microsoft.Bot.Builder.Dialogs.IAwaitable&lt;T&gt;,System.Threading.Tasks.Task&lt;R&gt;&gt; Action);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!R&gt; Then&lt;T, R&gt;(class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; Antecedent, class System.Func`3&lt;class Microsoft.Bot.Builder.Dialogs.IBotContext, class Microsoft.Bot.Builder.Dialogs.IAwaitable`1&lt;!!T&gt;, class System.Threading.Tasks.Task`1&lt;!!R&gt;&gt; Action) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Chain.Then``2(Microsoft.Bot.Builder.Dialogs.IDialog{``0},System.Func{Microsoft.Bot.Builder.Dialogs.IBotContext,Microsoft.Bot.Builder.Dialogs.IAwaitable{``0},System.Threading.Tasks.Task{``1}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Then(Of T, R) (Antecedent As IDialog(Of T), Action As Func(Of IBotContext, IAwaitable(Of T), Task(Of R))) As IDialog(Of R)" />
        <MemberSignature Language="F#" Value="static member Then : Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt; * Func&lt;Microsoft.Bot.Builder.Dialogs.IBotContext, Microsoft.Bot.Builder.Dialogs.IAwaitable&lt;'T&gt;, System.Threading.Tasks.Task&lt;'R&gt;&gt; -&gt; Microsoft.Bot.Builder.Dialogs.IDialog&lt;'R&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Chain.Then (Antecedent, Action)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Dialogs.IDialog&lt;R&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
          <TypeParameter Name="R" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="Antecedent" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;" RefType="this" />
          <Parameter Name="Action" Type="System.Func&lt;Microsoft.Bot.Builder.Dialogs.IBotContext,Microsoft.Bot.Builder.Dialogs.IAwaitable&lt;T&gt;,System.Threading.Tasks.Task&lt;R&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the dialog.</typeparam>
          <typeparam name="R">They type returned by action.</typeparam>
          <param name="Antecedent">The antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />.</param>
          <param name="Action">The action that will be called after the antecedent dialog completes.</param>
          <summary>
            Execute an action after the <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" /> completes. 
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Chain" Member="M:Microsoft.Bot.Builder.Dialogs.Chain.Then``2(Microsoft.Bot.Builder.Dialogs.IDialog{``0},System.Func{Microsoft.Bot.Builder.Dialogs.IBotContext,Microsoft.Bot.Builder.Dialogs.IAwaitable{``0},System.Threading.Tasks.Task{``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />
      </Targets>
      <Member MemberName="Unwrap&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; Unwrap&lt;T&gt; (this Microsoft.Bot.Builder.Dialogs.IDialog&lt;Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;&gt; antecedent);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; Unwrap&lt;T&gt;(class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt;&gt; antecedent) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Chain.Unwrap``1(Microsoft.Bot.Builder.Dialogs.IDialog{Microsoft.Bot.Builder.Dialogs.IDialog{``0}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Unwrap(Of T) (antecedent As IDialog(Of IDialog(Of T))) As IDialog(Of T)" />
        <MemberSignature Language="F#" Value="static member Unwrap : Microsoft.Bot.Builder.Dialogs.IDialog&lt;Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt;&gt; -&gt; Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Chain.Unwrap antecedent" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="antecedent" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the antecedent dialog.</typeparam>
          <param name="antecedent">The antecedent dialog <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" /> where T is <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />.</param>
          <summary>
            When the antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" /> where T is <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" /> completes, unwrap the result into a new <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Chain" Member="M:Microsoft.Bot.Builder.Dialogs.Chain.Unwrap``1(Microsoft.Bot.Builder.Dialogs.IDialog{Microsoft.Bot.Builder.Dialogs.IDialog{``0}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />
      </Targets>
      <Member MemberName="Void&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Dialogs.IDialog&lt;object&gt; Void&lt;T&gt; (this Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; antecedent, Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack stack);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;object&gt; Void&lt;T&gt;(class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; antecedent, class Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack stack) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Chain.Void``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0},Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Void(Of T) (antecedent As IDialog(Of T), stack As IDialogStack) As IDialog(Of Object)" />
        <MemberSignature Language="F#" Value="static member Void : Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt; * Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack -&gt; Microsoft.Bot.Builder.Dialogs.IDialog&lt;obj&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Chain.Void (antecedent, stack)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Dialogs.IDialog&lt;System.Object&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="antecedent" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;" RefType="this" />
          <Parameter Name="stack" Type="Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the voided dialog.</typeparam>
          <param name="antecedent">The voided dialog.</param>
          <param name="stack">The dialog stack.</param>
          <summary>
            Call the voided <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />, ignore the result, then restart the original dialog wait.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Chain" Member="M:Microsoft.Bot.Builder.Dialogs.Chain.Void``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0},Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />
      </Targets>
      <Member MemberName="Void&lt;T,R&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Dialogs.IDialog&lt;R&gt; Void&lt;T,R&gt; (this Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; antecedent);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!R&gt; Void&lt;T, R&gt;(class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; antecedent) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Chain.Void``2(Microsoft.Bot.Builder.Dialogs.IDialog{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Void(Of T, R) (antecedent As IDialog(Of T)) As IDialog(Of R)" />
        <MemberSignature Language="F#" Value="static member Void : Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt; -&gt; Microsoft.Bot.Builder.Dialogs.IDialog&lt;'R&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Chain.Void antecedent" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Dialogs.IDialog&lt;R&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
          <TypeParameter Name="R" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="antecedent" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the voided dialog.</typeparam>
          <typeparam name="R">The type of the original dialog wait.</typeparam>
          <param name="antecedent">The voided dialog.</param>
          <summary>
            Call the voided <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />, ignore the result, then restart the original dialog wait.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Chain" Member="M:Microsoft.Bot.Builder.Dialogs.Chain.Void``2(Microsoft.Bot.Builder.Dialogs.IDialog{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />
      </Targets>
      <Member MemberName="WaitToBot&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Dialogs.IDialog&lt;Microsoft.Bot.Connector.IMessageActivity&gt; WaitToBot&lt;T&gt; (this Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; antecedent);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;class Microsoft.Bot.Connector.IMessageActivity&gt; WaitToBot&lt;T&gt;(class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; antecedent) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Chain.WaitToBot``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WaitToBot(Of T) (antecedent As IDialog(Of T)) As IDialog(Of IMessageActivity)" />
        <MemberSignature Language="F#" Value="static member WaitToBot : Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt; -&gt; Microsoft.Bot.Builder.Dialogs.IDialog&lt;Microsoft.Bot.Connector.IMessageActivity&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Chain.WaitToBot antecedent" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Dialogs.IDialog&lt;Microsoft.Bot.Connector.IMessageActivity&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="antecedent" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the dialog.</typeparam>
          <param name="antecedent">The antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />.</param>
          <summary>
            Post to the chain the message to the bot after the antecedent completes.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Chain" Member="M:Microsoft.Bot.Builder.Dialogs.Chain.WaitToBot``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />
      </Targets>
      <Member MemberName="Where&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; Where&lt;T&gt; (this Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; antecedent, Func&lt;T,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; Where&lt;T&gt;(class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; antecedent, class System.Func`2&lt;!!T, bool&gt; predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Chain.Where``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0},System.Func{``0,System.Boolean})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of T) (antecedent As IDialog(Of T), predicate As Func(Of T, Boolean)) As IDialog(Of T)" />
        <MemberSignature Language="F#" Value="static member Where : Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt; * Func&lt;'T, bool&gt; -&gt; Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Chain.Where (antecedent, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="antecedent" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;T,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the antecedent dialog.</typeparam>
          <param name="antecedent">The antecedent dialog <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />.</param>
          <param name="predicate">The predicate to decide whether to continue the chain.</param>
          <summary>
            When the antecedent <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" /> has completed, evaluate the predicate and decide whether to continue.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Chain" Member="M:Microsoft.Bot.Builder.Dialogs.Chain.Where``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0},System.Func{``0,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />
      </Targets>
      <Member MemberName="While&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; While&lt;T&gt; (this Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; initial, Func&lt;T,Microsoft.Bot.Builder.Dialogs.IDialog&lt;bool&gt;&gt; test, Func&lt;T,Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;&gt; body);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; While&lt;T&gt;(class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; initial, class System.Func`2&lt;!!T, class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;bool&gt;&gt; test, class System.Func`2&lt;!!T, class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt;&gt; body) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Chain.While``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0},System.Func{``0,Microsoft.Bot.Builder.Dialogs.IDialog{System.Boolean}},System.Func{``0,Microsoft.Bot.Builder.Dialogs.IDialog{``0}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function While(Of T) (initial As IDialog(Of T), test As Func(Of T, IDialog(Of Boolean)), body As Func(Of T, IDialog(Of T))) As IDialog(Of T)" />
        <MemberSignature Language="F#" Value="static member While : Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt; * Func&lt;'T, Microsoft.Bot.Builder.Dialogs.IDialog&lt;bool&gt;&gt; * Func&lt;'T, Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt;&gt; -&gt; Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Chain.While (initial, test, body)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="initial" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;" RefType="this" />
          <Parameter Name="test" Type="System.Func&lt;T,Microsoft.Bot.Builder.Dialogs.IDialog&lt;System.Boolean&gt;&gt;" />
          <Parameter Name="body" Type="System.Func&lt;T,Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the value.</typeparam>
          <param name="initial">The value if <paramref name="test" /> is never true.</param>
          <param name="test">The test to enter the while loop <paramref name="body" />.</param>
          <param name="body">The body of the while loop.</param>
          <summary>
            Create a <see cref="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" /> that represents a while loop.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Chain" Member="M:Microsoft.Bot.Builder.Dialogs.Chain.While``1(Microsoft.Bot.Builder.Dialogs.IDialog{``0},System.Func{``0,Microsoft.Bot.Builder.Dialogs.IDialog{System.Boolean}},System.Func{``0,Microsoft.Bot.Builder.Dialogs.IDialog{``0}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialog`1" />
      </Targets>
      <Member MemberName="WithScorable&lt;T,Item,Score&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; WithScorable&lt;T,Item,Score&gt; (this Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; antecedent, Microsoft.Bot.Builder.Scorables.IScorable&lt;Item,Score&gt; scorable);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; WithScorable&lt;T, Item, Score&gt;(class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; antecedent, class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;!!Item, !!Score&gt; scorable) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Chain.WithScorable``3(Microsoft.Bot.Builder.Dialogs.IDialog{``0},Microsoft.Bot.Builder.Scorables.IScorable{``1,``2})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WithScorable(Of T, Item, Score) (antecedent As IDialog(Of T), scorable As IScorable(Of Item, Score)) As IDialog(Of T)" />
        <MemberSignature Language="F#" Value="static member WithScorable : Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt; * Microsoft.Bot.Builder.Scorables.IScorable&lt;'Item, 'Score&gt; -&gt; Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Chain.WithScorable (antecedent, scorable)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
          <TypeParameter Name="Item" />
          <TypeParameter Name="Score" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="antecedent" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;" RefType="this" />
          <Parameter Name="scorable" Type="Microsoft.Bot.Builder.Scorables.IScorable&lt;Item,Score&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the dialog.</typeparam>
          <typeparam name="Item">The type of the item scored by the scorable.</typeparam>
          <typeparam name="Score">The type of the scope produced by the scorable.</typeparam>
          <param name="antecedent">The antecedent dialog.</param>
          <param name="scorable">The scorable.</param>
          <summary>
            Decorate a dialog with a scorable, so that a scorable can participate on the dialog stack.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Chain" Member="M:Microsoft.Bot.Builder.Dialogs.Chain.WithScorable``3(Microsoft.Bot.Builder.Dialogs.IDialog{``0},Microsoft.Bot.Builder.Scorables.IScorable{``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IChannelCapability" />
      </Targets>
      <Member MemberName="ShouldSetInputHint">
        <MemberSignature Language="C#" Value="public static bool ShouldSetInputHint (this Microsoft.Bot.Builder.Dialogs.IChannelCapability channelCapability, Microsoft.Bot.Connector.IMessageActivity activity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool ShouldSetInputHint(class Microsoft.Bot.Builder.Dialogs.IChannelCapability channelCapability, class Microsoft.Bot.Connector.IMessageActivity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.ChannelCapabilityEx.ShouldSetInputHint(Microsoft.Bot.Builder.Dialogs.IChannelCapability,Microsoft.Bot.Connector.IMessageActivity)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ShouldSetInputHint (channelCapability As IChannelCapability, activity As IMessageActivity) As Boolean" />
        <MemberSignature Language="F#" Value="static member ShouldSetInputHint : Microsoft.Bot.Builder.Dialogs.IChannelCapability * Microsoft.Bot.Connector.IMessageActivity -&gt; bool" Usage="Microsoft.Bot.Builder.Dialogs.ChannelCapabilityEx.ShouldSetInputHint (channelCapability, activity)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="channelCapability" Type="Microsoft.Bot.Builder.Dialogs.IChannelCapability" RefType="this" />
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.IMessageActivity" />
        </Parameters>
        <Docs>
          <param name="channelCapability">To be added.</param>
          <param name="activity">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.ChannelCapabilityEx" Member="M:Microsoft.Bot.Builder.Dialogs.ChannelCapabilityEx.ShouldSetInputHint(Microsoft.Bot.Builder.Dialogs.IChannelCapability,Microsoft.Bot.Connector.IMessageActivity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.Dialog" />
      </Targets>
      <Member MemberName="RunAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task RunAsync (this Microsoft.Bot.Builder.Dialogs.Dialog dialog, Microsoft.Bot.Builder.ITurnContext turnContext, Microsoft.Bot.Builder.IStatePropertyAccessor&lt;Microsoft.Bot.Builder.Dialogs.DialogState&gt; accessor, System.Threading.CancellationToken cancellationToken);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task RunAsync(class Microsoft.Bot.Builder.Dialogs.Dialog dialog, class Microsoft.Bot.Builder.ITurnContext turnContext, class Microsoft.Bot.Builder.IStatePropertyAccessor`1&lt;class Microsoft.Bot.Builder.Dialogs.DialogState&gt; accessor, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.DialogExtensions.RunAsync(Microsoft.Bot.Builder.Dialogs.Dialog,Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.IStatePropertyAccessor{Microsoft.Bot.Builder.Dialogs.DialogState},System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member RunAsync : Microsoft.Bot.Builder.Dialogs.Dialog * Microsoft.Bot.Builder.ITurnContext * Microsoft.Bot.Builder.IStatePropertyAccessor&lt;Microsoft.Bot.Builder.Dialogs.DialogState&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Bot.Builder.Dialogs.DialogExtensions.RunAsync (dialog, turnContext, accessor, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="dialog" Type="Microsoft.Bot.Builder.Dialogs.Dialog" RefType="this" />
          <Parameter Name="turnContext" Type="Microsoft.Bot.Builder.ITurnContext" />
          <Parameter Name="accessor" Type="Microsoft.Bot.Builder.IStatePropertyAccessor&lt;Microsoft.Bot.Builder.Dialogs.DialogState&gt;" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="dialog">To be added.</param>
          <param name="turnContext">To be added.</param>
          <param name="accessor">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.DialogExtensions" Member="M:Microsoft.Bot.Builder.Dialogs.DialogExtensions.RunAsync(Microsoft.Bot.Builder.Dialogs.Dialog,Microsoft.Bot.Builder.ITurnContext,Microsoft.Bot.Builder.IStatePropertyAccessor{Microsoft.Bot.Builder.Dialogs.DialogState},System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IMessageActivity" />
      </Targets>
      <Member MemberName="AddHeroCard&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void AddHeroCard&lt;T&gt; (this Microsoft.Bot.Connector.IMessageActivity message, string text, System.Collections.Generic.IEnumerable&lt;T&gt; options, System.Collections.Generic.IEnumerable&lt;string&gt; descriptions = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddHeroCard&lt;T&gt;(class Microsoft.Bot.Connector.IMessageActivity message, string text, class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; options, class System.Collections.Generic.IEnumerable`1&lt;string&gt; descriptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.AddHeroCard``1(Microsoft.Bot.Connector.IMessageActivity,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddHeroCard(Of T) (message As IMessageActivity, text As String, options As IEnumerable(Of T), Optional descriptions As IEnumerable(Of String) = null)" />
        <MemberSignature Language="F#" Value="static member AddHeroCard : Microsoft.Bot.Connector.IMessageActivity * string * seq&lt;'T&gt; * seq&lt;string&gt; -&gt; unit" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.AddHeroCard (message, text, options, descriptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="message" Type="Microsoft.Bot.Connector.IMessageActivity" RefType="this" />
          <Parameter Name="text" Type="System.String" />
          <Parameter Name="options" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
          <Parameter Name="descriptions" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T"> Type of the options.</typeparam>
          <param name="message"> The message that the buttons will be added to.</param>
          <param name="text"> The text in the <see cref="T:Microsoft.Bot.Connector.HeroCard" />.</param>
          <param name="options"> The options that cause generation of buttons.</param>
          <param name="descriptions">Descriptions for each option.</param>
          <summary>
            Generates buttons from options and add them to the message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Extensions" Member="M:Microsoft.Bot.Builder.Dialogs.Extensions.AddHeroCard``1(Microsoft.Bot.Connector.IMessageActivity,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IMessageActivity" />
      </Targets>
      <Member MemberName="AddKeyboardCard&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void AddKeyboardCard&lt;T&gt; (this Microsoft.Bot.Connector.IMessageActivity message, string text, System.Collections.Generic.IEnumerable&lt;T&gt; options, System.Collections.Generic.IEnumerable&lt;string&gt; descriptions = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddKeyboardCard&lt;T&gt;(class Microsoft.Bot.Connector.IMessageActivity message, string text, class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; options, class System.Collections.Generic.IEnumerable`1&lt;string&gt; descriptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.AddKeyboardCard``1(Microsoft.Bot.Connector.IMessageActivity,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub AddKeyboardCard(Of T) (message As IMessageActivity, text As String, options As IEnumerable(Of T), Optional descriptions As IEnumerable(Of String) = null)" />
        <MemberSignature Language="F#" Value="static member AddKeyboardCard : Microsoft.Bot.Connector.IMessageActivity * string * seq&lt;'T&gt; * seq&lt;string&gt; -&gt; unit" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.AddKeyboardCard (message, text, options, descriptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="message" Type="Microsoft.Bot.Connector.IMessageActivity" RefType="this" />
          <Parameter Name="text" Type="System.String" />
          <Parameter Name="options" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
          <Parameter Name="descriptions" Type="System.Collections.Generic.IEnumerable&lt;System.String&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T"> Type of the options.</typeparam>
          <param name="message"> The message that the buttons will be added to.</param>
          <param name="text"> The text in the <see cref="T:Microsoft.Bot.Connector.HeroCard" />.</param>
          <param name="options"> The options that cause generation of buttons.</param>
          <param name="descriptions">Descriptions for each option.</param>
          <summary>
            Generates buttons from options and add them to the message.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Extensions" Member="M:Microsoft.Bot.Builder.Dialogs.Extensions.AddKeyboardCard``1(Microsoft.Bot.Connector.IMessageActivity,System.String,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.String})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialogContext" />
      </Targets>
      <Member MemberName="EndConversation">
        <MemberSignature Language="C#" Value="public static void EndConversation (this Microsoft.Bot.Builder.Dialogs.IDialogContext context, string code);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EndConversation(class Microsoft.Bot.Builder.Dialogs.IDialogContext context, string code) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.EndConversation(Microsoft.Bot.Builder.Dialogs.IDialogContext,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub EndConversation (context As IDialogContext, code As String)" />
        <MemberSignature Language="F#" Value="static member EndConversation : Microsoft.Bot.Builder.Dialogs.IDialogContext * string -&gt; unit" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.EndConversation (context, code)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Bot.Builder.Dialogs.IDialogContext" RefType="this" />
          <Parameter Name="code" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <param name="code">To be added.</param>
          <summary>
            Initiate an <see cref="T:Microsoft.Bot.Builder.Dialogs.EndConversationEvent" /> to reset the conversation's state and stack and send an
            <see cref="F:Microsoft.Bot.Connector.ActivityTypes.EndOfConversation" /> to the Connector.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Extensions" Member="M:Microsoft.Bot.Builder.Dialogs.Extensions.EndConversation(Microsoft.Bot.Builder.Dialogs.IDialogContext,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack" />
      </Targets>
      <Member MemberName="Forward&lt;R&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task Forward&lt;R&gt; (this Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack stack, Microsoft.Bot.Builder.Dialogs.IDialog&lt;R&gt; child, Microsoft.Bot.Builder.Dialogs.ResumeAfter&lt;R&gt; resume, Microsoft.Bot.Connector.IMessageActivity message, System.Threading.CancellationToken token = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task Forward&lt;R&gt;(class Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack stack, class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!R&gt; child, class Microsoft.Bot.Builder.Dialogs.ResumeAfter`1&lt;!!R&gt; resume, class Microsoft.Bot.Connector.IMessageActivity message, valuetype System.Threading.CancellationToken token) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.Forward``1(Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack,Microsoft.Bot.Builder.Dialogs.IDialog{``0},Microsoft.Bot.Builder.Dialogs.ResumeAfter{``0},Microsoft.Bot.Connector.IMessageActivity,System.Threading.CancellationToken)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Forward(Of R) (stack As IDialogStack, child As IDialog(Of R), resume As ResumeAfter(Of R), message As IMessageActivity, Optional token As CancellationToken = null) As Task" />
        <MemberSignature Language="F#" Value="static member Forward : Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack * Microsoft.Bot.Builder.Dialogs.IDialog&lt;'R&gt; * Microsoft.Bot.Builder.Dialogs.ResumeAfter&lt;'R&gt; * Microsoft.Bot.Connector.IMessageActivity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.Forward (stack, child, resume, message, token)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="R" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="stack" Type="Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack" RefType="this" />
          <Parameter Name="child" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;R&gt;" />
          <Parameter Name="resume" Type="Microsoft.Bot.Builder.Dialogs.ResumeAfter&lt;R&gt;" />
          <Parameter Name="message" Type="Microsoft.Bot.Connector.IMessageActivity" />
          <Parameter Name="token" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="R">The type of result expected from the child dialog.</typeparam>
          <param name="stack">The dialog stack.</param>
          <param name="child">The child dialog.</param>
          <param name="resume">The method to resume when the child dialog has completed.</param>
          <param name="message">The message that will be posted to child dialog.</param>
          <param name="token">A cancellation token.</param>
          <summary>
            Call a child dialog, add it to the top of the stack and post the message to the child dialog.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Extensions" Member="M:Microsoft.Bot.Builder.Dialogs.Extensions.Forward``1(Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack,Microsoft.Bot.Builder.Dialogs.IDialog{``0},Microsoft.Bot.Builder.Dialogs.ResumeAfter{``0},Microsoft.Bot.Connector.IMessageActivity,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IBotDataBag" />
      </Targets>
      <Member MemberName="Get&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T Get&lt;T&gt; (this Microsoft.Bot.Builder.Dialogs.IBotDataBag bag, string key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Get&lt;T&gt;(class Microsoft.Bot.Builder.Dialogs.IBotDataBag bag, string key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.Get``1(Microsoft.Bot.Builder.Dialogs.IBotDataBag,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Get(Of T) (bag As IBotDataBag, key As String) As T" />
        <MemberSignature Language="F#" Value="static member Get : Microsoft.Bot.Builder.Dialogs.IBotDataBag * string -&gt; 'T" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.Get (bag, key)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="bag" Type="Microsoft.Bot.Builder.Dialogs.IBotDataBag" RefType="this" />
          <Parameter Name="key" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="bag">To be added.</param>
          <param name="key">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Extensions" Member="M:Microsoft.Bot.Builder.Dialogs.Extensions.Get``1(Microsoft.Bot.Builder.Dialogs.IBotDataBag,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialogContext" />
      </Targets>
      <Member MemberName="GetSignInUrlAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string&gt; GetSignInUrlAsync (this Microsoft.Bot.Builder.Dialogs.IDialogContext context, string connectionName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string&gt; GetSignInUrlAsync(class Microsoft.Bot.Builder.Dialogs.IDialogContext context, string connectionName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.GetSignInUrlAsync(Microsoft.Bot.Builder.Dialogs.IDialogContext,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetSignInUrlAsync (context As IDialogContext, connectionName As String) As Task(Of String)" />
        <MemberSignature Language="F#" Value="static member GetSignInUrlAsync : Microsoft.Bot.Builder.Dialogs.IDialogContext * string -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.GetSignInUrlAsync (context, connectionName)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Bot.Builder.Dialogs.IDialogContext" RefType="this" />
          <Parameter Name="connectionName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <param name="connectionName">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Extensions" Member="M:Microsoft.Bot.Builder.Dialogs.Extensions.GetSignInUrlAsync(Microsoft.Bot.Builder.Dialogs.IDialogContext,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialogContext" />
      </Targets>
      <Member MemberName="GetUserTokenAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.TokenResponse&gt; GetUserTokenAsync (this Microsoft.Bot.Builder.Dialogs.IDialogContext context, string connectionName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.TokenResponse&gt; GetUserTokenAsync(class Microsoft.Bot.Builder.Dialogs.IDialogContext context, string connectionName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.GetUserTokenAsync(Microsoft.Bot.Builder.Dialogs.IDialogContext,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetUserTokenAsync (context As IDialogContext, connectionName As String) As Task(Of TokenResponse)" />
        <MemberSignature Language="F#" Value="static member GetUserTokenAsync : Microsoft.Bot.Builder.Dialogs.IDialogContext * string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.TokenResponse&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.GetUserTokenAsync (context, connectionName)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.TokenResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Bot.Builder.Dialogs.IDialogContext" RefType="this" />
          <Parameter Name="connectionName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <param name="connectionName">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Extensions" Member="M:Microsoft.Bot.Builder.Dialogs.Extensions.GetUserTokenAsync(Microsoft.Bot.Builder.Dialogs.IDialogContext,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialogContext" />
      </Targets>
      <Member MemberName="GetUserTokenAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.TokenResponse&gt; GetUserTokenAsync (this Microsoft.Bot.Builder.Dialogs.IDialogContext context, string connectionName, string magicCode);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.TokenResponse&gt; GetUserTokenAsync(class Microsoft.Bot.Builder.Dialogs.IDialogContext context, string connectionName, string magicCode) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.GetUserTokenAsync(Microsoft.Bot.Builder.Dialogs.IDialogContext,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetUserTokenAsync (context As IDialogContext, connectionName As String, magicCode As String) As Task(Of TokenResponse)" />
        <MemberSignature Language="F#" Value="static member GetUserTokenAsync : Microsoft.Bot.Builder.Dialogs.IDialogContext * string * string -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.TokenResponse&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.GetUserTokenAsync (context, connectionName, magicCode)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.TokenResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Bot.Builder.Dialogs.IDialogContext" RefType="this" />
          <Parameter Name="connectionName" Type="System.String" />
          <Parameter Name="magicCode" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <param name="connectionName">To be added.</param>
          <param name="magicCode">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Extensions" Member="M:Microsoft.Bot.Builder.Dialogs.Extensions.GetUserTokenAsync(Microsoft.Bot.Builder.Dialogs.IDialogContext,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IBotDataBag" />
      </Targets>
      <Member MemberName="GetValue&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetValue&lt;T&gt; (this Microsoft.Bot.Builder.Dialogs.IBotDataBag bag, string key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetValue&lt;T&gt;(class Microsoft.Bot.Builder.Dialogs.IBotDataBag bag, string key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.GetValue``1(Microsoft.Bot.Builder.Dialogs.IBotDataBag,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetValue(Of T) (bag As IBotDataBag, key As String) As T" />
        <MemberSignature Language="F#" Value="static member GetValue : Microsoft.Bot.Builder.Dialogs.IBotDataBag * string -&gt; 'T" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.GetValue (bag, key)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="bag" Type="Microsoft.Bot.Builder.Dialogs.IBotDataBag" RefType="this" />
          <Parameter Name="key" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the value to get.</typeparam>
          <param name="bag">The bot data bag.</param>
          <param name="key">The key of the value to get or set.</param>
          <summary>
            Gets the value associated with the specified key.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Extensions" Member="M:Microsoft.Bot.Builder.Dialogs.Extensions.GetValue``1(Microsoft.Bot.Builder.Dialogs.IBotDataBag,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IBotDataBag" />
      </Targets>
      <Member MemberName="GetValueOrDefault&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetValueOrDefault&lt;T&gt; (this Microsoft.Bot.Builder.Dialogs.IBotDataBag bag, string key, T defaultValue = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetValueOrDefault&lt;T&gt;(class Microsoft.Bot.Builder.Dialogs.IBotDataBag bag, string key, !!T defaultValue) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.GetValueOrDefault``1(Microsoft.Bot.Builder.Dialogs.IBotDataBag,System.String,``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetValueOrDefault(Of T) (bag As IBotDataBag, key As String, Optional defaultValue As T = null) As T" />
        <MemberSignature Language="F#" Value="static member GetValueOrDefault : Microsoft.Bot.Builder.Dialogs.IBotDataBag * string * 'T -&gt; 'T" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.GetValueOrDefault (bag, key, defaultValue)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="bag" Type="Microsoft.Bot.Builder.Dialogs.IBotDataBag" RefType="this" />
          <Parameter Name="key" Type="System.String" />
          <Parameter Name="defaultValue" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of the value to get.</typeparam>
          <param name="bag">The bot data bag.</param>
          <param name="key">The key of the value to get or set.</param>
          <param name="defaultValue">The value to return if the key is not present</param>
          <summary>
            Gets the value associated with the specified key or a default value if not found.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Extensions" Member="M:Microsoft.Bot.Builder.Dialogs.Extensions.GetValueOrDefault``1(Microsoft.Bot.Builder.Dialogs.IBotDataBag,System.String,``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.ResumptionCookie" />
      </Targets>
      <Member MemberName="GZipSerialize">
        <MemberSignature Language="C#" Value="public static string GZipSerialize (this Microsoft.Bot.Builder.Dialogs.ResumptionCookie resumptionCookie);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GZipSerialize(class Microsoft.Bot.Builder.Dialogs.ResumptionCookie resumptionCookie) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.GZipSerialize(Microsoft.Bot.Builder.Dialogs.ResumptionCookie)" />
        <MemberSignature Language="F#" Value="static member GZipSerialize : Microsoft.Bot.Builder.Dialogs.ResumptionCookie -&gt; string" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.GZipSerialize resumptionCookie" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="resumptionCookie" Type="Microsoft.Bot.Builder.Dialogs.ResumptionCookie" RefType="this" />
        </Parameters>
        <Docs>
          <param name="resumptionCookie"> The resumption cookie.</param>
          <summary>
            Binary serializes <see cref="T:Microsoft.Bot.Builder.Dialogs.ResumptionCookie" /> using <see cref="T:System.IO.Compression.GZipStream" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Extensions" Member="M:Microsoft.Bot.Builder.Dialogs.Extensions.GZipSerialize(Microsoft.Bot.Builder.Dialogs.ResumptionCookie)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser" />
      </Targets>
      <Member MemberName="PostAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task PostAsync (this Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser botToUser, string text, string locale = null, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task PostAsync(class Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser botToUser, string text, string locale, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.PostAsync(Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser,System.String,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member PostAsync : Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.PostAsync (botToUser, text, locale, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="botToUser" Type="Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser" RefType="this" />
          <Parameter Name="text" Type="System.String" />
          <Parameter Name="locale" Type="System.String" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="botToUser">Communication channel to use.</param>
          <param name="text">The message text.</param>
          <param name="locale">The locale of the text.</param>
          <param name="cancellationToken">The cancellation token.</param>
          <summary>
            Post a message to be sent to the user, using previous messages to establish a conversation context.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Extensions" Member="M:Microsoft.Bot.Builder.Dialogs.Extensions.PostAsync(Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser,System.String,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IPromptRecognizer" />
      </Targets>
      <Member MemberName="RecognizeDouble">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;double&gt;&gt; RecognizeDouble (this Microsoft.Bot.Builder.Dialogs.IPromptRecognizer recognizer, Microsoft.Bot.Connector.IMessageActivity message);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Bot.Builder.Dialogs.RecognizeEntity`1&lt;float64&gt;&gt; RecognizeDouble(class Microsoft.Bot.Builder.Dialogs.IPromptRecognizer recognizer, class Microsoft.Bot.Connector.IMessageActivity message) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.RecognizeDouble(Microsoft.Bot.Builder.Dialogs.IPromptRecognizer,Microsoft.Bot.Connector.IMessageActivity)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RecognizeDouble (recognizer As IPromptRecognizer, message As IMessageActivity) As IEnumerable(Of RecognizeEntity(Of Double))" />
        <MemberSignature Language="F#" Value="static member RecognizeDouble : Microsoft.Bot.Builder.Dialogs.IPromptRecognizer * Microsoft.Bot.Connector.IMessageActivity -&gt; seq&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;double&gt;&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.RecognizeDouble (recognizer, message)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="recognizer" Type="Microsoft.Bot.Builder.Dialogs.IPromptRecognizer" RefType="this" />
          <Parameter Name="message" Type="Microsoft.Bot.Connector.IMessageActivity" />
        </Parameters>
        <Docs>
          <param name="recognizer">
            <see cref="T:Microsoft.Bot.Builder.Dialogs.IPromptRecognizer" />
          </param>
          <param name="message">Message context.</param>
          <summary>Recognizer for a double number.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Extensions" Member="M:Microsoft.Bot.Builder.Dialogs.Extensions.RecognizeDouble(Microsoft.Bot.Builder.Dialogs.IPromptRecognizer,Microsoft.Bot.Connector.IMessageActivity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IPromptRecognizer" />
      </Targets>
      <Member MemberName="RecognizeDoubleInRange">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;double&gt;&gt; RecognizeDoubleInRange (this Microsoft.Bot.Builder.Dialogs.IPromptRecognizer recognizer, Microsoft.Bot.Connector.IMessageActivity message, Nullable&lt;double&gt; min, Nullable&lt;double&gt; max);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Bot.Builder.Dialogs.RecognizeEntity`1&lt;float64&gt;&gt; RecognizeDoubleInRange(class Microsoft.Bot.Builder.Dialogs.IPromptRecognizer recognizer, class Microsoft.Bot.Connector.IMessageActivity message, valuetype System.Nullable`1&lt;float64&gt; min, valuetype System.Nullable`1&lt;float64&gt; max) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.RecognizeDoubleInRange(Microsoft.Bot.Builder.Dialogs.IPromptRecognizer,Microsoft.Bot.Connector.IMessageActivity,System.Nullable{System.Double},System.Nullable{System.Double})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RecognizeDoubleInRange (recognizer As IPromptRecognizer, message As IMessageActivity, min As Nullable(Of Double), max As Nullable(Of Double)) As IEnumerable(Of RecognizeEntity(Of Double))" />
        <MemberSignature Language="F#" Value="static member RecognizeDoubleInRange : Microsoft.Bot.Builder.Dialogs.IPromptRecognizer * Microsoft.Bot.Connector.IMessageActivity * Nullable&lt;double&gt; * Nullable&lt;double&gt; -&gt; seq&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;double&gt;&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.RecognizeDoubleInRange (recognizer, message, min, max)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;System.Double&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="recognizer" Type="Microsoft.Bot.Builder.Dialogs.IPromptRecognizer" RefType="this" />
          <Parameter Name="message" Type="Microsoft.Bot.Connector.IMessageActivity" />
          <Parameter Name="min" Type="System.Nullable&lt;System.Double&gt;" />
          <Parameter Name="max" Type="System.Nullable&lt;System.Double&gt;" />
        </Parameters>
        <Docs>
          <param name="recognizer">
            <see cref="T:Microsoft.Bot.Builder.Dialogs.IPromptRecognizer" />
          </param>
          <param name="message">Message context.</param>
          <param name="min">Minimun value.</param>
          <param name="max">Maximum value.</param>
          <summary>Recognizes the double in range.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Extensions" Member="M:Microsoft.Bot.Builder.Dialogs.Extensions.RecognizeDoubleInRange(Microsoft.Bot.Builder.Dialogs.IPromptRecognizer,Microsoft.Bot.Connector.IMessageActivity,System.Nullable{System.Double},System.Nullable{System.Double})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IPromptRecognizer" />
      </Targets>
      <Member MemberName="RecognizeInteger">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;long&gt;&gt; RecognizeInteger (this Microsoft.Bot.Builder.Dialogs.IPromptRecognizer recognizer, Microsoft.Bot.Connector.IMessageActivity message);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Bot.Builder.Dialogs.RecognizeEntity`1&lt;int64&gt;&gt; RecognizeInteger(class Microsoft.Bot.Builder.Dialogs.IPromptRecognizer recognizer, class Microsoft.Bot.Connector.IMessageActivity message) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.RecognizeInteger(Microsoft.Bot.Builder.Dialogs.IPromptRecognizer,Microsoft.Bot.Connector.IMessageActivity)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RecognizeInteger (recognizer As IPromptRecognizer, message As IMessageActivity) As IEnumerable(Of RecognizeEntity(Of Long))" />
        <MemberSignature Language="F#" Value="static member RecognizeInteger : Microsoft.Bot.Builder.Dialogs.IPromptRecognizer * Microsoft.Bot.Connector.IMessageActivity -&gt; seq&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;int64&gt;&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.RecognizeInteger (recognizer, message)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;System.Int64&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="recognizer" Type="Microsoft.Bot.Builder.Dialogs.IPromptRecognizer" RefType="this" />
          <Parameter Name="message" Type="Microsoft.Bot.Connector.IMessageActivity" />
        </Parameters>
        <Docs>
          <param name="recognizer">
            <see cref="T:Microsoft.Bot.Builder.Dialogs.IPromptRecognizer" />
          </param>
          <param name="message">Message context.</param>
          <summary>Recognizer for a Int64 number.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Extensions" Member="M:Microsoft.Bot.Builder.Dialogs.Extensions.RecognizeInteger(Microsoft.Bot.Builder.Dialogs.IPromptRecognizer,Microsoft.Bot.Connector.IMessageActivity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IPromptRecognizer" />
      </Targets>
      <Member MemberName="RecognizeIntegerInRange">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;long&gt;&gt; RecognizeIntegerInRange (this Microsoft.Bot.Builder.Dialogs.IPromptRecognizer recognizer, Microsoft.Bot.Connector.IMessageActivity message, Nullable&lt;long&gt; min, Nullable&lt;long&gt; max);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Bot.Builder.Dialogs.RecognizeEntity`1&lt;int64&gt;&gt; RecognizeIntegerInRange(class Microsoft.Bot.Builder.Dialogs.IPromptRecognizer recognizer, class Microsoft.Bot.Connector.IMessageActivity message, valuetype System.Nullable`1&lt;int64&gt; min, valuetype System.Nullable`1&lt;int64&gt; max) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.RecognizeIntegerInRange(Microsoft.Bot.Builder.Dialogs.IPromptRecognizer,Microsoft.Bot.Connector.IMessageActivity,System.Nullable{System.Int64},System.Nullable{System.Int64})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RecognizeIntegerInRange (recognizer As IPromptRecognizer, message As IMessageActivity, min As Nullable(Of Long), max As Nullable(Of Long)) As IEnumerable(Of RecognizeEntity(Of Long))" />
        <MemberSignature Language="F#" Value="static member RecognizeIntegerInRange : Microsoft.Bot.Builder.Dialogs.IPromptRecognizer * Microsoft.Bot.Connector.IMessageActivity * Nullable&lt;int64&gt; * Nullable&lt;int64&gt; -&gt; seq&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;int64&gt;&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.RecognizeIntegerInRange (recognizer, message, min, max)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Dialogs.RecognizeEntity&lt;System.Int64&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="recognizer" Type="Microsoft.Bot.Builder.Dialogs.IPromptRecognizer" RefType="this" />
          <Parameter Name="message" Type="Microsoft.Bot.Connector.IMessageActivity" />
          <Parameter Name="min" Type="System.Nullable&lt;System.Int64&gt;" />
          <Parameter Name="max" Type="System.Nullable&lt;System.Int64&gt;" />
        </Parameters>
        <Docs>
          <param name="recognizer">
            <see cref="T:Microsoft.Bot.Builder.Dialogs.IPromptRecognizer" />
          </param>
          <param name="message">Message context.</param>
          <param name="min">Minimun value.</param>
          <param name="max">Maximum value.</param>
          <summary>Recognizer for a Int64 number within a range</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Extensions" Member="M:Microsoft.Bot.Builder.Dialogs.Extensions.RecognizeIntegerInRange(Microsoft.Bot.Builder.Dialogs.IPromptRecognizer,Microsoft.Bot.Connector.IMessageActivity,System.Nullable{System.Int64},System.Nullable{System.Int64})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser" />
      </Targets>
      <Member MemberName="SayAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task SayAsync (this Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser botToUser, string text, string speak = null, Microsoft.Bot.Builder.Dialogs.MessageOptions options = null, string locale = null, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task SayAsync(class Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser botToUser, string text, string speak, class Microsoft.Bot.Builder.Dialogs.MessageOptions options, string locale, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.SayAsync(Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser,System.String,System.String,Microsoft.Bot.Builder.Dialogs.MessageOptions,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SayAsync : Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser * string * string * Microsoft.Bot.Builder.Dialogs.MessageOptions * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.SayAsync (botToUser, text, speak, options, locale, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="botToUser" Type="Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser" RefType="this" />
          <Parameter Name="text" Type="System.String" />
          <Parameter Name="speak" Type="System.String" />
          <Parameter Name="options" Type="Microsoft.Bot.Builder.Dialogs.MessageOptions" />
          <Parameter Name="locale" Type="System.String" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="botToUser">Communication channel to use.</param>
          <param name="text">The message text.</param>
          <param name="speak">The SSML markup for text to speech.</param>
          <param name="options">The options for the message.</param>
          <param name="locale">The locale of the text.</param>
          <param name="cancellationToken">The cancellation token.</param>
          <summary>
            Post a message and optional SSML to be sent to the user, using previous messages to establish a conversation context.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Extensions" Member="M:Microsoft.Bot.Builder.Dialogs.Extensions.SayAsync(Microsoft.Bot.Builder.Dialogs.Internals.IBotToUser,System.String,System.String,Microsoft.Bot.Builder.Dialogs.MessageOptions,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IDialogContext" />
      </Targets>
      <Member MemberName="SignOutUserAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; SignOutUserAsync (this Microsoft.Bot.Builder.Dialogs.IDialogContext context, string connectionName);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; SignOutUserAsync(class Microsoft.Bot.Builder.Dialogs.IDialogContext context, string connectionName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.SignOutUserAsync(Microsoft.Bot.Builder.Dialogs.IDialogContext,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SignOutUserAsync (context As IDialogContext, connectionName As String) As Task(Of Boolean)" />
        <MemberSignature Language="F#" Value="static member SignOutUserAsync : Microsoft.Bot.Builder.Dialogs.IDialogContext * string -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.SignOutUserAsync (context, connectionName)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="context" Type="Microsoft.Bot.Builder.Dialogs.IDialogContext" RefType="this" />
          <Parameter Name="connectionName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="context">To be added.</param>
          <param name="connectionName">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Extensions" Member="M:Microsoft.Bot.Builder.Dialogs.Extensions.SignOutUserAsync(Microsoft.Bot.Builder.Dialogs.IDialogContext,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack" />
      </Targets>
      <Member MemberName="Wait">
        <MemberSignature Language="C#" Value="public static void Wait (this Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack stack, Microsoft.Bot.Builder.Dialogs.ResumeAfter&lt;Microsoft.Bot.Connector.IMessageActivity&gt; resume);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Wait(class Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack stack, class Microsoft.Bot.Builder.Dialogs.ResumeAfter`1&lt;class Microsoft.Bot.Connector.IMessageActivity&gt; resume) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Extensions.Wait(Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack,Microsoft.Bot.Builder.Dialogs.ResumeAfter{Microsoft.Bot.Connector.IMessageActivity})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Wait (stack As IDialogStack, resume As ResumeAfter(Of IMessageActivity))" />
        <MemberSignature Language="F#" Value="static member Wait : Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack * Microsoft.Bot.Builder.Dialogs.ResumeAfter&lt;Microsoft.Bot.Connector.IMessageActivity&gt; -&gt; unit" Usage="Microsoft.Bot.Builder.Dialogs.Extensions.Wait (stack, resume)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="stack" Type="Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack" RefType="this" />
          <Parameter Name="resume" Type="Microsoft.Bot.Builder.Dialogs.ResumeAfter&lt;Microsoft.Bot.Connector.IMessageActivity&gt;" />
        </Parameters>
        <Docs>
          <param name="stack">The dialog stack.</param>
          <param name="resume">The method to resume when the message has been received.</param>
          <summary>
            Suspend the current dialog until the user has sent a message to the bot.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Extensions" Member="M:Microsoft.Bot.Builder.Dialogs.Extensions.Wait(Microsoft.Bot.Builder.Dialogs.Internals.IDialogStack,Microsoft.Bot.Builder.Dialogs.ResumeAfter{Microsoft.Bot.Connector.IMessageActivity})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.Internals.IDialogTask" />
      </Targets>
      <Member MemberName="InterruptAsync&lt;T,R&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task InterruptAsync&lt;T,R&gt; (this Microsoft.Bot.Builder.Dialogs.Internals.IDialogTask task, Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt; dialog, R item, System.Threading.CancellationToken token);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task InterruptAsync&lt;T, R&gt;(class Microsoft.Bot.Builder.Dialogs.Internals.IDialogTask task, class Microsoft.Bot.Builder.Dialogs.IDialog`1&lt;!!T&gt; dialog, !!R item, valuetype System.Threading.CancellationToken token) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Internals.Extensions.InterruptAsync``2(Microsoft.Bot.Builder.Dialogs.Internals.IDialogTask,Microsoft.Bot.Builder.Dialogs.IDialog{``0},``1,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member InterruptAsync : Microsoft.Bot.Builder.Dialogs.Internals.IDialogTask * Microsoft.Bot.Builder.Dialogs.IDialog&lt;'T&gt; * 'R * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Bot.Builder.Dialogs.Internals.Extensions.InterruptAsync (task, dialog, item, token)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
          <TypeParameter Name="R" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="task" Type="Microsoft.Bot.Builder.Dialogs.Internals.IDialogTask" RefType="this" />
          <Parameter Name="dialog" Type="Microsoft.Bot.Builder.Dialogs.IDialog&lt;T&gt;" />
          <Parameter Name="item" Type="R" />
          <Parameter Name="token" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="T">The type of result expected from the dialog.</typeparam>
          <typeparam name="R">The type of the item posted to dialog.</typeparam>
          <param name="task">The dialog task.</param>
          <param name="dialog">The new interrupting dialog.</param>
          <param name="item">The item to forward to the new interrupting dialog.</param>
          <param name="token">The cancellation token.</param>
          <summary>
            Interrupt the waiting dialog with a new dialog
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Internals.Extensions" Member="M:Microsoft.Bot.Builder.Dialogs.Internals.Extensions.InterruptAsync``2(Microsoft.Bot.Builder.Dialogs.Internals.IDialogTask,Microsoft.Bot.Builder.Dialogs.IDialog{``0},``1,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="MaxBy&lt;T,R&gt;">
        <MemberSignature Language="C#" Value="public static T MaxBy&lt;T,R&gt; (this System.Collections.Generic.IEnumerable&lt;T&gt; items, Func&lt;T,R&gt; selectRank, System.Collections.Generic.IComparer&lt;R&gt; comparer = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T MaxBy&lt;T, R&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; items, class System.Func`2&lt;!!T, !!R&gt; selectRank, class System.Collections.Generic.IComparer`1&lt;!!R&gt; comparer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Dialogs.Internals.Extensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MaxBy(Of T, R) (items As IEnumerable(Of T), selectRank As Func(Of T, R), Optional comparer As IComparer(Of R) = null) As T" />
        <MemberSignature Language="F#" Value="static member MaxBy : seq&lt;'T&gt; * Func&lt;'T, 'R&gt; * System.Collections.Generic.IComparer&lt;'R&gt; -&gt; 'T" Usage="Microsoft.Bot.Builder.Dialogs.Internals.Extensions.MaxBy (items, selectRank, comparer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
          <TypeParameter Name="R" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="items" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" RefType="this" />
          <Parameter Name="selectRank" Type="System.Func&lt;T,R&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;R&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <typeparam name="R">To be added.</typeparam>
          <param name="items">To be added.</param>
          <param name="selectRank">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Dialogs.Internals.Extensions" Member="M:Microsoft.Bot.Builder.Dialogs.Internals.Extensions.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt" />
      </Targets>
      <Member MemberName="GenerateHeroCard">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;Microsoft.Bot.Connector.Attachment&gt; GenerateHeroCard (this Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt prompt);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;class Microsoft.Bot.Connector.Attachment&gt; GenerateHeroCard(class Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt prompt) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.GenerateHeroCard(Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GenerateHeroCard (prompt As FormPrompt) As IList(Of Attachment)" />
        <MemberSignature Language="F#" Value="static member GenerateHeroCard : Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt -&gt; System.Collections.Generic.IList&lt;Microsoft.Bot.Connector.Attachment&gt;" Usage="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.GenerateHeroCard prompt" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IList&lt;Microsoft.Bot.Connector.Attachment&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="prompt" Type="Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt" RefType="this" />
        </Parameters>
        <Docs>
          <param name="prompt">Prompt definition.</param>
          <summary>
            Generate a hero card from a FormPrompt.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions" Member="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.GenerateHeroCard(Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt" />
      </Targets>
      <Member MemberName="GenerateHeroCards">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;Microsoft.Bot.Connector.Attachment&gt; GenerateHeroCards (this Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt prompt);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;class Microsoft.Bot.Connector.Attachment&gt; GenerateHeroCards(class Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt prompt) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.GenerateHeroCards(Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GenerateHeroCards (prompt As FormPrompt) As IList(Of Attachment)" />
        <MemberSignature Language="F#" Value="static member GenerateHeroCards : Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt -&gt; System.Collections.Generic.IList&lt;Microsoft.Bot.Connector.Attachment&gt;" Usage="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.GenerateHeroCards prompt" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IList&lt;Microsoft.Bot.Connector.Attachment&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="prompt" Type="Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt" RefType="this" />
        </Parameters>
        <Docs>
          <param name="prompt">Prompt definition.</param>
          <summary>
            Generate a list of hero cards from a prompt definition.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions" Member="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.GenerateHeroCards(Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt" />
      </Targets>
      <Member MemberName="GenerateMessages">
        <MemberSignature Language="C#" Value="public static bool GenerateMessages (this Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt prompt, Microsoft.Bot.Connector.IMessageActivity preamble, Microsoft.Bot.Connector.IMessageActivity promptMessage);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GenerateMessages(class Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt prompt, class Microsoft.Bot.Connector.IMessageActivity preamble, class Microsoft.Bot.Connector.IMessageActivity promptMessage) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.GenerateMessages(Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt,Microsoft.Bot.Connector.IMessageActivity,Microsoft.Bot.Connector.IMessageActivity)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GenerateMessages (prompt As FormPrompt, preamble As IMessageActivity, promptMessage As IMessageActivity) As Boolean" />
        <MemberSignature Language="F#" Value="static member GenerateMessages : Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt * Microsoft.Bot.Connector.IMessageActivity * Microsoft.Bot.Connector.IMessageActivity -&gt; bool" Usage="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.GenerateMessages (prompt, preamble, promptMessage)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="prompt" Type="Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt" RefType="this" />
          <Parameter Name="preamble" Type="Microsoft.Bot.Connector.IMessageActivity" />
          <Parameter Name="promptMessage" Type="Microsoft.Bot.Connector.IMessageActivity" />
        </Parameters>
        <Docs>
          <param name="prompt">Prompt definition.</param>
          <param name="preamble">Simple text message with all except last line of prompt to allow markdown in prompts.</param>
          <param name="promptMessage">Message with prompt definition including cards.</param>
          <summary>
            Given a prompt definition generate messages to send back.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions" Member="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.GenerateMessages(Microsoft.Bot.Builder.FormFlow.Advanced.FormPrompt,Microsoft.Bot.Connector.IMessageActivity,Microsoft.Bot.Connector.IMessageActivity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="GetGenericElementType">
        <MemberSignature Language="C#" Value="public static Type GetGenericElementType (this Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetGenericElementType(class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.GetGenericElementType(System.Type)" />
        <MemberSignature Language="F#" Value="static member GetGenericElementType : Type -&gt; Type" Usage="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.GetGenericElementType type" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Type</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">Type to check.</param>
          <summary>
            Return the underlying type of generic IEnumerable.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions" Member="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.GetGenericElementType(System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="IsAttachmentCollection">
        <MemberSignature Language="C#" Value="public static bool IsAttachmentCollection (this Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAttachmentCollection(class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsAttachmentCollection(System.Type)" />
        <MemberSignature Language="F#" Value="static member IsAttachmentCollection : Type -&gt; bool" Usage="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsAttachmentCollection type" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">Type to check.</param>
          <summary>
            Type is enumerable of awaitable attachments.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions" Member="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsAttachmentCollection(System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="IsAttachmentType">
        <MemberSignature Language="C#" Value="public static bool IsAttachmentType (this Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsAttachmentType(class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsAttachmentType(System.Type)" />
        <MemberSignature Language="F#" Value="static member IsAttachmentType : Type -&gt; bool" Usage="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsAttachmentType type" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">Type to check.</param>
          <summary>
            Type is AwaitableAttachment or descendant.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions" Member="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsAttachmentType(System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="IsDouble">
        <MemberSignature Language="C#" Value="public static bool IsDouble (this Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDouble(class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsDouble(System.Type)" />
        <MemberSignature Language="F#" Value="static member IsDouble : Type -&gt; bool" Usage="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsDouble type" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">Type to check.</param>
          <summary>
            Type is float or double.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions" Member="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsDouble(System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="IsGenericCollectionType">
        <MemberSignature Language="C#" Value="public static bool IsGenericCollectionType (this Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsGenericCollectionType(class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsGenericCollectionType(System.Type)" />
        <MemberSignature Language="F#" Value="static member IsGenericCollectionType : Type -&gt; bool" Usage="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsGenericCollectionType type" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">Type to check.</param>
          <summary>
            Type implements generic ICollection.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions" Member="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsGenericCollectionType(System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="IsGenericEnumerableType">
        <MemberSignature Language="C#" Value="public static bool IsGenericEnumerableType (this Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsGenericEnumerableType(class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsGenericEnumerableType(System.Type)" />
        <MemberSignature Language="F#" Value="static member IsGenericEnumerableType : Type -&gt; bool" Usage="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsGenericEnumerableType type" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">Type to check.</param>
          <summary>
            Type implements generic IEnumerable.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions" Member="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsGenericEnumerableType(System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="IsICollection">
        <MemberSignature Language="C#" Value="public static bool IsICollection (this Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsICollection(class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsICollection(System.Type)" />
        <MemberSignature Language="F#" Value="static member IsICollection : Type -&gt; bool" Usage="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsICollection type" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">Type to check.</param>
          <summary>
            Type implements ICollection.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions" Member="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsICollection(System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="IsIEnumerable">
        <MemberSignature Language="C#" Value="public static bool IsIEnumerable (this Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsIEnumerable(class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsIEnumerable(System.Type)" />
        <MemberSignature Language="F#" Value="static member IsIEnumerable : Type -&gt; bool" Usage="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsIEnumerable type" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">Type to check.</param>
          <summary>
            Type implements IEnumerable.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions" Member="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsIEnumerable(System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="IsIList">
        <MemberSignature Language="C#" Value="public static bool IsIList (this Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsIList(class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsIList(System.Type)" />
        <MemberSignature Language="F#" Value="static member IsIList : Type -&gt; bool" Usage="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsIList type" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">Type to check.</param>
          <summary>
            Type implements IList.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions" Member="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsIList(System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="IsIntegral">
        <MemberSignature Language="C#" Value="public static bool IsIntegral (this Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsIntegral(class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsIntegral(System.Type)" />
        <MemberSignature Language="F#" Value="static member IsIntegral : Type -&gt; bool" Usage="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsIntegral type" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">Type to check.</param>
          <summary>
            Type is integral.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions" Member="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsIntegral(System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="IsListCollectionType">
        <MemberSignature Language="C#" Value="public static bool IsListCollectionType (this Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsListCollectionType(class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsListCollectionType(System.Type)" />
        <MemberSignature Language="F#" Value="static member IsListCollectionType : Type -&gt; bool" Usage="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsListCollectionType type" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">Type to check.</param>
          <summary>
            Type implements generic IList.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions" Member="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsListCollectionType(System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Type" />
      </Targets>
      <Member MemberName="IsNullable">
        <MemberSignature Language="C#" Value="public static bool IsNullable (this Type type);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsNullable(class System.Type type) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsNullable(System.Type)" />
        <MemberSignature Language="F#" Value="static member IsNullable : Type -&gt; bool" Usage="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsNullable type" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="type" Type="System.Type" RefType="this" />
        </Parameters>
        <Docs>
          <param name="type">Type to check.</param>
          <summary>
            Type is nullable.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.FormFlow.Advanced.Extensions" Member="M:Microsoft.Bot.Builder.FormFlow.Advanced.Extensions.IsNullable(System.Type)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseBotApplicationInsights">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseBotApplicationInsights (this Microsoft.AspNetCore.Builder.IApplicationBuilder applicationBuilder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseBotApplicationInsights(class Microsoft.AspNetCore.Builder.IApplicationBuilder applicationBuilder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Integration.ApplicationInsights.Core.ApplicationBuilderExtensions.UseBotApplicationInsights(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseBotApplicationInsights (applicationBuilder As IApplicationBuilder) As IApplicationBuilder" />
        <MemberSignature Language="F#" Value="static member UseBotApplicationInsights : Microsoft.AspNetCore.Builder.IApplicationBuilder -&gt; Microsoft.AspNetCore.Builder.IApplicationBuilder" Usage="Microsoft.Bot.Builder.Integration.ApplicationInsights.Core.ApplicationBuilderExtensions.UseBotApplicationInsights applicationBuilder" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="applicationBuilder" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="applicationBuilder">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <summary>
            Adds Telemetry ASP.Net Middleware.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Integration.ApplicationInsights.Core.ApplicationBuilderExtensions" Member="M:Microsoft.Bot.Builder.Integration.ApplicationInsights.Core.ApplicationBuilderExtensions.UseBotApplicationInsights(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddBotApplicationInsights">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddBotApplicationInsights (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Bot.Builder.IBotTelemetryClient botTelemetryClient, string instrumentationKey = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddBotApplicationInsights(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class Microsoft.Bot.Builder.IBotTelemetryClient botTelemetryClient, string instrumentationKey) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Integration.ApplicationInsights.Core.ServiceCollectionExtensions.AddBotApplicationInsights(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Bot.Builder.IBotTelemetryClient,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddBotApplicationInsights (services As IServiceCollection, botTelemetryClient As IBotTelemetryClient, Optional instrumentationKey As String = null) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddBotApplicationInsights : Microsoft.Extensions.DependencyInjection.IServiceCollection * Microsoft.Bot.Builder.IBotTelemetryClient * string -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Bot.Builder.Integration.ApplicationInsights.Core.ServiceCollectionExtensions.AddBotApplicationInsights (services, botTelemetryClient, instrumentationKey)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="botTelemetryClient" Type="Microsoft.Bot.Builder.IBotTelemetryClient" />
          <Parameter Name="instrumentationKey" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> which specifies the contract for a collection of service descriptors.</param>
          <param name="botTelemetryClient">Bot Telemetry Client that logs event information.</param>
          <param name="instrumentationKey">If Bot Telemetry Client is using Application Insights, provide the instumentation key.</param>
          <summary>
            Adds and configures services for Application Insights to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Integration.ApplicationInsights.Core.ServiceCollectionExtensions" Member="M:Microsoft.Bot.Builder.Integration.ApplicationInsights.Core.ServiceCollectionExtensions.AddBotApplicationInsights(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Bot.Builder.IBotTelemetryClient,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddBotApplicationInsights">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddBotApplicationInsights (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Bot.Configuration.BotConfiguration botConfiguration, string appInsightsServiceInstanceName = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddBotApplicationInsights(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class Microsoft.Bot.Configuration.BotConfiguration botConfiguration, string appInsightsServiceInstanceName) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Integration.ApplicationInsights.Core.ServiceCollectionExtensions.AddBotApplicationInsights(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Bot.Configuration.BotConfiguration,System.String)" />
        <MemberSignature Language="F#" Value="static member AddBotApplicationInsights : Microsoft.Extensions.DependencyInjection.IServiceCollection * Microsoft.Bot.Configuration.BotConfiguration * string -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Bot.Builder.Integration.ApplicationInsights.Core.ServiceCollectionExtensions.AddBotApplicationInsights (services, botConfiguration, appInsightsServiceInstanceName)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="botConfiguration" Type="Microsoft.Bot.Configuration.BotConfiguration" />
          <Parameter Name="appInsightsServiceInstanceName" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" /> which specifies the contract for a collection of service descriptors.</param>
          <param name="botConfiguration">Bot configuration that contains the Application Insights configuration information.</param>
          <param name="appInsightsServiceInstanceName">(OPTIONAL) Specifies a Application Insights instance name in the Bot configuration.</param>
          <summary>
            Adds and configures services for Application Insights to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Integration.ApplicationInsights.Core.ServiceCollectionExtensions" Member="M:Microsoft.Bot.Builder.Integration.ApplicationInsights.Core.ServiceCollectionExtensions.AddBotApplicationInsights(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Bot.Configuration.BotConfiguration,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddBotApplicationInsights">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddBotApplicationInsights (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Microsoft.Extensions.Configuration.IConfiguration config);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddBotApplicationInsights(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class Microsoft.Extensions.Configuration.IConfiguration config) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Integration.ApplicationInsights.Core.ServiceCollectionExtensions.AddBotApplicationInsights(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddBotApplicationInsights (services As IServiceCollection, config As IConfiguration) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddBotApplicationInsights : Microsoft.Extensions.DependencyInjection.IServiceCollection * Microsoft.Extensions.Configuration.IConfiguration -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Bot.Builder.Integration.ApplicationInsights.Core.ServiceCollectionExtensions.AddBotApplicationInsights (services, config)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="config" Type="Microsoft.Extensions.Configuration.IConfiguration" />
        </Parameters>
        <Docs>
          <param name="services">To be added.</param>
          <param name="config">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Integration.ApplicationInsights.Core.ServiceCollectionExtensions" Member="M:Microsoft.Bot.Builder.Integration.ApplicationInsights.Core.ServiceCollectionExtensions.AddBotApplicationInsights(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />
      </Targets>
      <Member MemberName="UseBotFramework">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Builder.IApplicationBuilder UseBotFramework (this Microsoft.AspNetCore.Builder.IApplicationBuilder applicationBuilder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Builder.IApplicationBuilder UseBotFramework(class Microsoft.AspNetCore.Builder.IApplicationBuilder applicationBuilder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ApplicationBuilderExtensions.UseBotFramework(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseBotFramework (applicationBuilder As IApplicationBuilder) As IApplicationBuilder" />
        <MemberSignature Language="F#" Value="static member UseBotFramework : Microsoft.AspNetCore.Builder.IApplicationBuilder -&gt; Microsoft.AspNetCore.Builder.IApplicationBuilder" Usage="Microsoft.Bot.Builder.Integration.AspNet.Core.ApplicationBuilderExtensions.UseBotFramework applicationBuilder" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Builder.IApplicationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="applicationBuilder" Type="Microsoft.AspNetCore.Builder.IApplicationBuilder" RefType="this" />
        </Parameters>
        <Docs>
          <param name="applicationBuilder">The <see cref="T:Microsoft.AspNetCore.Builder.IApplicationBuilder" />.</param>
          <summary>
            Maps various endpoint handlers for the <see cref="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBot``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Bot.Builder.Integration.BotFrameworkOptions})">registered bot</see> into the request execution pipeline.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Integration.AspNet.Core.ApplicationBuilderExtensions" Member="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ApplicationBuilderExtensions.UseBotFramework(Microsoft.AspNetCore.Builder.IApplicationBuilder)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddBot&lt;TBot&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddBot&lt;TBot&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, TBot bot, Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; configureAction = null) where TBot : class, Microsoft.Bot.Builder.IBot;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddBot&lt;class (class Microsoft.Bot.Builder.IBot) TBot&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, !!TBot bot, class System.Action`1&lt;class Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; configureAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBot``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0,System.Action{Microsoft.Bot.Builder.Integration.BotFrameworkOptions})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddBot(Of TBot As {Class, IBot}) (services As IServiceCollection, bot As TBot, Optional configureAction As Action(Of BotFrameworkOptions) = null) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddBot : Microsoft.Extensions.DependencyInjection.IServiceCollection * 'Bot * Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Bot : null and 'Bot :&gt; Microsoft.Bot.Builder.IBot)" Usage="Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBot (services, bot, configureAction)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TBot">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
              <InterfaceName>Microsoft.Bot.Builder.IBot</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="bot" Type="TBot" />
          <Parameter Name="configureAction" Type="System.Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TBot">A concrete type of <see cref="T:Microsoft.Bot.Builder.IBot" /> that is to be registered and exposed to the Bot Framework.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
          <param name="bot">The instance of the bot that will be registered as a <see cref="F:Microsoft.Extensions.DependencyInjection.ServiceLifetime.Singleton" />.</param>
          <param name="configureAction">A optional callback that, if provided, will be invoked to further configure of the bot.</param>
          <summary>
            Adds and optionally configures a singleton <paramref name="bot">bot</paramref> instance to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions" Member="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBot``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,``0,System.Action{Microsoft.Bot.Builder.Integration.BotFrameworkOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddBot&lt;TBot&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddBot&lt;TBot&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; configureAction = null) where TBot : class, Microsoft.Bot.Builder.IBot;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddBot&lt;class (class Microsoft.Bot.Builder.IBot) TBot&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; configureAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBot``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Bot.Builder.Integration.BotFrameworkOptions})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddBot(Of TBot As {Class, IBot}) (services As IServiceCollection, Optional configureAction As Action(Of BotFrameworkOptions) = null) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddBot : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Bot : null and 'Bot :&gt; Microsoft.Bot.Builder.IBot)" Usage="Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBot (services, configureAction)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TBot">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
              <InterfaceName>Microsoft.Bot.Builder.IBot</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="configureAction" Type="System.Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TBot">A concrete type of <see cref="T:Microsoft.Bot.Builder.IBot" /> that is to be registered and exposed to the Bot Framework.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
          <param name="configureAction">A optional callback that, if provided, will be invoked to further configure of the bot.</param>
          <summary>
            Adds and optionally configures a <typeparamref name="TBot">specified bot type</typeparamref> to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions" Member="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBot``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Bot.Builder.Integration.BotFrameworkOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddBot&lt;TBot&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddBot&lt;TBot&gt; (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Func&lt;IServiceProvider,TBot&gt; botFactory, Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; configureAction = null) where TBot : class, Microsoft.Bot.Builder.IBot;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddBot&lt;class (class Microsoft.Bot.Builder.IBot) TBot&gt;(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Func`2&lt;class System.IServiceProvider, !!TBot&gt; botFactory, class System.Action`1&lt;class Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; configureAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBot``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0},System.Action{Microsoft.Bot.Builder.Integration.BotFrameworkOptions})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddBot(Of TBot As {Class, IBot}) (services As IServiceCollection, botFactory As Func(Of IServiceProvider, TBot), Optional configureAction As Action(Of BotFrameworkOptions) = null) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddBot : Microsoft.Extensions.DependencyInjection.IServiceCollection * Func&lt;IServiceProvider, 'Bot (requires 'Bot : null and 'Bot :&gt; Microsoft.Bot.Builder.IBot)&gt; * Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection (requires 'Bot : null and 'Bot :&gt; Microsoft.Bot.Builder.IBot)" Usage="Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBot (services, botFactory, configureAction)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TBot">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
              <InterfaceName>Microsoft.Bot.Builder.IBot</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="botFactory" Type="System.Func&lt;System.IServiceProvider,TBot&gt;" />
          <Parameter Name="configureAction" Type="System.Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="TBot">A concrete type of <see cref="T:Microsoft.Bot.Builder.IBot" /> that is to be registered and exposed to the Bot Framework.</typeparam>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
          <param name="botFactory">A factory method that will supply an instance of the <typeparamref name="TBot" /> when invoked.</param>
          <param name="configureAction">A optional callback that, if provided, will be invoked to further configure of the bot.</param>
          <summary>
            Adds and optionally configures a <typeparamref name="TBot">specified bot type</typeparamref> to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions" Member="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBot``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Func{System.IServiceProvider,``0},System.Action{Microsoft.Bot.Builder.Integration.BotFrameworkOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />
      </Targets>
      <Member MemberName="AddBotFrameworkAdapterIntegration">
        <MemberSignature Language="C#" Value="public static Microsoft.Extensions.DependencyInjection.IServiceCollection AddBotFrameworkAdapterIntegration (this Microsoft.Extensions.DependencyInjection.IServiceCollection services, Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; configureAction = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Extensions.DependencyInjection.IServiceCollection AddBotFrameworkAdapterIntegration(class Microsoft.Extensions.DependencyInjection.IServiceCollection services, class System.Action`1&lt;class Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; configureAction) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBotFrameworkAdapterIntegration(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Bot.Builder.Integration.BotFrameworkOptions})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddBotFrameworkAdapterIntegration (services As IServiceCollection, Optional configureAction As Action(Of BotFrameworkOptions) = null) As IServiceCollection" />
        <MemberSignature Language="F#" Value="static member AddBotFrameworkAdapterIntegration : Microsoft.Extensions.DependencyInjection.IServiceCollection * Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt; -&gt; Microsoft.Extensions.DependencyInjection.IServiceCollection" Usage="Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBotFrameworkAdapterIntegration (services, configureAction)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Extensions.DependencyInjection.IServiceCollection</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="services" Type="Microsoft.Extensions.DependencyInjection.IServiceCollection" RefType="this" />
          <Parameter Name="configureAction" Type="System.Action&lt;Microsoft.Bot.Builder.Integration.BotFrameworkOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection" />.</param>
          <param name="configureAction">A optional callback that, if provided, will be invoked to further configure the integration.</param>
          <summary>
             Adds the <see cref="T:Microsoft.Bot.Builder.BotFrameworkAdapter" /> as the <see cref="T:Microsoft.Bot.Builder.Integration.IAdapterIntegration" /> which will be used by the integration layer
             for processing bot requests.
             </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions" Member="M:Microsoft.Bot.Builder.Integration.AspNet.Core.ServiceCollectionExtensions.AddBotFrameworkAdapterIntegration(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Microsoft.Bot.Builder.Integration.BotFrameworkOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Integration.AspNet.WebApi.BotFrameworkConfigurationBuilder" />
      </Targets>
      <Member MemberName="UseMicrosoftApplicationIdentity">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Integration.AspNet.WebApi.BotFrameworkConfigurationBuilder UseMicrosoftApplicationIdentity (this Microsoft.Bot.Builder.Integration.AspNet.WebApi.BotFrameworkConfigurationBuilder builder, string applicationId, string applicationPassword);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Integration.AspNet.WebApi.BotFrameworkConfigurationBuilder UseMicrosoftApplicationIdentity(class Microsoft.Bot.Builder.Integration.AspNet.WebApi.BotFrameworkConfigurationBuilder builder, string applicationId, string applicationPassword) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Integration.AspNet.WebApi.BotFrameworkConfigurationBuilderExtensions.UseMicrosoftApplicationIdentity(Microsoft.Bot.Builder.Integration.AspNet.WebApi.BotFrameworkConfigurationBuilder,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UseMicrosoftApplicationIdentity (builder As BotFrameworkConfigurationBuilder, applicationId As String, applicationPassword As String) As BotFrameworkConfigurationBuilder" />
        <MemberSignature Language="F#" Value="static member UseMicrosoftApplicationIdentity : Microsoft.Bot.Builder.Integration.AspNet.WebApi.BotFrameworkConfigurationBuilder * string * string -&gt; Microsoft.Bot.Builder.Integration.AspNet.WebApi.BotFrameworkConfigurationBuilder" Usage="Microsoft.Bot.Builder.Integration.AspNet.WebApi.BotFrameworkConfigurationBuilderExtensions.UseMicrosoftApplicationIdentity (builder, applicationId, applicationPassword)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Integration.AspNet.WebApi.BotFrameworkConfigurationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.Bot.Builder.Integration.AspNet.WebApi.BotFrameworkConfigurationBuilder" RefType="this" />
          <Parameter Name="applicationId" Type="System.String" />
          <Parameter Name="applicationPassword" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder">The <see cref="T:Microsoft.Bot.Builder.Integration.AspNet.WebApi.BotFrameworkConfigurationBuilder" />.</param>
          <param name="applicationId">The application id that should be used to authenticate requests made to the Bot Framework.</param>
          <param name="applicationPassword">The application password that should be used to authenticate requests made to the Bot Framework.</param>
          <summary>
            Configures the bot with the a single identity that will be used to authenticate requests made to the Bot Framework.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Integration.AspNet.WebApi.BotFrameworkConfigurationBuilderExtensions" Member="M:Microsoft.Bot.Builder.Integration.AspNet.WebApi.BotFrameworkConfigurationBuilderExtensions.UseMicrosoftApplicationIdentity(Microsoft.Bot.Builder.Integration.AspNet.WebApi.BotFrameworkConfigurationBuilder,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Web.Http.HttpConfiguration" />
      </Targets>
      <Member MemberName="MapBotFramework">
        <MemberSignature Language="C#" Value="public static System.Web.Http.HttpConfiguration MapBotFramework (this System.Web.Http.HttpConfiguration httpConfiguration, Action&lt;Microsoft.Bot.Builder.Integration.AspNet.WebApi.BotFrameworkConfigurationBuilder&gt; configurer = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Http.HttpConfiguration MapBotFramework(class System.Web.Http.HttpConfiguration httpConfiguration, class System.Action`1&lt;class Microsoft.Bot.Builder.Integration.AspNet.WebApi.BotFrameworkConfigurationBuilder&gt; configurer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Integration.AspNet.WebApi.HttpConfigurationExtensions.MapBotFramework(System.Web.Http.HttpConfiguration,System.Action{Microsoft.Bot.Builder.Integration.AspNet.WebApi.BotFrameworkConfigurationBuilder})" />
        <MemberSignature Language="F#" Value="static member MapBotFramework : System.Web.Http.HttpConfiguration * Action&lt;Microsoft.Bot.Builder.Integration.AspNet.WebApi.BotFrameworkConfigurationBuilder&gt; -&gt; System.Web.Http.HttpConfiguration" Usage="Microsoft.Bot.Builder.Integration.AspNet.WebApi.HttpConfigurationExtensions.MapBotFramework (httpConfiguration, configurer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Web.Http.HttpConfiguration</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="httpConfiguration" Type="System.Web.Http.HttpConfiguration" RefType="this" />
          <Parameter Name="configurer" Type="System.Action&lt;Microsoft.Bot.Builder.Integration.AspNet.WebApi.BotFrameworkConfigurationBuilder&gt;" />
        </Parameters>
        <Docs>
          <param name="httpConfiguration">The <see cref="T:System.Web.Http.HttpConfiguration" /> to map the bot into.</param>
          <param name="configurer">A callback to configure the bot.</param>
          <summary>
            Map the Bot Framework into the request execution pipeline.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Integration.AspNet.WebApi.HttpConfigurationExtensions" Member="M:Microsoft.Bot.Builder.Integration.AspNet.WebApi.HttpConfigurationExtensions.MapBotFramework(System.Web.Http.HttpConfiguration,System.Action{Microsoft.Bot.Builder.Integration.AspNet.WebApi.BotFrameworkConfigurationBuilder})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Internals.Fibers.IFiber`1" />
      </Targets>
      <Member MemberName="Call&lt;C,T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;C&gt; Call&lt;C,T&gt; (this Microsoft.Bot.Builder.Internals.Fibers.IFiber&lt;C&gt; fiber, Microsoft.Bot.Builder.Internals.Fibers.Rest&lt;C,T&gt; invokeHandler, T item);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Internals.Fibers.IWait`1&lt;!!C&gt; Call&lt;C, T&gt;(class Microsoft.Bot.Builder.Internals.Fibers.IFiber`1&lt;!!C&gt; fiber, class Microsoft.Bot.Builder.Internals.Fibers.Rest`2&lt;!!C, !!T&gt; invokeHandler, !!T item) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Call``2(Microsoft.Bot.Builder.Internals.Fibers.IFiber{``0},Microsoft.Bot.Builder.Internals.Fibers.Rest{``0,``1},``1)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Call(Of C, T) (fiber As IFiber(Of C), invokeHandler As Rest(Of C, T), item As T) As IWait(Of C)" />
        <MemberSignature Language="F#" Value="static member Call : Microsoft.Bot.Builder.Internals.Fibers.IFiber&lt;'C&gt; * Microsoft.Bot.Builder.Internals.Fibers.Rest&lt;'C, 'T&gt; * 'T -&gt; Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;'C&gt;" Usage="Microsoft.Bot.Builder.Internals.Fibers.Extensions.Call (fiber, invokeHandler, item)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;C&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="C" />
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="fiber" Type="Microsoft.Bot.Builder.Internals.Fibers.IFiber&lt;C&gt;" RefType="this" />
          <Parameter Name="invokeHandler" Type="Microsoft.Bot.Builder.Internals.Fibers.Rest&lt;C,T&gt;" />
          <Parameter Name="item" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="C">To be added.</typeparam>
          <typeparam name="T">To be added.</typeparam>
          <param name="fiber">To be added.</param>
          <param name="invokeHandler">To be added.</param>
          <param name="item">To be added.</param>
          <summary>
            Push a frame on the stack, schedule a wait, and immediately satisfy that wait.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Internals.Fibers.Extensions" Member="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Call``2(Microsoft.Bot.Builder.Internals.Fibers.IFiber{``0},Microsoft.Bot.Builder.Internals.Fibers.Rest{``0,``1},``1)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Internals.Fibers.IFiber`1" />
      </Targets>
      <Member MemberName="Call&lt;C,T,R&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;C&gt; Call&lt;C,T,R&gt; (this Microsoft.Bot.Builder.Internals.Fibers.IFiber&lt;C&gt; fiber, Microsoft.Bot.Builder.Internals.Fibers.Rest&lt;C,T&gt; invokeHandler, T item, Microsoft.Bot.Builder.Internals.Fibers.Rest&lt;C,R&gt; returnHandler);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Internals.Fibers.IWait`1&lt;!!C&gt; Call&lt;C, T, R&gt;(class Microsoft.Bot.Builder.Internals.Fibers.IFiber`1&lt;!!C&gt; fiber, class Microsoft.Bot.Builder.Internals.Fibers.Rest`2&lt;!!C, !!T&gt; invokeHandler, !!T item, class Microsoft.Bot.Builder.Internals.Fibers.Rest`2&lt;!!C, !!R&gt; returnHandler) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Call``3(Microsoft.Bot.Builder.Internals.Fibers.IFiber{``0},Microsoft.Bot.Builder.Internals.Fibers.Rest{``0,``1},``1,Microsoft.Bot.Builder.Internals.Fibers.Rest{``0,``2})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Call(Of C, T, R) (fiber As IFiber(Of C), invokeHandler As Rest(Of C, T), item As T, returnHandler As Rest(Of C, R)) As IWait(Of C)" />
        <MemberSignature Language="F#" Value="static member Call : Microsoft.Bot.Builder.Internals.Fibers.IFiber&lt;'C&gt; * Microsoft.Bot.Builder.Internals.Fibers.Rest&lt;'C, 'T&gt; * 'T * Microsoft.Bot.Builder.Internals.Fibers.Rest&lt;'C, 'R&gt; -&gt; Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;'C&gt;" Usage="Microsoft.Bot.Builder.Internals.Fibers.Extensions.Call (fiber, invokeHandler, item, returnHandler)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;C&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="C" />
          <TypeParameter Name="T" />
          <TypeParameter Name="R" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="fiber" Type="Microsoft.Bot.Builder.Internals.Fibers.IFiber&lt;C&gt;" RefType="this" />
          <Parameter Name="invokeHandler" Type="Microsoft.Bot.Builder.Internals.Fibers.Rest&lt;C,T&gt;" />
          <Parameter Name="item" Type="T" />
          <Parameter Name="returnHandler" Type="Microsoft.Bot.Builder.Internals.Fibers.Rest&lt;C,R&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="C">To be added.</typeparam>
          <typeparam name="T">To be added.</typeparam>
          <typeparam name="R">To be added.</typeparam>
          <param name="fiber">To be added.</param>
          <param name="invokeHandler">To be added.</param>
          <param name="item">To be added.</param>
          <param name="returnHandler">To be added.</param>
          <summary>
            Scheduled a wait for the return value, then invoke the <see cref="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Call``2(Microsoft.Bot.Builder.Internals.Fibers.IFiber{``0},Microsoft.Bot.Builder.Internals.Fibers.Rest{``0,``1},``1)" /> method.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Internals.Fibers.Extensions" Member="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Call``3(Microsoft.Bot.Builder.Internals.Fibers.IFiber{``0},Microsoft.Bot.Builder.Internals.Fibers.Rest{``0,``1},``1,Microsoft.Bot.Builder.Internals.Fibers.Rest{``0,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Internals.Fibers.IWait`1" />
      </Targets>
      <Member MemberName="CloneTyped&lt;C&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;C&gt; CloneTyped&lt;C&gt; (this Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;C&gt; wait);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Internals.Fibers.IWait`1&lt;!!C&gt; CloneTyped&lt;C&gt;(class Microsoft.Bot.Builder.Internals.Fibers.IWait`1&lt;!!C&gt; wait) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.CloneTyped``1(Microsoft.Bot.Builder.Internals.Fibers.IWait{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CloneTyped(Of C) (wait As IWait(Of C)) As IWait(Of C)" />
        <MemberSignature Language="F#" Value="static member CloneTyped : Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;'C&gt; -&gt; Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;'C&gt;" Usage="Microsoft.Bot.Builder.Internals.Fibers.Extensions.CloneTyped wait" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;C&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="C" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="wait" Type="Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;C&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="C">To be added.</typeparam>
          <param name="wait">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Internals.Fibers.Extensions" Member="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.CloneTyped``1(Microsoft.Bot.Builder.Internals.Fibers.IWait{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Internals.Fibers.IFiber`1" />
      </Targets>
      <Member MemberName="Done&lt;C,T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;C&gt; Done&lt;C,T&gt; (this Microsoft.Bot.Builder.Internals.Fibers.IFiber&lt;C&gt; fiber, T item);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Internals.Fibers.IWait`1&lt;!!C&gt; Done&lt;C, T&gt;(class Microsoft.Bot.Builder.Internals.Fibers.IFiber`1&lt;!!C&gt; fiber, !!T item) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Done``2(Microsoft.Bot.Builder.Internals.Fibers.IFiber{``0},``1)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Done(Of C, T) (fiber As IFiber(Of C), item As T) As IWait(Of C)" />
        <MemberSignature Language="F#" Value="static member Done : Microsoft.Bot.Builder.Internals.Fibers.IFiber&lt;'C&gt; * 'T -&gt; Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;'C&gt;" Usage="Microsoft.Bot.Builder.Internals.Fibers.Extensions.Done (fiber, item)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;C&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="C" />
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="fiber" Type="Microsoft.Bot.Builder.Internals.Fibers.IFiber&lt;C&gt;" RefType="this" />
          <Parameter Name="item" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="C">To be added.</typeparam>
          <typeparam name="T">To be added.</typeparam>
          <param name="fiber">To be added.</param>
          <param name="item">To be added.</param>
          <summary>
            Remove the frame from the stack, and satisfy the existing wait with the return value.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Internals.Fibers.Extensions" Member="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Done``2(Microsoft.Bot.Builder.Internals.Fibers.IFiber{``0},``1)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Internals.Fibers.Range`1" />
      </Targets>
      <Member MemberName="Enumerate">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;int&gt; Enumerate (this Microsoft.Bot.Builder.Internals.Fibers.Range&lt;int&gt; range);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;int32&gt; Enumerate(valuetype Microsoft.Bot.Builder.Internals.Fibers.Range`1&lt;int32&gt; range) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Enumerate(Microsoft.Bot.Builder.Internals.Fibers.Range{System.Int32})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Iterator Function Enumerate (range As Range(Of Integer)) As IEnumerable(Of Integer)" />
        <MemberSignature Language="F#" Value="static member Enumerate : Microsoft.Bot.Builder.Internals.Fibers.Range&lt;int&gt; -&gt; seq&lt;int&gt;" Usage="Microsoft.Bot.Builder.Internals.Fibers.Extensions.Enumerate range" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int32&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="range" Type="Microsoft.Bot.Builder.Internals.Fibers.Range&lt;System.Int32&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="range">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Internals.Fibers.Extensions" Member="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Enumerate(Microsoft.Bot.Builder.Internals.Fibers.Range{System.Int32})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IReadOnlyList`1" />
      </Targets>
      <Member MemberName="Equals&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static bool Equals&lt;T&gt; (this System.Collections.Generic.IReadOnlyList&lt;T&gt; one, System.Collections.Generic.IReadOnlyList&lt;T&gt; two, System.Collections.Generic.IEqualityComparer&lt;T&gt; comparer);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Equals&lt;T&gt;(class System.Collections.Generic.IReadOnlyList`1&lt;!!T&gt; one, class System.Collections.Generic.IReadOnlyList`1&lt;!!T&gt; two, class System.Collections.Generic.IEqualityComparer`1&lt;!!T&gt; comparer) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Equals``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IEqualityComparer{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Equals(Of T) (one As IReadOnlyList(Of T), two As IReadOnlyList(Of T), comparer As IEqualityComparer(Of T)) As Boolean" />
        <MemberSignature Language="F#" Value="static member Equals : System.Collections.Generic.IReadOnlyList&lt;'T&gt; * System.Collections.Generic.IReadOnlyList&lt;'T&gt; * System.Collections.Generic.IEqualityComparer&lt;'T&gt; -&gt; bool" Usage="Microsoft.Bot.Builder.Internals.Fibers.Extensions.Equals (one, two, comparer)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="one" Type="System.Collections.Generic.IReadOnlyList&lt;T&gt;" RefType="this" />
          <Parameter Name="two" Type="System.Collections.Generic.IReadOnlyList&lt;T&gt;" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="one">To be added.</param>
          <param name="two">To be added.</param>
          <param name="comparer">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Internals.Fibers.Extensions" Member="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Equals``1(System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IReadOnlyList{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Internals.Fibers.IFiber`1" />
      </Targets>
      <Member MemberName="Fail&lt;C&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;C&gt; Fail&lt;C&gt; (this Microsoft.Bot.Builder.Internals.Fibers.IFiber&lt;C&gt; fiber, Exception error);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Internals.Fibers.IWait`1&lt;!!C&gt; Fail&lt;C&gt;(class Microsoft.Bot.Builder.Internals.Fibers.IFiber`1&lt;!!C&gt; fiber, class System.Exception error) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Fail``1(Microsoft.Bot.Builder.Internals.Fibers.IFiber{``0},System.Exception)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Fail(Of C) (fiber As IFiber(Of C), error As Exception) As IWait(Of C)" />
        <MemberSignature Language="F#" Value="static member Fail : Microsoft.Bot.Builder.Internals.Fibers.IFiber&lt;'C&gt; * Exception -&gt; Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;'C&gt;" Usage="Microsoft.Bot.Builder.Internals.Fibers.Extensions.Fail (fiber, error)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;C&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="C" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="fiber" Type="Microsoft.Bot.Builder.Internals.Fibers.IFiber&lt;C&gt;" RefType="this" />
          <Parameter Name="error" Type="System.Exception" />
        </Parameters>
        <Docs>
          <typeparam name="C">To be added.</typeparam>
          <param name="fiber">To be added.</param>
          <param name="error">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Internals.Fibers.Extensions" Member="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Fail``1(Microsoft.Bot.Builder.Internals.Fibers.IFiber{``0},System.Exception)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IDictionary`2" />
      </Targets>
      <Member MemberName="GetOrAdd&lt;K,V&gt;">
        <MemberSignature Language="C#" Value="public static V GetOrAdd&lt;K,V&gt; (this System.Collections.Generic.IDictionary&lt;K,V&gt; valueByKey, K key, Func&lt;K,V&gt; make);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!V GetOrAdd&lt;K, V&gt;(class System.Collections.Generic.IDictionary`2&lt;!!K, !!V&gt; valueByKey, !!K key, class System.Func`2&lt;!!K, !!V&gt; make) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOrAdd(Of K, V) (valueByKey As IDictionary(Of K, V), key As K, make As Func(Of K, V)) As V" />
        <MemberSignature Language="F#" Value="static member GetOrAdd : System.Collections.Generic.IDictionary&lt;'K, 'V&gt; * 'K * Func&lt;'K, 'V&gt; -&gt; 'V" Usage="Microsoft.Bot.Builder.Internals.Fibers.Extensions.GetOrAdd (valueByKey, key, make)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>V</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="K" />
          <TypeParameter Name="V" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="valueByKey" Type="System.Collections.Generic.IDictionary&lt;K,V&gt;" RefType="this" />
          <Parameter Name="key" Type="K" />
          <Parameter Name="make" Type="System.Func&lt;K,V&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="K">To be added.</typeparam>
          <typeparam name="V">To be added.</typeparam>
          <param name="valueByKey">To be added.</param>
          <param name="key">To be added.</param>
          <param name="make">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Internals.Fibers.Extensions" Member="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Runtime.Serialization.SerializationInfo" />
      </Targets>
      <Member MemberName="GetValue&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T GetValue&lt;T&gt; (this System.Runtime.Serialization.SerializationInfo info, string name);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetValue&lt;T&gt;(class System.Runtime.Serialization.SerializationInfo info, string name) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.GetValue``1(System.Runtime.Serialization.SerializationInfo,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetValue(Of T) (info As SerializationInfo, name As String) As T" />
        <MemberSignature Language="F#" Value="static member GetValue : System.Runtime.Serialization.SerializationInfo * string -&gt; 'T" Usage="Microsoft.Bot.Builder.Internals.Fibers.Extensions.GetValue (info, name)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" RefType="this" />
          <Parameter Name="name" Type="System.String" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="info">To be added.</param>
          <param name="name">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Internals.Fibers.Extensions" Member="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.GetValue``1(System.Runtime.Serialization.SerializationInfo,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IReadOnlyList`1" />
      </Targets>
      <Member MemberName="Peek&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T Peek&lt;T&gt; (this System.Collections.Generic.IReadOnlyList&lt;T&gt; stack);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Peek&lt;T&gt;(class System.Collections.Generic.IReadOnlyList`1&lt;!!T&gt; stack) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Peek``1(System.Collections.Generic.IReadOnlyList{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Peek(Of T) (stack As IReadOnlyList(Of T)) As T" />
        <MemberSignature Language="F#" Value="static member Peek : System.Collections.Generic.IReadOnlyList&lt;'T&gt; -&gt; 'T" Usage="Microsoft.Bot.Builder.Internals.Fibers.Extensions.Peek stack" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="stack" Type="System.Collections.Generic.IReadOnlyList&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="stack">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Internals.Fibers.Extensions" Member="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Peek``1(System.Collections.Generic.IReadOnlyList{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.List`1" />
      </Targets>
      <Member MemberName="Pop&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static T Pop&lt;T&gt; (this System.Collections.Generic.List&lt;T&gt; stack);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Pop&lt;T&gt;(class System.Collections.Generic.List`1&lt;!!T&gt; stack) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Pop``1(System.Collections.Generic.List{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Pop(Of T) (stack As List(Of T)) As T" />
        <MemberSignature Language="F#" Value="static member Pop : System.Collections.Generic.List&lt;'T&gt; -&gt; 'T" Usage="Microsoft.Bot.Builder.Internals.Fibers.Extensions.Pop stack" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>T</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="stack" Type="System.Collections.Generic.List&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="stack">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Internals.Fibers.Extensions" Member="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Pop``1(System.Collections.Generic.List{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Internals.Fibers.IFiber`1" />
      </Targets>
      <Member MemberName="Post&lt;C,T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;C&gt; Post&lt;C,T&gt; (this Microsoft.Bot.Builder.Internals.Fibers.IFiber&lt;C&gt; fiber, T item);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Internals.Fibers.IWait`1&lt;!!C&gt; Post&lt;C, T&gt;(class Microsoft.Bot.Builder.Internals.Fibers.IFiber`1&lt;!!C&gt; fiber, !!T item) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Post``2(Microsoft.Bot.Builder.Internals.Fibers.IFiber{``0},``1)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Post(Of C, T) (fiber As IFiber(Of C), item As T) As IWait(Of C)" />
        <MemberSignature Language="F#" Value="static member Post : Microsoft.Bot.Builder.Internals.Fibers.IFiber&lt;'C&gt; * 'T -&gt; Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;'C&gt;" Usage="Microsoft.Bot.Builder.Internals.Fibers.Extensions.Post (fiber, item)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;C&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="C" />
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="fiber" Type="Microsoft.Bot.Builder.Internals.Fibers.IFiber&lt;C&gt;" RefType="this" />
          <Parameter Name="item" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="C">To be added.</typeparam>
          <typeparam name="T">To be added.</typeparam>
          <param name="fiber">To be added.</param>
          <param name="item">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Internals.Fibers.Extensions" Member="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Post``2(Microsoft.Bot.Builder.Internals.Fibers.IFiber{``0},``1)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IList`1" />
      </Targets>
      <Member MemberName="Push&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static void Push&lt;T&gt; (this System.Collections.Generic.IList&lt;T&gt; stack, T item);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Push&lt;T&gt;(class System.Collections.Generic.IList`1&lt;!!T&gt; stack, !!T item) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Push``1(System.Collections.Generic.IList{``0},``0)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Push(Of T) (stack As IList(Of T), item As T)" />
        <MemberSignature Language="F#" Value="static member Push : System.Collections.Generic.IList&lt;'T&gt; * 'T -&gt; unit" Usage="Microsoft.Bot.Builder.Internals.Fibers.Extensions.Push (stack, item)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="stack" Type="System.Collections.Generic.IList&lt;T&gt;" RefType="this" />
          <Parameter Name="item" Type="T" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="stack">To be added.</param>
          <param name="item">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Internals.Fibers.Extensions" Member="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Push``1(System.Collections.Generic.IList{``0},``0)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Internals.Fibers.IFiber`1" />
      </Targets>
      <Member MemberName="Reset&lt;C&gt;">
        <MemberSignature Language="C#" Value="public static void Reset&lt;C&gt; (this Microsoft.Bot.Builder.Internals.Fibers.IFiber&lt;C&gt; fiber);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Reset&lt;C&gt;(class Microsoft.Bot.Builder.Internals.Fibers.IFiber`1&lt;!!C&gt; fiber) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Reset``1(Microsoft.Bot.Builder.Internals.Fibers.IFiber{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Reset(Of C) (fiber As IFiber(Of C))" />
        <MemberSignature Language="F#" Value="static member Reset : Microsoft.Bot.Builder.Internals.Fibers.IFiber&lt;'C&gt; -&gt; unit" Usage="Microsoft.Bot.Builder.Internals.Fibers.Extensions.Reset fiber" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="C" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="fiber" Type="Microsoft.Bot.Builder.Internals.Fibers.IFiber&lt;C&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="C">To be added.</typeparam>
          <param name="fiber">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Internals.Fibers.Extensions" Member="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Reset``1(Microsoft.Bot.Builder.Internals.Fibers.IFiber{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="SortedMerge&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Internals.Fibers.Range&lt;T&gt;&gt; SortedMerge&lt;T&gt; (this System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Internals.Fibers.Range&lt;T&gt;&gt; oneItems, System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Internals.Fibers.Range&lt;T&gt;&gt; twoItems) where T : IEquatable&lt;T&gt;, IComparable&lt;T&gt;;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.Bot.Builder.Internals.Fibers.Range`1&lt;!!T&gt;&gt; SortedMerge&lt;(class System.IEquatable`1&lt;!!T&gt;, class System.IComparable`1&lt;!!T&gt;) T&gt;(class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.Bot.Builder.Internals.Fibers.Range`1&lt;!!T&gt;&gt; oneItems, class System.Collections.Generic.IEnumerable`1&lt;valuetype Microsoft.Bot.Builder.Internals.Fibers.Range`1&lt;!!T&gt;&gt; twoItems) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.SortedMerge``1(System.Collections.Generic.IEnumerable{Microsoft.Bot.Builder.Internals.Fibers.Range{``0}},System.Collections.Generic.IEnumerable{Microsoft.Bot.Builder.Internals.Fibers.Range{``0}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Iterator Function SortedMerge(Of T As {IEquatable(Of T), IComparable(Of T)}) (oneItems As IEnumerable(Of Range(Of T)), twoItems As IEnumerable(Of Range(Of T))) As IEnumerable(Of Range(Of T))" />
        <MemberSignature Language="F#" Value="static member SortedMerge : seq&lt;Microsoft.Bot.Builder.Internals.Fibers.Range&lt;'T&gt;&gt; * seq&lt;Microsoft.Bot.Builder.Internals.Fibers.Range&lt;'T&gt;&gt; -&gt; seq&lt;Microsoft.Bot.Builder.Internals.Fibers.Range&lt;'T&gt;&gt; (requires 'T :&gt; IEquatable&lt;'T&gt; and 'T :&gt; IComparable&lt;'T&gt;)" Usage="Microsoft.Bot.Builder.Internals.Fibers.Extensions.SortedMerge (oneItems, twoItems)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Internals.Fibers.Range&lt;T&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T">
            <Constraints>
              <InterfaceName>System.IEquatable&lt;T&gt;</InterfaceName>
              <InterfaceName>System.IComparable&lt;T&gt;</InterfaceName>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="oneItems" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Internals.Fibers.Range&lt;T&gt;&gt;" RefType="this" />
          <Parameter Name="twoItems" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Internals.Fibers.Range&lt;T&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="oneItems">To be added.</param>
          <param name="twoItems">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Internals.Fibers.Extensions" Member="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.SortedMerge``1(System.Collections.Generic.IEnumerable{Microsoft.Bot.Builder.Internals.Fibers.Range{``0}},System.Collections.Generic.IEnumerable{Microsoft.Bot.Builder.Internals.Fibers.Range{``0}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IReadOnlyList`1" />
      </Targets>
      <Member MemberName="ToList&lt;T,R&gt;">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;R&gt; ToList&lt;T,R&gt; (this System.Collections.Generic.IReadOnlyList&lt;T&gt; source, Func&lt;T,R&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;!!R&gt; ToList&lt;T, R&gt;(class System.Collections.Generic.IReadOnlyList`1&lt;!!T&gt; source, class System.Func`2&lt;!!T, !!R&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.ToList``2(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,``1})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToList(Of T, R) (source As IReadOnlyList(Of T), selector As Func(Of T, R)) As IReadOnlyList(Of R)" />
        <MemberSignature Language="F#" Value="static member ToList : System.Collections.Generic.IReadOnlyList&lt;'T&gt; * Func&lt;'T, 'R&gt; -&gt; System.Collections.Generic.IReadOnlyList&lt;'R&gt;" Usage="Microsoft.Bot.Builder.Internals.Fibers.Extensions.ToList (source, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IReadOnlyList&lt;R&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
          <TypeParameter Name="R" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="source" Type="System.Collections.Generic.IReadOnlyList&lt;T&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;T,R&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <typeparam name="R">To be added.</typeparam>
          <param name="source">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Internals.Fibers.Extensions" Member="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.ToList``2(System.Collections.Generic.IReadOnlyList{``0},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Dialogs.IAwaitable`1" />
      </Targets>
      <Member MemberName="ToTask&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;T&gt; ToTask&lt;T&gt; (this Microsoft.Bot.Builder.Dialogs.IAwaitable&lt;T&gt; item);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!T&gt; ToTask&lt;T&gt;(class Microsoft.Bot.Builder.Dialogs.IAwaitable`1&lt;!!T&gt; item) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.ToTask``1(Microsoft.Bot.Builder.Dialogs.IAwaitable{``0})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToTask(Of T) (item As IAwaitable(Of T)) As Task(Of T)" />
        <MemberSignature Language="F#" Value="static member ToTask : Microsoft.Bot.Builder.Dialogs.IAwaitable&lt;'T&gt; -&gt; System.Threading.Tasks.Task&lt;'T&gt;" Usage="Microsoft.Bot.Builder.Internals.Fibers.Extensions.ToTask item" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;T&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="item" Type="Microsoft.Bot.Builder.Dialogs.IAwaitable&lt;T&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="item">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Internals.Fibers.Extensions" Member="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.ToTask``1(Microsoft.Bot.Builder.Dialogs.IAwaitable{``0})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Internals.Fibers.IWait" />
      </Targets>
      <Member MemberName="ValidateNeed">
        <MemberSignature Language="C#" Value="public static void ValidateNeed (this Microsoft.Bot.Builder.Internals.Fibers.IWait wait, Microsoft.Bot.Builder.Internals.Fibers.Need need);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateNeed(class Microsoft.Bot.Builder.Internals.Fibers.IWait wait, valuetype Microsoft.Bot.Builder.Internals.Fibers.Need need) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.ValidateNeed(Microsoft.Bot.Builder.Internals.Fibers.IWait,Microsoft.Bot.Builder.Internals.Fibers.Need)" />
        <MemberSignature Language="F#" Value="static member ValidateNeed : Microsoft.Bot.Builder.Internals.Fibers.IWait * Microsoft.Bot.Builder.Internals.Fibers.Need -&gt; unit" Usage="Microsoft.Bot.Builder.Internals.Fibers.Extensions.ValidateNeed (wait, need)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="wait" Type="Microsoft.Bot.Builder.Internals.Fibers.IWait" RefType="this" />
          <Parameter Name="need" Type="Microsoft.Bot.Builder.Internals.Fibers.Need" />
        </Parameters>
        <Docs>
          <param name="wait">To be added.</param>
          <param name="need">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Internals.Fibers.Extensions" Member="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.ValidateNeed(Microsoft.Bot.Builder.Internals.Fibers.IWait,Microsoft.Bot.Builder.Internals.Fibers.Need)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Internals.Fibers.IFiber`1" />
      </Targets>
      <Member MemberName="Wait&lt;C,T&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;C&gt; Wait&lt;C,T&gt; (this Microsoft.Bot.Builder.Internals.Fibers.IFiber&lt;C&gt; fiber, Microsoft.Bot.Builder.Internals.Fibers.Rest&lt;C,T&gt; resumeHandler);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Internals.Fibers.IWait`1&lt;!!C&gt; Wait&lt;C, T&gt;(class Microsoft.Bot.Builder.Internals.Fibers.IFiber`1&lt;!!C&gt; fiber, class Microsoft.Bot.Builder.Internals.Fibers.Rest`2&lt;!!C, !!T&gt; resumeHandler) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Wait``2(Microsoft.Bot.Builder.Internals.Fibers.IFiber{``0},Microsoft.Bot.Builder.Internals.Fibers.Rest{``0,``1})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Wait(Of C, T) (fiber As IFiber(Of C), resumeHandler As Rest(Of C, T)) As IWait(Of C)" />
        <MemberSignature Language="F#" Value="static member Wait : Microsoft.Bot.Builder.Internals.Fibers.IFiber&lt;'C&gt; * Microsoft.Bot.Builder.Internals.Fibers.Rest&lt;'C, 'T&gt; -&gt; Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;'C&gt;" Usage="Microsoft.Bot.Builder.Internals.Fibers.Extensions.Wait (fiber, resumeHandler)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Internals.Fibers.IWait&lt;C&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="C" />
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="fiber" Type="Microsoft.Bot.Builder.Internals.Fibers.IFiber&lt;C&gt;" RefType="this" />
          <Parameter Name="resumeHandler" Type="Microsoft.Bot.Builder.Internals.Fibers.Rest&lt;C,T&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="C">To be added.</typeparam>
          <typeparam name="T">To be added.</typeparam>
          <param name="fiber">To be added.</param>
          <param name="resumeHandler">To be added.</param>
          <summary>
            Without pushing or popping the stack, schedule a wait to be satisfied later.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Internals.Fibers.Extensions" Member="M:Microsoft.Bot.Builder.Internals.Fibers.Extensions.Wait``2(Microsoft.Bot.Builder.Internals.Fibers.IFiber{``0},Microsoft.Bot.Builder.Internals.Fibers.Rest{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Luis.ILuisOptions" />
      </Targets>
      <Member MemberName="Apply">
        <MemberSignature Language="C#" Value="public static void Apply (this Microsoft.Bot.Builder.Luis.ILuisOptions source, Microsoft.Bot.Builder.Luis.ILuisOptions target);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Apply(class Microsoft.Bot.Builder.Luis.ILuisOptions source, class Microsoft.Bot.Builder.Luis.ILuisOptions target) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Luis.Extensions.Apply(Microsoft.Bot.Builder.Luis.ILuisOptions,Microsoft.Bot.Builder.Luis.ILuisOptions)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub Apply (source As ILuisOptions, target As ILuisOptions)" />
        <MemberSignature Language="F#" Value="static member Apply : Microsoft.Bot.Builder.Luis.ILuisOptions * Microsoft.Bot.Builder.Luis.ILuisOptions -&gt; unit" Usage="Microsoft.Bot.Builder.Luis.Extensions.Apply (source, target)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="source" Type="Microsoft.Bot.Builder.Luis.ILuisOptions" RefType="this" />
          <Parameter Name="target" Type="Microsoft.Bot.Builder.Luis.ILuisOptions" />
        </Parameters>
        <Docs>
          <param name="source">To be added.</param>
          <param name="target">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Luis.Extensions" Member="M:Microsoft.Bot.Builder.Luis.Extensions.Apply(Microsoft.Bot.Builder.Luis.ILuisOptions,Microsoft.Bot.Builder.Luis.ILuisOptions)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Luis.ILuisService" />
      </Targets>
      <Member MemberName="BuildUri">
        <MemberSignature Language="C#" Value="public static Uri BuildUri (this Microsoft.Bot.Builder.Luis.ILuisService service, string text);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Uri BuildUri(class Microsoft.Bot.Builder.Luis.ILuisService service, string text) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Luis.Extensions.BuildUri(Microsoft.Bot.Builder.Luis.ILuisService,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function BuildUri (service As ILuisService, text As String) As Uri" />
        <MemberSignature Language="F#" Value="static member BuildUri : Microsoft.Bot.Builder.Luis.ILuisService * string -&gt; Uri" Usage="Microsoft.Bot.Builder.Luis.Extensions.BuildUri (service, text)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Uri</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="service" Type="Microsoft.Bot.Builder.Luis.ILuisService" RefType="this" />
          <Parameter Name="text" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="service">LUIS service.</param>
          <param name="text">The query text.</param>
          <summary>
            Builds luis uri with text query.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Luis.Extensions" Member="M:Microsoft.Bot.Builder.Luis.Extensions.BuildUri(Microsoft.Bot.Builder.Luis.ILuisService,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Luis.BuiltIn.DateTime.DayPart" />
      </Targets>
      <Member MemberName="Next">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Luis.BuiltIn.DateTime.DayPart Next (this Microsoft.Bot.Builder.Luis.BuiltIn.DateTime.DayPart part);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Microsoft.Bot.Builder.Luis.BuiltIn/DateTime/DayPart Next(valuetype Microsoft.Bot.Builder.Luis.BuiltIn/DateTime/DayPart part) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Luis.Extensions.Next(Microsoft.Bot.Builder.Luis.BuiltIn.DateTime.DayPart)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Next (part As BuiltIn.DateTime.DayPart) As BuiltIn.DateTime.DayPart" />
        <MemberSignature Language="F#" Value="static member Next : Microsoft.Bot.Builder.Luis.BuiltIn.DateTime.DayPart -&gt; Microsoft.Bot.Builder.Luis.BuiltIn.DateTime.DayPart" Usage="Microsoft.Bot.Builder.Luis.Extensions.Next part" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Luis.BuiltIn+DateTime+DayPart</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="part" Type="Microsoft.Bot.Builder.Luis.BuiltIn+DateTime+DayPart" RefType="this" />
        </Parameters>
        <Docs>
          <param name="part">The <see cref="T:Microsoft.Bot.Builder.Luis.BuiltIn.DateTime.DayPart" /> query.</param>
          <summary>
            Return the next <see cref="T:Microsoft.Bot.Builder.Luis.BuiltIn.DateTime.DayPart" />. 
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Luis.Extensions" Member="M:Microsoft.Bot.Builder.Luis.Extensions.Next(Microsoft.Bot.Builder.Luis.BuiltIn.DateTime.DayPart)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Luis.IResolutionParser" />
      </Targets>
      <Member MemberName="ParseResolutions">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Luis.Resolution&gt; ParseResolutions (this Microsoft.Bot.Builder.Luis.IResolutionParser parser, System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Luis.Models.EntityRecommendation&gt; entities);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Bot.Builder.Luis.Resolution&gt; ParseResolutions(class Microsoft.Bot.Builder.Luis.IResolutionParser parser, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Bot.Builder.Luis.Models.EntityRecommendation&gt; entities) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Luis.Extensions.ParseResolutions(Microsoft.Bot.Builder.Luis.IResolutionParser,System.Collections.Generic.IEnumerable{Microsoft.Bot.Builder.Luis.Models.EntityRecommendation})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Iterator Function ParseResolutions (parser As IResolutionParser, entities As IEnumerable(Of EntityRecommendation)) As IEnumerable(Of Resolution)" />
        <MemberSignature Language="F#" Value="static member ParseResolutions : Microsoft.Bot.Builder.Luis.IResolutionParser * seq&lt;Microsoft.Bot.Builder.Luis.Models.EntityRecommendation&gt; -&gt; seq&lt;Microsoft.Bot.Builder.Luis.Resolution&gt;" Usage="Microsoft.Bot.Builder.Luis.Extensions.ParseResolutions (parser, entities)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Luis.Resolution&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="parser" Type="Microsoft.Bot.Builder.Luis.IResolutionParser" RefType="this" />
          <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Luis.Models.EntityRecommendation&gt;" />
        </Parameters>
        <Docs>
          <param name="parser">The resolution parser.</param>
          <param name="entities">The LUIS entities.</param>
          <summary>
            Parse all resolutions from a LUIS result.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Luis.Extensions" Member="M:Microsoft.Bot.Builder.Luis.Extensions.ParseResolutions(Microsoft.Bot.Builder.Luis.IResolutionParser,System.Collections.Generic.IEnumerable{Microsoft.Bot.Builder.Luis.Models.EntityRecommendation})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Luis.ILuisService" />
      </Targets>
      <Member MemberName="QueryAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Luis.Models.LuisResult&gt; QueryAsync (this Microsoft.Bot.Builder.Luis.ILuisService service, Microsoft.Bot.Builder.Luis.LuisRequest request, System.Threading.CancellationToken token);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Builder.Luis.Models.LuisResult&gt; QueryAsync(class Microsoft.Bot.Builder.Luis.ILuisService service, class Microsoft.Bot.Builder.Luis.LuisRequest request, valuetype System.Threading.CancellationToken token) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Luis.Extensions.QueryAsync(Microsoft.Bot.Builder.Luis.ILuisService,Microsoft.Bot.Builder.Luis.LuisRequest,System.Threading.CancellationToken)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function QueryAsync (service As ILuisService, request As LuisRequest, token As CancellationToken) As Task(Of LuisResult)" />
        <MemberSignature Language="F#" Value="static member QueryAsync : Microsoft.Bot.Builder.Luis.ILuisService * Microsoft.Bot.Builder.Luis.LuisRequest * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Luis.Models.LuisResult&gt;" Usage="Microsoft.Bot.Builder.Luis.Extensions.QueryAsync (service, request, token)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Luis.Models.LuisResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="service" Type="Microsoft.Bot.Builder.Luis.ILuisService" RefType="this" />
          <Parameter Name="request" Type="Microsoft.Bot.Builder.Luis.LuisRequest" />
          <Parameter Name="token" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="service">LUIS service.</param>
          <param name="request">Query request.</param>
          <param name="token">Cancellation token.</param>
          <summary>
            Query the LUIS service using this request.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Luis.Extensions" Member="M:Microsoft.Bot.Builder.Luis.Extensions.QueryAsync(Microsoft.Bot.Builder.Luis.ILuisService,Microsoft.Bot.Builder.Luis.LuisRequest,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Luis.ILuisService" />
      </Targets>
      <Member MemberName="QueryAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Luis.Models.LuisResult&gt; QueryAsync (this Microsoft.Bot.Builder.Luis.ILuisService service, string text, System.Threading.CancellationToken token);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Builder.Luis.Models.LuisResult&gt; QueryAsync(class Microsoft.Bot.Builder.Luis.ILuisService service, string text, valuetype System.Threading.CancellationToken token) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Luis.Extensions.QueryAsync(Microsoft.Bot.Builder.Luis.ILuisService,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function QueryAsync (service As ILuisService, text As String, token As CancellationToken) As Task(Of LuisResult)" />
        <MemberSignature Language="F#" Value="static member QueryAsync : Microsoft.Bot.Builder.Luis.ILuisService * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Luis.Models.LuisResult&gt;" Usage="Microsoft.Bot.Builder.Luis.Extensions.QueryAsync (service, text, token)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Luis.Models.LuisResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="service" Type="Microsoft.Bot.Builder.Luis.ILuisService" RefType="this" />
          <Parameter Name="text" Type="System.String" />
          <Parameter Name="token" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="service">LUIS service.</param>
          <param name="text">The query text.</param>
          <param name="token">The cancellation token.</param>
          <summary>
            Query the LUIS service using this text.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Luis.Extensions" Member="M:Microsoft.Bot.Builder.Luis.Extensions.QueryAsync(Microsoft.Bot.Builder.Luis.ILuisService,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Luis.Models.LuisResult" />
      </Targets>
      <Member MemberName="TryFindEntity">
        <MemberSignature Language="C#" Value="public static bool TryFindEntity (this Microsoft.Bot.Builder.Luis.Models.LuisResult result, string type, out Microsoft.Bot.Builder.Luis.Models.EntityRecommendation entity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryFindEntity(class Microsoft.Bot.Builder.Luis.Models.LuisResult result, string type, [out] class Microsoft.Bot.Builder.Luis.Models.EntityRecommendation&amp; entity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Luis.Extensions.TryFindEntity(Microsoft.Bot.Builder.Luis.Models.LuisResult,System.String,Microsoft.Bot.Builder.Luis.Models.EntityRecommendation@)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryFindEntity (result As LuisResult, type As String, ByRef entity As EntityRecommendation) As Boolean" />
        <MemberSignature Language="F#" Value="static member TryFindEntity : Microsoft.Bot.Builder.Luis.Models.LuisResult * string *  -&gt; bool" Usage="Microsoft.Bot.Builder.Luis.Extensions.TryFindEntity (result, type, entity)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="result" Type="Microsoft.Bot.Builder.Luis.Models.LuisResult" RefType="this" />
          <Parameter Name="type" Type="System.String" />
          <Parameter Name="entity" Type="Microsoft.Bot.Builder.Luis.Models.EntityRecommendation" RefType="out" />
        </Parameters>
        <Docs>
          <param name="result">The LUIS result.</param>
          <param name="type">The entity type.</param>
          <param name="entity">The found entity.</param>
          <summary>
            Try to find an entity within the result.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Luis.Extensions" Member="M:Microsoft.Bot.Builder.Luis.Extensions.TryFindEntity(Microsoft.Bot.Builder.Luis.Models.LuisResult,System.String,Microsoft.Bot.Builder.Luis.Models.EntityRecommendation@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.RecognizerResult" />
      </Targets>
      <Member MemberName="GetTopScoringIntent">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;string,double&gt; GetTopScoringIntent (this Microsoft.Bot.Builder.RecognizerResult result);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`2&lt;string, float64&gt; GetTopScoringIntent(class Microsoft.Bot.Builder.RecognizerResult result) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.RecognizerResultExtensions.GetTopScoringIntent(Microsoft.Bot.Builder.RecognizerResult)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetTopScoringIntent (result As RecognizerResult) As ValueTuple(Of String, Double)" />
        <MemberSignature Language="F#" Value="static member GetTopScoringIntent : Microsoft.Bot.Builder.RecognizerResult -&gt; ValueTuple&lt;string, double&gt;" Usage="Microsoft.Bot.Builder.RecognizerResultExtensions.GetTopScoringIntent result" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;System.String,System.Double&gt;</ReturnType>
          <Attributes>
            <Attribute FrameworkAlternate="botbuilder-dotnet-stable">
              <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "intent", "score" })</AttributeName>
            </Attribute>
          </Attributes>
        </ReturnValue>
        <Parameters>
          <Parameter Name="result" Type="Microsoft.Bot.Builder.RecognizerResult" RefType="this" />
        </Parameters>
        <Docs>
          <param name="result">Recognizer result.</param>
          <summary>
            Return the top scoring intent and its score.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.RecognizerResultExtensions" Member="M:Microsoft.Bot.Builder.RecognizerResultExtensions.GetTopScoringIntent(Microsoft.Bot.Builder.RecognizerResult)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="SplitList">
        <MemberSignature Language="C#" Value="public static string[] SplitList (this string str, string separator = &quot;;&quot;, string escape = &quot;__semi&quot;);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] SplitList(string str, string separator, string escape) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Resource.Extensions.SplitList(System.String,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SplitList (str As String, Optional separator As String = &quot;;&quot;, Optional escape As String = &quot;__semi&quot;) As String()" />
        <MemberSignature Language="F#" Value="static member SplitList : string * string * string -&gt; string[]" Usage="Microsoft.Bot.Builder.Resource.Extensions.SplitList (str, separator, escape)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String[]</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="str" Type="System.String" RefType="this" />
          <Parameter Name="separator" Type="System.String" />
          <Parameter Name="escape" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="str">          The str to act on. </param>
          <param name="separator">    The separator character between elements in a string list. </param>
          <param name="escape">       The escape string for separator characters. </param>
          <summary>   A string extension method that splits a list. </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Resource.Extensions" Member="M:Microsoft.Bot.Builder.Resource.Extensions.SplitList(System.String,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Scorables.IScorable`2" />
      </Targets>
      <Member MemberName="Normalize">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,double&gt; Normalize (this Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Microsoft.Bot.Builder.Luis.Models.IntentRecommendation&gt; scorable);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;class Microsoft.Bot.Builder.Scorables.Internals.IResolver, float64&gt; Normalize(class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;class Microsoft.Bot.Builder.Scorables.Internals.IResolver, class Microsoft.Bot.Builder.Luis.Models.IntentRecommendation&gt; scorable) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Scorables.Actions.Normalize(Microsoft.Bot.Builder.Scorables.IScorable{Microsoft.Bot.Builder.Scorables.Internals.IResolver,Microsoft.Bot.Builder.Luis.Models.IntentRecommendation})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Normalize (scorable As IScorable(Of IResolver, IntentRecommendation)) As IScorable(Of IResolver, Double)" />
        <MemberSignature Language="F#" Value="static member Normalize : Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver, Microsoft.Bot.Builder.Luis.Models.IntentRecommendation&gt; -&gt; Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver, double&gt;" Usage="Microsoft.Bot.Builder.Scorables.Actions.Normalize scorable" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="scorable" Type="Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Microsoft.Bot.Builder.Luis.Models.IntentRecommendation&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="scorable">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Scorables.Actions" Member="M:Microsoft.Bot.Builder.Scorables.Actions.Normalize(Microsoft.Bot.Builder.Scorables.IScorable{Microsoft.Bot.Builder.Scorables.Internals.IResolver,Microsoft.Bot.Builder.Luis.Models.IntentRecommendation})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Scorables.IScorable`2" />
      </Targets>
      <Member MemberName="Normalize">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,double&gt; Normalize (this Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Microsoft.Bot.Builder.Scorables.Internals.IBinding&gt; scorable);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;class Microsoft.Bot.Builder.Scorables.Internals.IResolver, float64&gt; Normalize(class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;class Microsoft.Bot.Builder.Scorables.Internals.IResolver, class Microsoft.Bot.Builder.Scorables.Internals.IBinding&gt; scorable) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Scorables.Actions.Normalize(Microsoft.Bot.Builder.Scorables.IScorable{Microsoft.Bot.Builder.Scorables.Internals.IResolver,Microsoft.Bot.Builder.Scorables.Internals.IBinding})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Normalize (scorable As IScorable(Of IResolver, IBinding)) As IScorable(Of IResolver, Double)" />
        <MemberSignature Language="F#" Value="static member Normalize : Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver, Microsoft.Bot.Builder.Scorables.Internals.IBinding&gt; -&gt; Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver, double&gt;" Usage="Microsoft.Bot.Builder.Scorables.Actions.Normalize scorable" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="scorable" Type="Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Microsoft.Bot.Builder.Scorables.Internals.IBinding&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="scorable">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Scorables.Actions" Member="M:Microsoft.Bot.Builder.Scorables.Actions.Normalize(Microsoft.Bot.Builder.Scorables.IScorable{Microsoft.Bot.Builder.Scorables.Internals.IResolver,Microsoft.Bot.Builder.Scorables.Internals.IBinding})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Scorables.IScorable`2" />
      </Targets>
      <Member MemberName="Normalize">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,double&gt; Normalize (this Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,System.Text.RegularExpressions.Match&gt; scorable);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;class Microsoft.Bot.Builder.Scorables.Internals.IResolver, float64&gt; Normalize(class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;class Microsoft.Bot.Builder.Scorables.Internals.IResolver, class System.Text.RegularExpressions.Match&gt; scorable) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Scorables.Actions.Normalize(Microsoft.Bot.Builder.Scorables.IScorable{Microsoft.Bot.Builder.Scorables.Internals.IResolver,System.Text.RegularExpressions.Match})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Normalize (scorable As IScorable(Of IResolver, Match)) As IScorable(Of IResolver, Double)" />
        <MemberSignature Language="F#" Value="static member Normalize : Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver, System.Text.RegularExpressions.Match&gt; -&gt; Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver, double&gt;" Usage="Microsoft.Bot.Builder.Scorables.Actions.Normalize scorable" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,System.Double&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="scorable" Type="Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,System.Text.RegularExpressions.Match&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <param name="scorable">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Scorables.Actions" Member="M:Microsoft.Bot.Builder.Scorables.Actions.Normalize(Microsoft.Bot.Builder.Scorables.IScorable{Microsoft.Bot.Builder.Scorables.Internals.IResolver,System.Text.RegularExpressions.Match})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Scorables.IScorable`2" />
      </Targets>
      <Member MemberName="When&lt;InnerScore&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Microsoft.Bot.Builder.Luis.Models.IntentRecommendation&gt; When&lt;InnerScore&gt; (this Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,InnerScore&gt; scorable, Microsoft.Bot.Builder.Luis.ILuisModel model, Microsoft.Bot.Builder.Dialogs.LuisIntentAttribute intent, Microsoft.Bot.Builder.Luis.ILuisService service = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;class Microsoft.Bot.Builder.Scorables.Internals.IResolver, class Microsoft.Bot.Builder.Luis.Models.IntentRecommendation&gt; When&lt;InnerScore&gt;(class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;class Microsoft.Bot.Builder.Scorables.Internals.IResolver, !!InnerScore&gt; scorable, class Microsoft.Bot.Builder.Luis.ILuisModel model, class Microsoft.Bot.Builder.Dialogs.LuisIntentAttribute intent, class Microsoft.Bot.Builder.Luis.ILuisService service) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Scorables.Actions.When``1(Microsoft.Bot.Builder.Scorables.IScorable{Microsoft.Bot.Builder.Scorables.Internals.IResolver,``0},Microsoft.Bot.Builder.Luis.ILuisModel,Microsoft.Bot.Builder.Dialogs.LuisIntentAttribute,Microsoft.Bot.Builder.Luis.ILuisService)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function When(Of InnerScore) (scorable As IScorable(Of IResolver, InnerScore), model As ILuisModel, intent As LuisIntentAttribute, Optional service As ILuisService = null) As IScorable(Of IResolver, IntentRecommendation)" />
        <MemberSignature Language="F#" Value="static member When : Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver, 'InnerScore&gt; * Microsoft.Bot.Builder.Luis.ILuisModel * Microsoft.Bot.Builder.Dialogs.LuisIntentAttribute * Microsoft.Bot.Builder.Luis.ILuisService -&gt; Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver, Microsoft.Bot.Builder.Luis.Models.IntentRecommendation&gt;" Usage="Microsoft.Bot.Builder.Scorables.Actions.When (scorable, model, intent, service)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Microsoft.Bot.Builder.Luis.Models.IntentRecommendation&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="InnerScore" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="scorable" Type="Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,InnerScore&gt;" RefType="this" />
          <Parameter Name="model" Type="Microsoft.Bot.Builder.Luis.ILuisModel" />
          <Parameter Name="intent" Type="Microsoft.Bot.Builder.Dialogs.LuisIntentAttribute" />
          <Parameter Name="service" Type="Microsoft.Bot.Builder.Luis.ILuisService" />
        </Parameters>
        <Docs>
          <typeparam name="InnerScore">To be added.</typeparam>
          <param name="scorable">To be added.</param>
          <param name="model">To be added.</param>
          <param name="intent">To be added.</param>
          <param name="service">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Scorables.Actions" Member="M:Microsoft.Bot.Builder.Scorables.Actions.When``1(Microsoft.Bot.Builder.Scorables.IScorable{Microsoft.Bot.Builder.Scorables.Internals.IResolver,``0},Microsoft.Bot.Builder.Luis.ILuisModel,Microsoft.Bot.Builder.Dialogs.LuisIntentAttribute,Microsoft.Bot.Builder.Luis.ILuisService)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Scorables.IScorable`2" />
      </Targets>
      <Member MemberName="When&lt;InnerScore&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,System.Text.RegularExpressions.Match&gt; When&lt;InnerScore&gt; (this Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,InnerScore&gt; scorable, System.Text.RegularExpressions.Regex regex);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;class Microsoft.Bot.Builder.Scorables.Internals.IResolver, class System.Text.RegularExpressions.Match&gt; When&lt;InnerScore&gt;(class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;class Microsoft.Bot.Builder.Scorables.Internals.IResolver, !!InnerScore&gt; scorable, class System.Text.RegularExpressions.Regex regex) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Scorables.Actions.When``1(Microsoft.Bot.Builder.Scorables.IScorable{Microsoft.Bot.Builder.Scorables.Internals.IResolver,``0},System.Text.RegularExpressions.Regex)" />
        <MemberSignature Language="F#" Value="static member When : Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver, 'InnerScore&gt; * System.Text.RegularExpressions.Regex -&gt; Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver, System.Text.RegularExpressions.Match&gt;" Usage="Microsoft.Bot.Builder.Scorables.Actions.When (scorable, regex)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,System.Text.RegularExpressions.Match&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="InnerScore" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="scorable" Type="Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,InnerScore&gt;" RefType="this" />
          <Parameter Name="regex" Type="System.Text.RegularExpressions.Regex" />
        </Parameters>
        <Docs>
          <typeparam name="InnerScore">To be added.</typeparam>
          <param name="scorable">To be added.</param>
          <param name="regex">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Scorables.Actions" Member="M:Microsoft.Bot.Builder.Scorables.Actions.When``1(Microsoft.Bot.Builder.Scorables.IScorable{Microsoft.Bot.Builder.Scorables.Internals.IResolver,``0},System.Text.RegularExpressions.Regex)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Scorables.IScorable`2" />
      </Targets>
      <Member MemberName="Where&lt;Score,T1&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt; Where&lt;Score,T1&gt; (this Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt; scorable, Func&lt;T1,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;class Microsoft.Bot.Builder.Scorables.Internals.IResolver, !!Score&gt; Where&lt;Score, T1&gt;(class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;class Microsoft.Bot.Builder.Scorables.Internals.IResolver, !!Score&gt; scorable, class System.Func`2&lt;!!T1, bool&gt; predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Scorables.Actions.Where``2(Microsoft.Bot.Builder.Scorables.IScorable{Microsoft.Bot.Builder.Scorables.Internals.IResolver,``0},System.Func{``1,System.Boolean})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of Score, T1) (scorable As IScorable(Of IResolver, Score), predicate As Func(Of T1, Boolean)) As IScorable(Of IResolver, Score)" />
        <MemberSignature Language="F#" Value="static member Where : Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver, 'Score&gt; * Func&lt;'T1, bool&gt; -&gt; Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver, 'Score&gt;" Usage="Microsoft.Bot.Builder.Scorables.Actions.Where (scorable, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="Score" />
          <TypeParameter Name="T1" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="scorable" Type="Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;T1,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="Score">To be added.</typeparam>
          <typeparam name="T1">To be added.</typeparam>
          <param name="scorable">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Scorables.Actions" Member="M:Microsoft.Bot.Builder.Scorables.Actions.Where``2(Microsoft.Bot.Builder.Scorables.IScorable{Microsoft.Bot.Builder.Scorables.Internals.IResolver,``0},System.Func{``1,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Scorables.IScorable`2" />
      </Targets>
      <Member MemberName="Where&lt;Score,T1&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt; Where&lt;Score,T1&gt; (this Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt; scorable, Func&lt;T1,System.Threading.Tasks.Task&lt;bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;class Microsoft.Bot.Builder.Scorables.Internals.IResolver, !!Score&gt; Where&lt;Score, T1&gt;(class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;class Microsoft.Bot.Builder.Scorables.Internals.IResolver, !!Score&gt; scorable, class System.Func`2&lt;!!T1, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Scorables.Actions.Where``2(Microsoft.Bot.Builder.Scorables.IScorable{Microsoft.Bot.Builder.Scorables.Internals.IResolver,``0},System.Func{``1,System.Threading.Tasks.Task{System.Boolean}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of Score, T1) (scorable As IScorable(Of IResolver, Score), predicate As Func(Of T1, Task(Of Boolean))) As IScorable(Of IResolver, Score)" />
        <MemberSignature Language="F#" Value="static member Where : Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver, 'Score&gt; * Func&lt;'T1, System.Threading.Tasks.Task&lt;bool&gt;&gt; -&gt; Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver, 'Score&gt;" Usage="Microsoft.Bot.Builder.Scorables.Actions.Where (scorable, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="Score" />
          <TypeParameter Name="T1" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="scorable" Type="Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;T1,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="Score">To be added.</typeparam>
          <typeparam name="T1">To be added.</typeparam>
          <param name="scorable">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Scorables.Actions" Member="M:Microsoft.Bot.Builder.Scorables.Actions.Where``2(Microsoft.Bot.Builder.Scorables.IScorable{Microsoft.Bot.Builder.Scorables.Internals.IResolver,``0},System.Func{``1,System.Threading.Tasks.Task{System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Scorables.IScorable`2" />
      </Targets>
      <Member MemberName="Where&lt;Score,T1,T2&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt; Where&lt;Score,T1,T2&gt; (this Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt; scorable, Func&lt;T1,T2,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;class Microsoft.Bot.Builder.Scorables.Internals.IResolver, !!Score&gt; Where&lt;Score, T1, T2&gt;(class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;class Microsoft.Bot.Builder.Scorables.Internals.IResolver, !!Score&gt; scorable, class System.Func`3&lt;!!T1, !!T2, bool&gt; predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Scorables.Actions.Where``3(Microsoft.Bot.Builder.Scorables.IScorable{Microsoft.Bot.Builder.Scorables.Internals.IResolver,``0},System.Func{``1,``2,System.Boolean})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of Score, T1, T2) (scorable As IScorable(Of IResolver, Score), predicate As Func(Of T1, T2, Boolean)) As IScorable(Of IResolver, Score)" />
        <MemberSignature Language="F#" Value="static member Where : Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver, 'Score&gt; * Func&lt;'T1, 'T2, bool&gt; -&gt; Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver, 'Score&gt;" Usage="Microsoft.Bot.Builder.Scorables.Actions.Where (scorable, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="Score" />
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="scorable" Type="Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;T1,T2,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="Score">To be added.</typeparam>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <param name="scorable">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Scorables.Actions" Member="M:Microsoft.Bot.Builder.Scorables.Actions.Where``3(Microsoft.Bot.Builder.Scorables.IScorable{Microsoft.Bot.Builder.Scorables.Internals.IResolver,``0},System.Func{``1,``2,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Scorables.IScorable`2" />
      </Targets>
      <Member MemberName="Where&lt;Score,T1,T2&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt; Where&lt;Score,T1,T2&gt; (this Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt; scorable, Func&lt;T1,T2,System.Threading.Tasks.Task&lt;bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;class Microsoft.Bot.Builder.Scorables.Internals.IResolver, !!Score&gt; Where&lt;Score, T1, T2&gt;(class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;class Microsoft.Bot.Builder.Scorables.Internals.IResolver, !!Score&gt; scorable, class System.Func`3&lt;!!T1, !!T2, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Scorables.Actions.Where``3(Microsoft.Bot.Builder.Scorables.IScorable{Microsoft.Bot.Builder.Scorables.Internals.IResolver,``0},System.Func{``1,``2,System.Threading.Tasks.Task{System.Boolean}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of Score, T1, T2) (scorable As IScorable(Of IResolver, Score), predicate As Func(Of T1, T2, Task(Of Boolean))) As IScorable(Of IResolver, Score)" />
        <MemberSignature Language="F#" Value="static member Where : Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver, 'Score&gt; * Func&lt;'T1, 'T2, System.Threading.Tasks.Task&lt;bool&gt;&gt; -&gt; Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver, 'Score&gt;" Usage="Microsoft.Bot.Builder.Scorables.Actions.Where (scorable, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="Score" />
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="scorable" Type="Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;T1,T2,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="Score">To be added.</typeparam>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <param name="scorable">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Scorables.Actions" Member="M:Microsoft.Bot.Builder.Scorables.Actions.Where``3(Microsoft.Bot.Builder.Scorables.IScorable{Microsoft.Bot.Builder.Scorables.Internals.IResolver,``0},System.Func{``1,``2,System.Threading.Tasks.Task{System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Scorables.IScorable`2" />
      </Targets>
      <Member MemberName="Where&lt;Score,T1,T2,T3&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt; Where&lt;Score,T1,T2,T3&gt; (this Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt; scorable, Func&lt;T1,T2,T3,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;class Microsoft.Bot.Builder.Scorables.Internals.IResolver, !!Score&gt; Where&lt;Score, T1, T2, T3&gt;(class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;class Microsoft.Bot.Builder.Scorables.Internals.IResolver, !!Score&gt; scorable, class System.Func`4&lt;!!T1, !!T2, !!T3, bool&gt; predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Scorables.Actions.Where``4(Microsoft.Bot.Builder.Scorables.IScorable{Microsoft.Bot.Builder.Scorables.Internals.IResolver,``0},System.Func{``1,``2,``3,System.Boolean})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of Score, T1, T2, T3) (scorable As IScorable(Of IResolver, Score), predicate As Func(Of T1, T2, T3, Boolean)) As IScorable(Of IResolver, Score)" />
        <MemberSignature Language="F#" Value="static member Where : Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver, 'Score&gt; * Func&lt;'T1, 'T2, 'T3, bool&gt; -&gt; Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver, 'Score&gt;" Usage="Microsoft.Bot.Builder.Scorables.Actions.Where (scorable, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="Score" />
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="scorable" Type="Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;T1,T2,T3,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="Score">To be added.</typeparam>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <param name="scorable">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Scorables.Actions" Member="M:Microsoft.Bot.Builder.Scorables.Actions.Where``4(Microsoft.Bot.Builder.Scorables.IScorable{Microsoft.Bot.Builder.Scorables.Internals.IResolver,``0},System.Func{``1,``2,``3,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Scorables.IScorable`2" />
      </Targets>
      <Member MemberName="Where&lt;Score,T1,T2,T3&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt; Where&lt;Score,T1,T2,T3&gt; (this Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt; scorable, Func&lt;T1,T2,T3,System.Threading.Tasks.Task&lt;bool&gt;&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;class Microsoft.Bot.Builder.Scorables.Internals.IResolver, !!Score&gt; Where&lt;Score, T1, T2, T3&gt;(class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;class Microsoft.Bot.Builder.Scorables.Internals.IResolver, !!Score&gt; scorable, class System.Func`4&lt;!!T1, !!T2, !!T3, class System.Threading.Tasks.Task`1&lt;bool&gt;&gt; predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Scorables.Actions.Where``4(Microsoft.Bot.Builder.Scorables.IScorable{Microsoft.Bot.Builder.Scorables.Internals.IResolver,``0},System.Func{``1,``2,``3,System.Threading.Tasks.Task{System.Boolean}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of Score, T1, T2, T3) (scorable As IScorable(Of IResolver, Score), predicate As Func(Of T1, T2, T3, Task(Of Boolean))) As IScorable(Of IResolver, Score)" />
        <MemberSignature Language="F#" Value="static member Where : Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver, 'Score&gt; * Func&lt;'T1, 'T2, 'T3, System.Threading.Tasks.Task&lt;bool&gt;&gt; -&gt; Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver, 'Score&gt;" Usage="Microsoft.Bot.Builder.Scorables.Actions.Where (scorable, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="Score" />
          <TypeParameter Name="T1" />
          <TypeParameter Name="T2" />
          <TypeParameter Name="T3" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="scorable" Type="Microsoft.Bot.Builder.Scorables.IScorable&lt;Microsoft.Bot.Builder.Scorables.Internals.IResolver,Score&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;T1,T2,T3,System.Threading.Tasks.Task&lt;System.Boolean&gt;&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="Score">To be added.</typeparam>
          <typeparam name="T1">To be added.</typeparam>
          <typeparam name="T2">To be added.</typeparam>
          <typeparam name="T3">To be added.</typeparam>
          <param name="scorable">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Scorables.Actions" Member="M:Microsoft.Bot.Builder.Scorables.Actions.Where``4(Microsoft.Bot.Builder.Scorables.IScorable{Microsoft.Bot.Builder.Scorables.Internals.IResolver,``0},System.Func{``1,``2,``3,System.Threading.Tasks.Task{System.Boolean}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.MethodBase" />
      </Targets>
      <Member MemberName="CachedParameters">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;System.Reflection.ParameterInfo&gt; CachedParameters (this System.Reflection.MethodBase method);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;class System.Reflection.ParameterInfo&gt; CachedParameters(class System.Reflection.MethodBase method) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Scorables.Internals.Extensions.CachedParameters(System.Reflection.MethodBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CachedParameters (method As MethodBase) As IReadOnlyList(Of ParameterInfo)" />
        <MemberSignature Language="F#" Value="static member CachedParameters : System.Reflection.MethodBase -&gt; System.Collections.Generic.IReadOnlyList&lt;System.Reflection.ParameterInfo&gt;" Usage="Microsoft.Bot.Builder.Scorables.Internals.Extensions.CachedParameters method" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Reflection.ParameterInfo&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="method" Type="System.Reflection.MethodBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="method">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Scorables.Internals.Extensions" Member="M:Microsoft.Bot.Builder.Scorables.Internals.Extensions.CachedParameters(System.Reflection.MethodBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Reflection.MethodBase" />
      </Targets>
      <Member MemberName="CachedParameterTypes">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IReadOnlyList&lt;Type&gt; CachedParameterTypes (this System.Reflection.MethodBase method);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IReadOnlyList`1&lt;class System.Type&gt; CachedParameterTypes(class System.Reflection.MethodBase method) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Scorables.Internals.Extensions.CachedParameterTypes(System.Reflection.MethodBase)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CachedParameterTypes (method As MethodBase) As IReadOnlyList(Of Type)" />
        <MemberSignature Language="F#" Value="static member CachedParameterTypes : System.Reflection.MethodBase -&gt; System.Collections.Generic.IReadOnlyList&lt;Type&gt;" Usage="Microsoft.Bot.Builder.Scorables.Internals.Extensions.CachedParameterTypes method" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IReadOnlyList&lt;System.Type&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="method" Type="System.Reflection.MethodBase" RefType="this" />
        </Parameters>
        <Docs>
          <param name="method">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Scorables.Internals.Extensions" Member="M:Microsoft.Bot.Builder.Scorables.Internals.Extensions.CachedParameterTypes(System.Reflection.MethodBase)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Scorables.Internals.IResolver" />
      </Targets>
      <Member MemberName="CanResolve">
        <MemberSignature Language="C#" Value="public static bool CanResolve (this Microsoft.Bot.Builder.Scorables.Internals.IResolver resolver, Type type, object tag);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanResolve(class Microsoft.Bot.Builder.Scorables.Internals.IResolver resolver, class System.Type type, object tag) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Scorables.Internals.Extensions.CanResolve(Microsoft.Bot.Builder.Scorables.Internals.IResolver,System.Type,System.Object)" />
        <MemberSignature Language="F#" Value="static member CanResolve : Microsoft.Bot.Builder.Scorables.Internals.IResolver * Type * obj -&gt; bool" Usage="Microsoft.Bot.Builder.Scorables.Internals.Extensions.CanResolve (resolver, type, tag)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="resolver" Type="Microsoft.Bot.Builder.Scorables.Internals.IResolver" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
          <Parameter Name="tag" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="resolver">To be added.</param>
          <param name="type">To be added.</param>
          <param name="tag">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Scorables.Internals.Extensions" Member="M:Microsoft.Bot.Builder.Scorables.Internals.Extensions.CanResolve(Microsoft.Bot.Builder.Scorables.Internals.IResolver,System.Type,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Scorables.Internals.IResolver" />
      </Targets>
      <Member MemberName="Resolve">
        <MemberSignature Language="C#" Value="public static object Resolve (this Microsoft.Bot.Builder.Scorables.Internals.IResolver resolver, Type type, object tag);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Resolve(class Microsoft.Bot.Builder.Scorables.Internals.IResolver resolver, class System.Type type, object tag) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Scorables.Internals.Extensions.Resolve(Microsoft.Bot.Builder.Scorables.Internals.IResolver,System.Type,System.Object)" />
        <MemberSignature Language="F#" Value="static member Resolve : Microsoft.Bot.Builder.Scorables.Internals.IResolver * Type * obj -&gt; obj" Usage="Microsoft.Bot.Builder.Scorables.Internals.Extensions.Resolve (resolver, type, tag)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Object</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="resolver" Type="Microsoft.Bot.Builder.Scorables.Internals.IResolver" RefType="this" />
          <Parameter Name="type" Type="System.Type" />
          <Parameter Name="tag" Type="System.Object" />
        </Parameters>
        <Docs>
          <param name="resolver">To be added.</param>
          <param name="type">To be added.</param>
          <param name="tag">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Scorables.Internals.Extensions" Member="M:Microsoft.Bot.Builder.Scorables.Internals.Extensions.Resolve(Microsoft.Bot.Builder.Scorables.Internals.IResolver,System.Type,System.Object)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Scorables.Internals.IResolver" />
      </Targets>
      <Member MemberName="TryResolve&lt;T&gt;">
        <MemberSignature Language="C#" Value="public static bool TryResolve&lt;T&gt; (this Microsoft.Bot.Builder.Scorables.Internals.IResolver resolver, object tag, out T value);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryResolve&lt;T&gt;(class Microsoft.Bot.Builder.Scorables.Internals.IResolver resolver, object tag, [out] !!T&amp; value) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Scorables.Internals.Extensions.TryResolve``1(Microsoft.Bot.Builder.Scorables.Internals.IResolver,System.Object,``0@)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryResolve(Of T) (resolver As IResolver, tag As Object, ByRef value As T) As Boolean" />
        <MemberSignature Language="F#" Value="static member TryResolve : Microsoft.Bot.Builder.Scorables.Internals.IResolver * obj *  -&gt; bool" Usage="Microsoft.Bot.Builder.Scorables.Internals.Extensions.TryResolve (resolver, tag, value)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="T" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="resolver" Type="Microsoft.Bot.Builder.Scorables.Internals.IResolver" RefType="this" />
          <Parameter Name="tag" Type="System.Object" />
          <Parameter Name="value" Type="T" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="T">To be added.</typeparam>
          <param name="resolver">To be added.</param>
          <param name="tag">To be added.</param>
          <param name="value">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Scorables.Internals.Extensions" Member="M:Microsoft.Bot.Builder.Scorables.Internals.Extensions.TryResolve``1(Microsoft.Bot.Builder.Scorables.Internals.IResolver,System.Object,``0@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="First&lt;Item,Score&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Scorables.IScorable&lt;Item,Score&gt; First&lt;Item,Score&gt; (this System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Scorables.IScorable&lt;Item,Score&gt;&gt; scorables);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;!!Item, !!Score&gt; First&lt;Item, Score&gt;(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;!!Item, !!Score&gt;&gt; scorables) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Scorables.Scorable.First``2(System.Collections.Generic.IEnumerable{Microsoft.Bot.Builder.Scorables.IScorable{``0,``1}})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function First(Of Item, Score) (scorables As IEnumerable(Of IScorable(Of Item, Score))) As IScorable(Of Item, Score)" />
        <MemberSignature Language="F#" Value="static member First : seq&lt;Microsoft.Bot.Builder.Scorables.IScorable&lt;'Item, 'Score&gt;&gt; -&gt; Microsoft.Bot.Builder.Scorables.IScorable&lt;'Item, 'Score&gt;" Usage="Microsoft.Bot.Builder.Scorables.Scorable.First scorables" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Scorables.IScorable&lt;Item,Score&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="Item" />
          <TypeParameter Name="Score" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="scorables" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Scorables.IScorable&lt;Item,Score&gt;&gt;" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="Item">To be added.</typeparam>
          <typeparam name="Score">To be added.</typeparam>
          <param name="scorables">To be added.</param>
          <summary>
            Select the first scorable that produces a score.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Scorables.Scorable" Member="M:Microsoft.Bot.Builder.Scorables.Scorable.First``2(System.Collections.Generic.IEnumerable{Microsoft.Bot.Builder.Scorables.IScorable{``0,``1}})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Collections.Generic.IEnumerable`1" />
      </Targets>
      <Member MemberName="Fold&lt;Item,Score&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Scorables.IScorable&lt;Item,Score&gt; Fold&lt;Item,Score&gt; (this System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Scorables.IScorable&lt;Item,Score&gt;&gt; scorables, System.Collections.Generic.IComparer&lt;Score&gt; comparer = null, Microsoft.Bot.Builder.Scorables.Internals.FoldScorable&lt;Item,Score&gt;.OnStageDelegate onStage = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;!!Item, !!Score&gt; Fold&lt;Item, Score&gt;(class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;!!Item, !!Score&gt;&gt; scorables, class System.Collections.Generic.IComparer`1&lt;!!Score&gt; comparer, class Microsoft.Bot.Builder.Scorables.Internals.FoldScorable`2/OnStageDelegate&lt;!!Item, !!Score&gt; onStage) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Scorables.Scorable.Fold``2(System.Collections.Generic.IEnumerable{Microsoft.Bot.Builder.Scorables.IScorable{``0,``1}},System.Collections.Generic.IComparer{``1},Microsoft.Bot.Builder.Scorables.Internals.FoldScorable`2.OnStageDelegate{``0,``1})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Fold(Of Item, Score) (scorables As IEnumerable(Of IScorable(Of Item, Score)), Optional comparer As IComparer(Of Score) = null, Optional onStage As FoldScorable(Of Item, Score).OnStageDelegate = null) As IScorable(Of Item, Score)" />
        <MemberSignature Language="F#" Value="static member Fold : seq&lt;Microsoft.Bot.Builder.Scorables.IScorable&lt;'Item, 'Score&gt;&gt; * System.Collections.Generic.IComparer&lt;'Score&gt; * Microsoft.Bot.Builder.Scorables.Internals.FoldScorable&lt;'Item, 'Score&gt;.OnStageDelegate -&gt; Microsoft.Bot.Builder.Scorables.IScorable&lt;'Item, 'Score&gt;" Usage="Microsoft.Bot.Builder.Scorables.Scorable.Fold (scorables, comparer, onStage)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Scorables.IScorable&lt;Item,Score&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="Item" />
          <TypeParameter Name="Score" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="scorables" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Builder.Scorables.IScorable&lt;Item,Score&gt;&gt;" RefType="this" />
          <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;Score&gt;" />
          <Parameter Name="onStage" Type="Microsoft.Bot.Builder.Scorables.Internals.FoldScorable&lt;Item,Score&gt;+OnStageDelegate" />
        </Parameters>
        <Docs>
          <typeparam name="Item">To be added.</typeparam>
          <typeparam name="Score">To be added.</typeparam>
          <param name="scorables">To be added.</param>
          <param name="comparer">To be added.</param>
          <param name="onStage">To be added.</param>
          <summary>
            Fold an enumeration of scorables using a score comparer.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Scorables.Scorable" Member="M:Microsoft.Bot.Builder.Scorables.Scorable.Fold``2(System.Collections.Generic.IEnumerable{Microsoft.Bot.Builder.Scorables.IScorable{``0,``1}},System.Collections.Generic.IComparer{``1},Microsoft.Bot.Builder.Scorables.Internals.FoldScorable{``0,``1}.OnStageDelegate)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Scorables.IScorable`2" />
      </Targets>
      <Member MemberName="SelectItem&lt;SourceItem,TargetItem,Score&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Scorables.IScorable&lt;SourceItem,Score&gt; SelectItem&lt;SourceItem,TargetItem,Score&gt; (this Microsoft.Bot.Builder.Scorables.IScorable&lt;TargetItem,Score&gt; scorable, Func&lt;SourceItem,TargetItem&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;!!SourceItem, !!Score&gt; SelectItem&lt;SourceItem, TargetItem, Score&gt;(class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;!!TargetItem, !!Score&gt; scorable, class System.Func`2&lt;!!SourceItem, !!TargetItem&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Scorables.Scorable.SelectItem``3(Microsoft.Bot.Builder.Scorables.IScorable{``1,``2},System.Func{``0,``1})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectItem(Of SourceItem, TargetItem, Score) (scorable As IScorable(Of TargetItem, Score), selector As Func(Of SourceItem, TargetItem)) As IScorable(Of SourceItem, Score)" />
        <MemberSignature Language="F#" Value="static member SelectItem : Microsoft.Bot.Builder.Scorables.IScorable&lt;'argetItem, 'Score&gt; * Func&lt;'SourceItem, 'argetItem&gt; -&gt; Microsoft.Bot.Builder.Scorables.IScorable&lt;'SourceItem, 'Score&gt;" Usage="Microsoft.Bot.Builder.Scorables.Scorable.SelectItem (scorable, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Scorables.IScorable&lt;SourceItem,Score&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="SourceItem" />
          <TypeParameter Name="TargetItem" />
          <TypeParameter Name="Score" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="scorable" Type="Microsoft.Bot.Builder.Scorables.IScorable&lt;TargetItem,Score&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;SourceItem,TargetItem&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="SourceItem">To be added.</typeparam>
          <typeparam name="TargetItem">To be added.</typeparam>
          <typeparam name="Score">To be added.</typeparam>
          <param name="scorable">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>
            Project the item of a scorable using a lambda expression.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Scorables.Scorable" Member="M:Microsoft.Bot.Builder.Scorables.Scorable.SelectItem``3(Microsoft.Bot.Builder.Scorables.IScorable{``1,``2},System.Func{``0,``1})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Scorables.IScorable`2" />
      </Targets>
      <Member MemberName="SelectScore&lt;Item,SourceScore,TargetScore&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Scorables.IScorable&lt;Item,TargetScore&gt; SelectScore&lt;Item,SourceScore,TargetScore&gt; (this Microsoft.Bot.Builder.Scorables.IScorable&lt;Item,SourceScore&gt; scorable, Func&lt;Item,SourceScore,TargetScore&gt; selector);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;!!Item, !!TargetScore&gt; SelectScore&lt;Item, SourceScore, TargetScore&gt;(class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;!!Item, !!SourceScore&gt; scorable, class System.Func`3&lt;!!Item, !!SourceScore, !!TargetScore&gt; selector) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Scorables.Scorable.SelectScore``3(Microsoft.Bot.Builder.Scorables.IScorable{``0,``1},System.Func{``0,``1,``2})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectScore(Of Item, SourceScore, TargetScore) (scorable As IScorable(Of Item, SourceScore), selector As Func(Of Item, SourceScore, TargetScore)) As IScorable(Of Item, TargetScore)" />
        <MemberSignature Language="F#" Value="static member SelectScore : Microsoft.Bot.Builder.Scorables.IScorable&lt;'Item, 'SourceScore&gt; * Func&lt;'Item, 'SourceScore, 'argetScore&gt; -&gt; Microsoft.Bot.Builder.Scorables.IScorable&lt;'Item, 'argetScore&gt;" Usage="Microsoft.Bot.Builder.Scorables.Scorable.SelectScore (scorable, selector)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Scorables.IScorable&lt;Item,TargetScore&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="Item" />
          <TypeParameter Name="SourceScore" />
          <TypeParameter Name="TargetScore" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="scorable" Type="Microsoft.Bot.Builder.Scorables.IScorable&lt;Item,SourceScore&gt;" RefType="this" />
          <Parameter Name="selector" Type="System.Func&lt;Item,SourceScore,TargetScore&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="Item">To be added.</typeparam>
          <typeparam name="SourceScore">To be added.</typeparam>
          <typeparam name="TargetScore">To be added.</typeparam>
          <param name="scorable">To be added.</param>
          <param name="selector">To be added.</param>
          <summary>
            Project the score of a scorable using a lambda expression.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Scorables.Scorable" Member="M:Microsoft.Bot.Builder.Scorables.Scorable.SelectScore``3(Microsoft.Bot.Builder.Scorables.IScorable{``0,``1},System.Func{``0,``1,``2})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Scorables.IScorable`2" />
      </Targets>
      <Member MemberName="TryPostAsync&lt;Item,Score&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; TryPostAsync&lt;Item,Score&gt; (this Microsoft.Bot.Builder.Scorables.IScorable&lt;Item,Score&gt; scorable, Item item, System.Threading.CancellationToken token);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; TryPostAsync&lt;Item, Score&gt;(class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;!!Item, !!Score&gt; scorable, !!Item item, valuetype System.Threading.CancellationToken token) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Scorables.Scorable.TryPostAsync``2(Microsoft.Bot.Builder.Scorables.IScorable{``0,``1},``0,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member TryPostAsync : Microsoft.Bot.Builder.Scorables.IScorable&lt;'Item, 'Score&gt; * 'Item * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="Microsoft.Bot.Builder.Scorables.Scorable.TryPostAsync (scorable, item, token)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="Item" />
          <TypeParameter Name="Score" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="scorable" Type="Microsoft.Bot.Builder.Scorables.IScorable&lt;Item,Score&gt;" RefType="this" />
          <Parameter Name="item" Type="Item" />
          <Parameter Name="token" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="Item">To be added.</typeparam>
          <typeparam name="Score">To be added.</typeparam>
          <param name="scorable">To be added.</param>
          <param name="item">To be added.</param>
          <param name="token">To be added.</param>
          <summary>
            Invoke the scorable calling protocol against a single scorable.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Scorables.Scorable" Member="M:Microsoft.Bot.Builder.Scorables.Scorable.TryPostAsync``2(Microsoft.Bot.Builder.Scorables.IScorable{``0,``1},``0,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.Scorables.IScorable`2" />
      </Targets>
      <Member MemberName="WhereScore&lt;Item,Score&gt;">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Builder.Scorables.IScorable&lt;Item,Score&gt; WhereScore&lt;Item,Score&gt; (this Microsoft.Bot.Builder.Scorables.IScorable&lt;Item,Score&gt; scorable, Func&lt;Item,Score,bool&gt; predicate);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;!!Item, !!Score&gt; WhereScore&lt;Item, Score&gt;(class Microsoft.Bot.Builder.Scorables.IScorable`2&lt;!!Item, !!Score&gt; scorable, class System.Func`3&lt;!!Item, !!Score, bool&gt; predicate) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.Scorables.Scorable.WhereScore``2(Microsoft.Bot.Builder.Scorables.IScorable{``0,``1},System.Func{``0,``1,System.Boolean})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WhereScore(Of Item, Score) (scorable As IScorable(Of Item, Score), predicate As Func(Of Item, Score, Boolean)) As IScorable(Of Item, Score)" />
        <MemberSignature Language="F#" Value="static member WhereScore : Microsoft.Bot.Builder.Scorables.IScorable&lt;'Item, 'Score&gt; * Func&lt;'Item, 'Score, bool&gt; -&gt; Microsoft.Bot.Builder.Scorables.IScorable&lt;'Item, 'Score&gt;" Usage="Microsoft.Bot.Builder.Scorables.Scorable.WhereScore (scorable, predicate)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Builder.Scorables.IScorable&lt;Item,Score&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="Item" />
          <TypeParameter Name="Score" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="scorable" Type="Microsoft.Bot.Builder.Scorables.IScorable&lt;Item,Score&gt;" RefType="this" />
          <Parameter Name="predicate" Type="System.Func&lt;Item,Score,System.Boolean&gt;" />
        </Parameters>
        <Docs>
          <typeparam name="Item">To be added.</typeparam>
          <typeparam name="Score">To be added.</typeparam>
          <param name="scorable">To be added.</param>
          <param name="predicate">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.Scorables.Scorable" Member="M:Microsoft.Bot.Builder.Scorables.Scorable.WhereScore``2(Microsoft.Bot.Builder.Scorables.IScorable{``0,``1},System.Func{``0,``1,System.Boolean})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.IStorage" />
      </Targets>
      <Member MemberName="ReadAsync&lt;TStoreItem&gt;">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.IDictionary&lt;string,TStoreItem&gt;&gt; ReadAsync&lt;TStoreItem&gt; (this Microsoft.Bot.Builder.IStorage storage, string[] keys, System.Threading.CancellationToken cancellationToken = null) where TStoreItem : class;" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IDictionary`2&lt;string, !!TStoreItem&gt;&gt; ReadAsync&lt;class TStoreItem&gt;(class Microsoft.Bot.Builder.IStorage storage, string[] keys, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.StorageExtensions.ReadAsync``1(Microsoft.Bot.Builder.IStorage,System.String[],System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ReadAsync : Microsoft.Bot.Builder.IStorage * string[] * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IDictionary&lt;string, 'StoreItem&gt;&gt; (requires 'StoreItem : null)" Usage="Microsoft.Bot.Builder.StorageExtensions.ReadAsync (storage, keys, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IDictionary&lt;System.String,TStoreItem&gt;&gt;</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TStoreItem">
            <Constraints>
              <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            </Constraints>
          </TypeParameter>
        </TypeParameters>
        <Parameters>
          <Parameter Name="storage" Type="Microsoft.Bot.Builder.IStorage" RefType="this" />
          <Parameter Name="keys" Type="System.String[]" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <typeparam name="TStoreItem">The type of item to get from storage.</typeparam>
          <param name="storage">The state storage.</param>
          <param name="keys">The collection of keys for the objects to get from storage.</param>
          <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
          <summary>
            Gets and strongly types a collection of <see cref="T:Microsoft.Bot.Builder.IStoreItem" /> objects from state storage.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.StorageExtensions" Member="M:Microsoft.Bot.Builder.StorageExtensions.ReadAsync``1(Microsoft.Bot.Builder.IStorage,System.String[],System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Builder.ITurnContext" />
      </Targets>
      <Member MemberName="TraceActivityAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt; TraceActivityAsync (this Microsoft.Bot.Builder.ITurnContext turnContext, string name, object value = null, string valueType = null, string label = null, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Schema.ResourceResponse&gt; TraceActivityAsync(class Microsoft.Bot.Builder.ITurnContext turnContext, string name, object value, string valueType, string label, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Builder.TraceExtensions.ITurnContextExtensions.TraceActivityAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Object,System.String,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member TraceActivityAsync : Microsoft.Bot.Builder.ITurnContext * string * obj * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt;" Usage="Microsoft.Bot.Builder.TraceExtensions.ITurnContextExtensions.TraceActivityAsync (turnContext, name, value, valueType, label, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="turnContext" Type="Microsoft.Bot.Builder.ITurnContext" RefType="this" />
          <Parameter Name="name" Type="System.String" />
          <Parameter Name="value" Type="System.Object" />
          <Parameter Name="valueType" Type="System.String" />
          <Parameter Name="label" Type="System.String">
            <Attributes>
              <Attribute>
                <AttributeName>System.Runtime.CompilerServices.CallerMemberName</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="turnContext">The context for the current turn.</param>
          <param name="name">The value to assign to the activity's <see cref="P:Microsoft.Bot.Schema.Activity.Name" /> property.</param>
          <param name="value">The value to assign to the activity's <see cref="P:Microsoft.Bot.Schema.Activity.Value" /> property.</param>
          <param name="valueType">The value to assign to the activity's <see cref="P:Microsoft.Bot.Schema.Activity.ValueType" /> property.</param>
          <param name="label">The value to assign to the activity's <see cref="P:Microsoft.Bot.Schema.Activity.Label" /> property.</param>
          <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
          <summary>
            Sends a trace activity to the <see cref="T:Microsoft.Bot.Builder.BotAdapter" /> for logging purposes.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Builder.TraceExtensions.ITurnContextExtensions" Member="M:Microsoft.Bot.Builder.TraceExtensions.ITurnContextExtensions.TraceActivityAsync(Microsoft.Bot.Builder.ITurnContext,System.String,System.Object,System.String,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Configuration.BotConfiguration" />
      </Targets>
      <Member MemberName="IsProjectNameSpaceless">
        <MemberSignature Language="C#" Value="public static bool IsProjectNameSpaceless (this Microsoft.Bot.Configuration.BotConfiguration botConfiguration, string folder);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsProjectNameSpaceless(class Microsoft.Bot.Configuration.BotConfiguration botConfiguration, string folder) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Configuration.BotConfigurationExtensions.IsProjectNameSpaceless(Microsoft.Bot.Configuration.BotConfiguration,System.String)" />
        <MemberSignature Language="F#" Value="static member IsProjectNameSpaceless : Microsoft.Bot.Configuration.BotConfiguration * string -&gt; bool" Usage="Microsoft.Bot.Configuration.BotConfigurationExtensions.IsProjectNameSpaceless (botConfiguration, folder)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="botConfiguration" Type="Microsoft.Bot.Configuration.BotConfiguration" RefType="this" />
          <Parameter Name="folder" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="botConfiguration">BotConfiguration object to extend.</param>
          <param name="folder">Folder's path to validate.</param>
          <summary>
            Check if the Project's Name contains white spaces.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Configuration.BotConfigurationExtensions" Member="M:Microsoft.Bot.Configuration.BotConfigurationExtensions.IsProjectNameSpaceless(Microsoft.Bot.Configuration.BotConfiguration,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Configuration.BotConfiguration" />
      </Targets>
      <Member MemberName="ValidateLuisKeyExistence">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;bool,string&gt; ValidateLuisKeyExistence (this Microsoft.Bot.Configuration.BotConfiguration botConfiguration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`2&lt;bool, string&gt; ValidateLuisKeyExistence(class Microsoft.Bot.Configuration.BotConfiguration botConfiguration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Configuration.BotConfigurationExtensions.ValidateLuisKeyExistence(Microsoft.Bot.Configuration.BotConfiguration)" />
        <MemberSignature Language="F#" Value="static member ValidateLuisKeyExistence : Microsoft.Bot.Configuration.BotConfiguration -&gt; ValueTuple&lt;bool, string&gt;" Usage="Microsoft.Bot.Configuration.BotConfigurationExtensions.ValidateLuisKeyExistence botConfiguration" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;System.Boolean,System.String&gt;</ReturnType>
          <Attributes>
            <Attribute FrameworkAlternate="botbuilder-dotnet-stable">
              <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "IsValid", "ErrMsg" })</AttributeName>
            </Attribute>
          </Attributes>
        </ReturnValue>
        <Parameters>
          <Parameter Name="botConfiguration" Type="Microsoft.Bot.Configuration.BotConfiguration" RefType="this" />
        </Parameters>
        <Docs>
          <param name="botConfiguration">BotConfiguration object to extend.</param>
          <summary>
            Checks if the <see cref="T:Microsoft.Bot.Configuration.LuisService" /> has its key defined.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Configuration.BotConfigurationExtensions" Member="M:Microsoft.Bot.Configuration.BotConfigurationExtensions.ValidateLuisKeyExistence(Microsoft.Bot.Configuration.BotConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Configuration.BotConfiguration" />
      </Targets>
      <Member MemberName="ValidateQnAKeyExistence">
        <MemberSignature Language="C#" Value="public static ValueTuple&lt;bool,string&gt; ValidateQnAKeyExistence (this Microsoft.Bot.Configuration.BotConfiguration botConfiguration);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ValueTuple`2&lt;bool, string&gt; ValidateQnAKeyExistence(class Microsoft.Bot.Configuration.BotConfiguration botConfiguration) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Configuration.BotConfigurationExtensions.ValidateQnAKeyExistence(Microsoft.Bot.Configuration.BotConfiguration)" />
        <MemberSignature Language="F#" Value="static member ValidateQnAKeyExistence : Microsoft.Bot.Configuration.BotConfiguration -&gt; ValueTuple&lt;bool, string&gt;" Usage="Microsoft.Bot.Configuration.BotConfigurationExtensions.ValidateQnAKeyExistence botConfiguration" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.ValueTuple&lt;System.Boolean,System.String&gt;</ReturnType>
          <Attributes>
            <Attribute FrameworkAlternate="botbuilder-dotnet-stable">
              <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "IsValid", "ErrMsg" })</AttributeName>
            </Attribute>
          </Attributes>
        </ReturnValue>
        <Parameters>
          <Parameter Name="botConfiguration" Type="Microsoft.Bot.Configuration.BotConfiguration" RefType="this" />
        </Parameters>
        <Docs>
          <param name="botConfiguration">BotConfiguration object to extend.</param>
          <summary>
            Checks if the <see cref="T:Microsoft.Bot.Configuration.QnAMakerService" /> has its key defined.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Configuration.BotConfigurationExtensions" Member="M:Microsoft.Bot.Configuration.BotConfigurationExtensions.ValidateQnAKeyExistence(Microsoft.Bot.Configuration.BotConfiguration)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="Decrypt">
        <MemberSignature Language="C#" Value="public static string Decrypt (this string encryptedText, string key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Decrypt(string encryptedText, string key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Configuration.Encryption.EncryptUtilities.Decrypt(System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Decrypt (encryptedText As String, key As String) As String" />
        <MemberSignature Language="F#" Value="static member Decrypt : string * string -&gt; string" Usage="Microsoft.Bot.Configuration.Encryption.EncryptUtilities.Decrypt (encryptedText, key)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="encryptedText" Type="System.String" RefType="this" />
          <Parameter Name="key" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="encryptedText">The base64-encrypted string.</param>
          <param name="key">The key to use for decryption.</param>
          <summary>
            Decrypts a string.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Configuration.Encryption.EncryptUtilities" Member="M:Microsoft.Bot.Configuration.Encryption.EncryptUtilities.Decrypt(System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.String" />
      </Targets>
      <Member MemberName="Encrypt">
        <MemberSignature Language="C#" Value="public static string Encrypt (this string plainText, string key);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Encrypt(string plainText, string key) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Configuration.Encryption.EncryptUtilities.Encrypt(System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Encrypt (plainText As String, key As String) As String" />
        <MemberSignature Language="F#" Value="static member Encrypt : string * string -&gt; string" Usage="Microsoft.Bot.Configuration.Encryption.EncryptUtilities.Encrypt (plainText, key)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="plainText" Type="System.String" RefType="this" />
          <Parameter Name="key" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="plainText">The string to encrypt.</param>
          <param name="key">The key to use for encryption.</param>
          <summary>
            Encrypts a string.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Configuration.Encryption.EncryptUtilities" Member="M:Microsoft.Bot.Configuration.Encryption.EncryptUtilities.Encrypt(System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IActivity" />
      </Targets>
      <Member MemberName="CreateOAuthReplyAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.Activity&gt; CreateOAuthReplyAsync (this Microsoft.Bot.Connector.IActivity activity, string connectionName, string text, string buttonLabel, bool asSignInCard = false);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.Activity&gt; CreateOAuthReplyAsync(class Microsoft.Bot.Connector.IActivity activity, string connectionName, string text, string buttonLabel, bool asSignInCard) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ActivityExtensions.CreateOAuthReplyAsync(Microsoft.Bot.Connector.IActivity,System.String,System.String,System.String,System.Boolean)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateOAuthReplyAsync (activity As IActivity, connectionName As String, text As String, buttonLabel As String, Optional asSignInCard As Boolean = false) As Task(Of Activity)" />
        <MemberSignature Language="F#" Value="static member CreateOAuthReplyAsync : Microsoft.Bot.Connector.IActivity * string * string * string * bool -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.Activity&gt;" Usage="Microsoft.Bot.Connector.ActivityExtensions.CreateOAuthReplyAsync (activity, connectionName, text, buttonLabel, asSignInCard)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.Activity&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.IActivity" RefType="this" />
          <Parameter Name="connectionName" Type="System.String" />
          <Parameter Name="text" Type="System.String" />
          <Parameter Name="buttonLabel" Type="System.String" />
          <Parameter Name="asSignInCard" Type="System.Boolean" />
        </Parameters>
        <Docs>
          <param name="activity">To be added.</param>
          <param name="connectionName">To be added.</param>
          <param name="text">To be added.</param>
          <param name="buttonLabel">To be added.</param>
          <param name="asSignInCard">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ActivityExtensions" Member="M:Microsoft.Bot.Connector.ActivityExtensions.CreateOAuthReplyAsync(Microsoft.Bot.Connector.IActivity,System.String,System.String,System.String,System.Boolean)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IActivity" />
      </Targets>
      <Member MemberName="GetActivityType">
        <MemberSignature Language="C#" Value="public static string GetActivityType (this Microsoft.Bot.Connector.IActivity activity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetActivityType(class Microsoft.Bot.Connector.IActivity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ActivityExtensions.GetActivityType(Microsoft.Bot.Connector.IActivity)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetActivityType (activity As IActivity) As String" />
        <MemberSignature Language="F#" Value="static member GetActivityType : Microsoft.Bot.Connector.IActivity -&gt; string" Usage="Microsoft.Bot.Connector.ActivityExtensions.GetActivityType activity" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.IActivity" RefType="this" />
        </Parameters>
        <Docs>
          <param name="activity">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ActivityExtensions" Member="M:Microsoft.Bot.Connector.ActivityExtensions.GetActivityType(Microsoft.Bot.Connector.IActivity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IActivity" />
      </Targets>
      <Member MemberName="GetChannelData&lt;TypeT&gt;">
        <MemberSignature Language="C#" Value="public static TypeT GetChannelData&lt;TypeT&gt; (this Microsoft.Bot.Connector.IActivity activity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TypeT GetChannelData&lt;TypeT&gt;(class Microsoft.Bot.Connector.IActivity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ActivityExtensions.GetChannelData``1(Microsoft.Bot.Connector.IActivity)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetChannelData(Of TypeT) (activity As IActivity) As TypeT" />
        <MemberSignature Language="F#" Value="static member GetChannelData : Microsoft.Bot.Connector.IActivity -&gt; 'ypeT" Usage="Microsoft.Bot.Connector.ActivityExtensions.GetChannelData activity" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>TypeT</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TypeT" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.IActivity" RefType="this" />
        </Parameters>
        <Docs>
          <typeparam name="TypeT">To be added.</typeparam>
          <param name="activity">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ActivityExtensions" Member="M:Microsoft.Bot.Connector.ActivityExtensions.GetChannelData``1(Microsoft.Bot.Connector.IActivity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IActivity" />
      </Targets>
      <Member MemberName="GetOAuthClient">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.OAuthClient GetOAuthClient (this Microsoft.Bot.Connector.IActivity activity, Microsoft.Bot.Connector.MicrosoftAppCredentials credentials, string serviceUrl = null, params System.Net.Http.DelegatingHandler[] handlers);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.OAuthClient GetOAuthClient(class Microsoft.Bot.Connector.IActivity activity, class Microsoft.Bot.Connector.MicrosoftAppCredentials credentials, string serviceUrl, class System.Net.Http.DelegatingHandler[] handlers) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ActivityExtensions.GetOAuthClient(Microsoft.Bot.Connector.IActivity,Microsoft.Bot.Connector.MicrosoftAppCredentials,System.String,System.Net.Http.DelegatingHandler[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOAuthClient (activity As IActivity, credentials As MicrosoftAppCredentials, Optional serviceUrl As String = null, ParamArray handlers As DelegatingHandler()) As OAuthClient" />
        <MemberSignature Language="F#" Value="static member GetOAuthClient : Microsoft.Bot.Connector.IActivity * Microsoft.Bot.Connector.MicrosoftAppCredentials * string * System.Net.Http.DelegatingHandler[] -&gt; Microsoft.Bot.Connector.OAuthClient" Usage="Microsoft.Bot.Connector.ActivityExtensions.GetOAuthClient (activity, credentials, serviceUrl, handlers)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.OAuthClient</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.IActivity" RefType="this" />
          <Parameter Name="credentials" Type="Microsoft.Bot.Connector.MicrosoftAppCredentials" />
          <Parameter Name="serviceUrl" Type="System.String" />
          <Parameter Name="handlers" Type="System.Net.Http.DelegatingHandler[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="activity">To be added.</param>
          <param name="credentials">To be added.</param>
          <param name="serviceUrl">To be added.</param>
          <param name="handlers">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ActivityExtensions" Member="M:Microsoft.Bot.Connector.ActivityExtensions.GetOAuthClient(Microsoft.Bot.Connector.IActivity,Microsoft.Bot.Connector.MicrosoftAppCredentials,System.String,System.Net.Http.DelegatingHandler[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IActivity" />
      </Targets>
      <Member MemberName="GetOAuthClient">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.OAuthClient GetOAuthClient (this Microsoft.Bot.Connector.IActivity activity, string microsoftAppId = null, string microsoftAppPassword = null, string serviceUrl = null, params System.Net.Http.DelegatingHandler[] handlers);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.OAuthClient GetOAuthClient(class Microsoft.Bot.Connector.IActivity activity, string microsoftAppId, string microsoftAppPassword, string serviceUrl, class System.Net.Http.DelegatingHandler[] handlers) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ActivityExtensions.GetOAuthClient(Microsoft.Bot.Connector.IActivity,System.String,System.String,System.String,System.Net.Http.DelegatingHandler[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetOAuthClient (activity As IActivity, Optional microsoftAppId As String = null, Optional microsoftAppPassword As String = null, Optional serviceUrl As String = null, ParamArray handlers As DelegatingHandler()) As OAuthClient" />
        <MemberSignature Language="F#" Value="static member GetOAuthClient : Microsoft.Bot.Connector.IActivity * string * string * string * System.Net.Http.DelegatingHandler[] -&gt; Microsoft.Bot.Connector.OAuthClient" Usage="Microsoft.Bot.Connector.ActivityExtensions.GetOAuthClient (activity, microsoftAppId, microsoftAppPassword, serviceUrl, handlers)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.OAuthClient</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.IActivity" RefType="this" />
          <Parameter Name="microsoftAppId" Type="System.String" />
          <Parameter Name="microsoftAppPassword" Type="System.String" />
          <Parameter Name="serviceUrl" Type="System.String" />
          <Parameter Name="handlers" Type="System.Net.Http.DelegatingHandler[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="activity">To be added.</param>
          <param name="microsoftAppId">To be added.</param>
          <param name="microsoftAppPassword">To be added.</param>
          <param name="serviceUrl">To be added.</param>
          <param name="handlers">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ActivityExtensions" Member="M:Microsoft.Bot.Connector.ActivityExtensions.GetOAuthClient(Microsoft.Bot.Connector.IActivity,System.String,System.String,System.String,System.Net.Http.DelegatingHandler[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IActivity" />
      </Targets>
      <Member MemberName="GetStateClient">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.StateClient GetStateClient (this Microsoft.Bot.Connector.IActivity activity, Microsoft.Bot.Connector.MicrosoftAppCredentials credentials, string serviceUrl = null, params System.Net.Http.DelegatingHandler[] handlers);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.StateClient GetStateClient(class Microsoft.Bot.Connector.IActivity activity, class Microsoft.Bot.Connector.MicrosoftAppCredentials credentials, string serviceUrl, class System.Net.Http.DelegatingHandler[] handlers) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ActivityExtensions.GetStateClient(Microsoft.Bot.Connector.IActivity,Microsoft.Bot.Connector.MicrosoftAppCredentials,System.String,System.Net.Http.DelegatingHandler[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetStateClient (activity As IActivity, credentials As MicrosoftAppCredentials, Optional serviceUrl As String = null, ParamArray handlers As DelegatingHandler()) As StateClient" />
        <MemberSignature Language="F#" Value="static member GetStateClient : Microsoft.Bot.Connector.IActivity * Microsoft.Bot.Connector.MicrosoftAppCredentials * string * System.Net.Http.DelegatingHandler[] -&gt; Microsoft.Bot.Connector.StateClient" Usage="Microsoft.Bot.Connector.ActivityExtensions.GetStateClient (activity, credentials, serviceUrl, handlers)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.StateClient</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.IActivity" RefType="this" />
          <Parameter Name="credentials" Type="Microsoft.Bot.Connector.MicrosoftAppCredentials" />
          <Parameter Name="serviceUrl" Type="System.String" />
          <Parameter Name="handlers" Type="System.Net.Http.DelegatingHandler[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="activity">To be added.</param>
          <param name="credentials">To be added.</param>
          <param name="serviceUrl">To be added.</param>
          <param name="handlers">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ActivityExtensions" Member="M:Microsoft.Bot.Connector.ActivityExtensions.GetStateClient(Microsoft.Bot.Connector.IActivity,Microsoft.Bot.Connector.MicrosoftAppCredentials,System.String,System.Net.Http.DelegatingHandler[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IActivity" />
      </Targets>
      <Member MemberName="GetStateClient">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.StateClient GetStateClient (this Microsoft.Bot.Connector.IActivity activity, string microsoftAppId = null, string microsoftAppPassword = null, string serviceUrl = null, params System.Net.Http.DelegatingHandler[] handlers);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.StateClient GetStateClient(class Microsoft.Bot.Connector.IActivity activity, string microsoftAppId, string microsoftAppPassword, string serviceUrl, class System.Net.Http.DelegatingHandler[] handlers) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ActivityExtensions.GetStateClient(Microsoft.Bot.Connector.IActivity,System.String,System.String,System.String,System.Net.Http.DelegatingHandler[])" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetStateClient (activity As IActivity, Optional microsoftAppId As String = null, Optional microsoftAppPassword As String = null, Optional serviceUrl As String = null, ParamArray handlers As DelegatingHandler()) As StateClient" />
        <MemberSignature Language="F#" Value="static member GetStateClient : Microsoft.Bot.Connector.IActivity * string * string * string * System.Net.Http.DelegatingHandler[] -&gt; Microsoft.Bot.Connector.StateClient" Usage="Microsoft.Bot.Connector.ActivityExtensions.GetStateClient (activity, microsoftAppId, microsoftAppPassword, serviceUrl, handlers)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.StateClient</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.IActivity" RefType="this" />
          <Parameter Name="microsoftAppId" Type="System.String" />
          <Parameter Name="microsoftAppPassword" Type="System.String" />
          <Parameter Name="serviceUrl" Type="System.String" />
          <Parameter Name="handlers" Type="System.Net.Http.DelegatingHandler[]">
            <Attributes>
              <Attribute>
                <AttributeName>System.ParamArray</AttributeName>
              </Attribute>
            </Attributes>
          </Parameter>
        </Parameters>
        <Docs>
          <param name="activity">To be added.</param>
          <param name="microsoftAppId">To be added.</param>
          <param name="microsoftAppPassword">To be added.</param>
          <param name="serviceUrl">To be added.</param>
          <param name="handlers">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ActivityExtensions" Member="M:Microsoft.Bot.Connector.ActivityExtensions.GetStateClient(Microsoft.Bot.Connector.IActivity,System.String,System.String,System.String,System.Net.Http.DelegatingHandler[])" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IActivity" />
      </Targets>
      <Member MemberName="IsTeamsVerificationInvoke">
        <MemberSignature Language="C#" Value="public static bool IsTeamsVerificationInvoke (this Microsoft.Bot.Connector.IActivity activity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsTeamsVerificationInvoke(class Microsoft.Bot.Connector.IActivity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ActivityExtensions.IsTeamsVerificationInvoke(Microsoft.Bot.Connector.IActivity)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsTeamsVerificationInvoke (activity As IActivity) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsTeamsVerificationInvoke : Microsoft.Bot.Connector.IActivity -&gt; bool" Usage="Microsoft.Bot.Connector.ActivityExtensions.IsTeamsVerificationInvoke activity" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.IActivity" RefType="this" />
        </Parameters>
        <Docs>
          <param name="activity">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ActivityExtensions" Member="M:Microsoft.Bot.Connector.ActivityExtensions.IsTeamsVerificationInvoke(Microsoft.Bot.Connector.IActivity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IActivity" />
      </Targets>
      <Member MemberName="IsTokenResponseEvent">
        <MemberSignature Language="C#" Value="public static bool IsTokenResponseEvent (this Microsoft.Bot.Connector.IActivity activity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsTokenResponseEvent(class Microsoft.Bot.Connector.IActivity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ActivityExtensions.IsTokenResponseEvent(Microsoft.Bot.Connector.IActivity)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function IsTokenResponseEvent (activity As IActivity) As Boolean" />
        <MemberSignature Language="F#" Value="static member IsTokenResponseEvent : Microsoft.Bot.Connector.IActivity -&gt; bool" Usage="Microsoft.Bot.Connector.ActivityExtensions.IsTokenResponseEvent activity" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.IActivity" RefType="this" />
        </Parameters>
        <Docs>
          <param name="activity">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ActivityExtensions" Member="M:Microsoft.Bot.Connector.ActivityExtensions.IsTokenResponseEvent(Microsoft.Bot.Connector.IActivity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IMessageActivity" />
      </Targets>
      <Member MemberName="MentionsId">
        <MemberSignature Language="C#" Value="public static bool MentionsId (this Microsoft.Bot.Connector.IMessageActivity activity, string id);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool MentionsId(class Microsoft.Bot.Connector.IMessageActivity activity, string id) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ActivityExtensions.MentionsId(Microsoft.Bot.Connector.IMessageActivity,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MentionsId (activity As IMessageActivity, id As String) As Boolean" />
        <MemberSignature Language="F#" Value="static member MentionsId : Microsoft.Bot.Connector.IMessageActivity * string -&gt; bool" Usage="Microsoft.Bot.Connector.ActivityExtensions.MentionsId (activity, id)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.IMessageActivity" RefType="this" />
          <Parameter Name="id" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="activity">To be added.</param>
          <param name="id">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ActivityExtensions" Member="M:Microsoft.Bot.Connector.ActivityExtensions.MentionsId(Microsoft.Bot.Connector.IMessageActivity,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IMessageActivity" />
      </Targets>
      <Member MemberName="MentionsRecipient">
        <MemberSignature Language="C#" Value="public static bool MentionsRecipient (this Microsoft.Bot.Connector.IMessageActivity activity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool MentionsRecipient(class Microsoft.Bot.Connector.IMessageActivity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ActivityExtensions.MentionsRecipient(Microsoft.Bot.Connector.IMessageActivity)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MentionsRecipient (activity As IMessageActivity) As Boolean" />
        <MemberSignature Language="F#" Value="static member MentionsRecipient : Microsoft.Bot.Connector.IMessageActivity -&gt; bool" Usage="Microsoft.Bot.Connector.ActivityExtensions.MentionsRecipient activity" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.IMessageActivity" RefType="this" />
        </Parameters>
        <Docs>
          <param name="activity">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ActivityExtensions" Member="M:Microsoft.Bot.Connector.ActivityExtensions.MentionsRecipient(Microsoft.Bot.Connector.IMessageActivity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IActivity" />
      </Targets>
      <Member MemberName="ReadTokenResponseContent">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.TokenResponse ReadTokenResponseContent (this Microsoft.Bot.Connector.IActivity activity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.TokenResponse ReadTokenResponseContent(class Microsoft.Bot.Connector.IActivity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ActivityExtensions.ReadTokenResponseContent(Microsoft.Bot.Connector.IActivity)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReadTokenResponseContent (activity As IActivity) As TokenResponse" />
        <MemberSignature Language="F#" Value="static member ReadTokenResponseContent : Microsoft.Bot.Connector.IActivity -&gt; Microsoft.Bot.Connector.TokenResponse" Usage="Microsoft.Bot.Connector.ActivityExtensions.ReadTokenResponseContent activity" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.TokenResponse</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.IActivity" RefType="this" />
        </Parameters>
        <Docs>
          <param name="activity">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ActivityExtensions" Member="M:Microsoft.Bot.Connector.ActivityExtensions.ReadTokenResponseContent(Microsoft.Bot.Connector.IActivity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IMessageActivity" />
      </Targets>
      <Member MemberName="RemoveMentionText">
        <MemberSignature Language="C#" Value="public static string RemoveMentionText (this Microsoft.Bot.Connector.IMessageActivity activity, string id);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string RemoveMentionText(class Microsoft.Bot.Connector.IMessageActivity activity, string id) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ActivityExtensions.RemoveMentionText(Microsoft.Bot.Connector.IMessageActivity,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveMentionText (activity As IMessageActivity, id As String) As String" />
        <MemberSignature Language="F#" Value="static member RemoveMentionText : Microsoft.Bot.Connector.IMessageActivity * string -&gt; string" Usage="Microsoft.Bot.Connector.ActivityExtensions.RemoveMentionText (activity, id)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.IMessageActivity" RefType="this" />
          <Parameter Name="id" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="activity">To be added.</param>
          <param name="id">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ActivityExtensions" Member="M:Microsoft.Bot.Connector.ActivityExtensions.RemoveMentionText(Microsoft.Bot.Connector.IMessageActivity,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IMessageActivity" />
      </Targets>
      <Member MemberName="RemoveRecipientMention">
        <MemberSignature Language="C#" Value="public static string RemoveRecipientMention (this Microsoft.Bot.Connector.IMessageActivity activity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string RemoveRecipientMention(class Microsoft.Bot.Connector.IMessageActivity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ActivityExtensions.RemoveRecipientMention(Microsoft.Bot.Connector.IMessageActivity)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveRecipientMention (activity As IMessageActivity) As String" />
        <MemberSignature Language="F#" Value="static member RemoveRecipientMention : Microsoft.Bot.Connector.IMessageActivity -&gt; string" Usage="Microsoft.Bot.Connector.ActivityExtensions.RemoveRecipientMention activity" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.IMessageActivity" RefType="this" />
        </Parameters>
        <Docs>
          <param name="activity">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ActivityExtensions" Member="M:Microsoft.Bot.Connector.ActivityExtensions.RemoveRecipientMention(Microsoft.Bot.Connector.IMessageActivity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IActivity" />
      </Targets>
      <Member MemberName="TryGetChannelData&lt;TypeT&gt;">
        <MemberSignature Language="C#" Value="public static bool TryGetChannelData&lt;TypeT&gt; (this Microsoft.Bot.Connector.IActivity activity, out TypeT instance);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetChannelData&lt;TypeT&gt;(class Microsoft.Bot.Connector.IActivity activity, [out] !!TypeT&amp; instance) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ActivityExtensions.TryGetChannelData``1(Microsoft.Bot.Connector.IActivity,``0@)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryGetChannelData(Of TypeT) (activity As IActivity, ByRef instance As TypeT) As Boolean" />
        <MemberSignature Language="F#" Value="static member TryGetChannelData : Microsoft.Bot.Connector.IActivity *  -&gt; bool" Usage="Microsoft.Bot.Connector.ActivityExtensions.TryGetChannelData (activity, instance)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <TypeParameters>
          <TypeParameter Name="TypeT" />
        </TypeParameters>
        <Parameters>
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.IActivity" RefType="this" />
          <Parameter Name="instance" Type="TypeT" RefType="out" />
        </Parameters>
        <Docs>
          <typeparam name="TypeT">To be added.</typeparam>
          <param name="activity">To be added.</param>
          <param name="instance">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ActivityExtensions" Member="M:Microsoft.Bot.Connector.ActivityExtensions.TryGetChannelData``1(Microsoft.Bot.Connector.IActivity,``0@)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IAttachments" />
      </Targets>
      <Member MemberName="GetAttachment">
        <MemberSignature Language="C#" Value="public static byte[] GetAttachment (this Microsoft.Bot.Connector.IAttachments operations, string attachmentId, string viewId);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig unsigned int8[] GetAttachment(class Microsoft.Bot.Connector.IAttachments operations, string attachmentId, string viewId) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachment(Microsoft.Bot.Connector.IAttachments,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAttachment (operations As IAttachments, attachmentId As String, viewId As String) As Byte()" />
        <MemberSignature Language="F#" Value="static member GetAttachment : Microsoft.Bot.Connector.IAttachments * string * string -&gt; byte[]" Usage="Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachment (operations, attachmentId, viewId)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Byte[]</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IAttachments" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="attachmentId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="viewId" Type="System.String" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="attachmentId">To be added.</param>
          <param name="viewId">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.AttachmentsExtensions" Member="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachment(Microsoft.Bot.Connector.IAttachments,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IAttachments" />
      </Targets>
      <Member MemberName="GetAttachmentAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;byte[]&gt; GetAttachmentAsync (this Microsoft.Bot.Connector.IAttachments operations, string attachmentId, string viewId, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;unsigned int8[]&gt; GetAttachmentAsync(class Microsoft.Bot.Connector.IAttachments operations, string attachmentId, string viewId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentAsync(Microsoft.Bot.Connector.IAttachments,System.String,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member GetAttachmentAsync : Microsoft.Bot.Connector.IAttachments * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;byte[]&gt;" Usage="Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentAsync (operations, attachmentId, viewId, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Byte[]&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IAttachments" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="attachmentId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="viewId" Type="System.String" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="attachmentId">To be added.</param>
          <param name="viewId">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.AttachmentsExtensions" Member="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentAsync(Microsoft.Bot.Connector.IAttachments,System.String,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IAttachments" />
      </Targets>
      <Member MemberName="GetAttachmentInfo">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.AttachmentInfo GetAttachmentInfo (this Microsoft.Bot.Connector.IAttachments operations, string attachmentId);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.AttachmentInfo GetAttachmentInfo(class Microsoft.Bot.Connector.IAttachments operations, string attachmentId) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentInfo(Microsoft.Bot.Connector.IAttachments,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAttachmentInfo (operations As IAttachments, attachmentId As String) As AttachmentInfo" />
        <MemberSignature Language="F#" Value="static member GetAttachmentInfo : Microsoft.Bot.Connector.IAttachments * string -&gt; Microsoft.Bot.Connector.AttachmentInfo" Usage="Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentInfo (operations, attachmentId)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.AttachmentInfo</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IAttachments" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="attachmentId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="attachmentId">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.AttachmentsExtensions" Member="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentInfo(Microsoft.Bot.Connector.IAttachments,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IAttachments" />
      </Targets>
      <Member MemberName="GetAttachmentInfoAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.AttachmentInfo&gt; GetAttachmentInfoAsync (this Microsoft.Bot.Connector.IAttachments operations, string attachmentId, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.AttachmentInfo&gt; GetAttachmentInfoAsync(class Microsoft.Bot.Connector.IAttachments operations, string attachmentId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentInfoAsync(Microsoft.Bot.Connector.IAttachments,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member GetAttachmentInfoAsync : Microsoft.Bot.Connector.IAttachments * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.AttachmentInfo&gt;" Usage="Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentInfoAsync (operations, attachmentId, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.AttachmentInfo&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IAttachments" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="attachmentId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="attachmentId">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.AttachmentsExtensions" Member="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentInfoAsync(Microsoft.Bot.Connector.IAttachments,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IAttachments" />
      </Targets>
      <Member MemberName="GetAttachmentStream">
        <MemberSignature Language="C#" Value="public static System.IO.Stream GetAttachmentStream (this Microsoft.Bot.Connector.IAttachments operations, string attachmentId, string viewId);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IO.Stream GetAttachmentStream(class Microsoft.Bot.Connector.IAttachments operations, string attachmentId, string viewId) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentStream(Microsoft.Bot.Connector.IAttachments,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAttachmentStream (operations As IAttachments, attachmentId As String, viewId As String) As Stream" />
        <MemberSignature Language="F#" Value="static member GetAttachmentStream : Microsoft.Bot.Connector.IAttachments * string * string -&gt; System.IO.Stream" Usage="Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentStream (operations, attachmentId, viewId)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.IO.Stream</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IAttachments" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="attachmentId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="viewId" Type="System.String" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="attachmentId">To be added.</param>
          <param name="viewId">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.AttachmentsExtensions" Member="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentStream(Microsoft.Bot.Connector.IAttachments,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IAttachments" />
      </Targets>
      <Member MemberName="GetAttachmentStreamAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.IO.Stream&gt; GetAttachmentStreamAsync (this Microsoft.Bot.Connector.IAttachments operations, string attachmentId, string viewId, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.IO.Stream&gt; GetAttachmentStreamAsync(class Microsoft.Bot.Connector.IAttachments operations, string attachmentId, string viewId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentStreamAsync(Microsoft.Bot.Connector.IAttachments,System.String,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member GetAttachmentStreamAsync : Microsoft.Bot.Connector.IAttachments * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.IO.Stream&gt;" Usage="Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentStreamAsync (operations, attachmentId, viewId, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.IO.Stream&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IAttachments" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="attachmentId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="viewId" Type="System.String" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="attachmentId">To be added.</param>
          <param name="viewId">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.AttachmentsExtensions" Member="M:Microsoft.Bot.Connector.AttachmentsExtensions.GetAttachmentStreamAsync(Microsoft.Bot.Connector.IAttachments,System.String,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.TimeSpan" />
      </Targets>
      <Member MemberName="WithJitter">
        <MemberSignature Language="C#" Value="public static TimeSpan WithJitter (this TimeSpan delay, double multiplier = 0.1);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan WithJitter(valuetype System.TimeSpan delay, float64 multiplier) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Authentication.TimeSpanExtensions.WithJitter(System.TimeSpan,System.Double)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WithJitter (delay As TimeSpan, Optional multiplier As Double = 0.1) As TimeSpan" />
        <MemberSignature Language="F#" Value="static member WithJitter : TimeSpan * double -&gt; TimeSpan" Usage="Microsoft.Bot.Connector.Authentication.TimeSpanExtensions.WithJitter (delay, multiplier)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.TimeSpan</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="delay" Type="System.TimeSpan" RefType="this" />
          <Parameter Name="multiplier" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="delay">To be added.</param>
          <param name="multiplier">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.Authentication.TimeSpanExtensions" Member="M:Microsoft.Bot.Connector.Authentication.TimeSpanExtensions.WithJitter(System.TimeSpan,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddBotAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddBotAuthentication (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, Microsoft.Bot.Connector.ICredentialProvider credentialProvider);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddBotAuthentication(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, class Microsoft.Bot.Connector.ICredentialProvider credentialProvider) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.BotAuthenticationExtensions.AddBotAuthentication(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,Microsoft.Bot.Connector.ICredentialProvider)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddBotAuthentication (builder As AuthenticationBuilder, credentialProvider As ICredentialProvider) As AuthenticationBuilder" />
        <MemberSignature Language="F#" Value="static member AddBotAuthentication : Microsoft.AspNetCore.Authentication.AuthenticationBuilder * Microsoft.Bot.Connector.ICredentialProvider -&gt; Microsoft.AspNetCore.Authentication.AuthenticationBuilder" Usage="Microsoft.Bot.Connector.BotAuthenticationExtensions.AddBotAuthentication (builder, credentialProvider)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="credentialProvider" Type="Microsoft.Bot.Connector.ICredentialProvider" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="credentialProvider">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.BotAuthenticationExtensions" Member="M:Microsoft.Bot.Connector.BotAuthenticationExtensions.AddBotAuthentication(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,Microsoft.Bot.Connector.ICredentialProvider)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddBotAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddBotAuthentication (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string microsoftAppId, string microsoftAppPassword);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddBotAuthentication(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string microsoftAppId, string microsoftAppPassword) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.BotAuthenticationExtensions.AddBotAuthentication(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddBotAuthentication (builder As AuthenticationBuilder, microsoftAppId As String, microsoftAppPassword As String) As AuthenticationBuilder" />
        <MemberSignature Language="F#" Value="static member AddBotAuthentication : Microsoft.AspNetCore.Authentication.AuthenticationBuilder * string * string -&gt; Microsoft.AspNetCore.Authentication.AuthenticationBuilder" Usage="Microsoft.Bot.Connector.BotAuthenticationExtensions.AddBotAuthentication (builder, microsoftAppId, microsoftAppPassword)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="microsoftAppId" Type="System.String" />
          <Parameter Name="microsoftAppPassword" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="microsoftAppId">To be added.</param>
          <param name="microsoftAppPassword">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.BotAuthenticationExtensions" Member="M:Microsoft.Bot.Connector.BotAuthenticationExtensions.AddBotAuthentication(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.AspNetCore.Authentication.AuthenticationBuilder" />
      </Targets>
      <Member MemberName="AddBotAuthentication">
        <MemberSignature Language="C#" Value="public static Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddBotAuthentication (this Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, string displayName, Action&lt;Microsoft.Bot.Connector.BotAuthenticationOptions&gt; configureOptions);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.AspNetCore.Authentication.AuthenticationBuilder AddBotAuthentication(class Microsoft.AspNetCore.Authentication.AuthenticationBuilder builder, string authenticationScheme, string displayName, class System.Action`1&lt;class Microsoft.Bot.Connector.BotAuthenticationOptions&gt; configureOptions) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.BotAuthenticationExtensions.AddBotAuthentication(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{Microsoft.Bot.Connector.BotAuthenticationOptions})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddBotAuthentication (builder As AuthenticationBuilder, authenticationScheme As String, displayName As String, configureOptions As Action(Of BotAuthenticationOptions)) As AuthenticationBuilder" />
        <MemberSignature Language="F#" Value="static member AddBotAuthentication : Microsoft.AspNetCore.Authentication.AuthenticationBuilder * string * string * Action&lt;Microsoft.Bot.Connector.BotAuthenticationOptions&gt; -&gt; Microsoft.AspNetCore.Authentication.AuthenticationBuilder" Usage="Microsoft.Bot.Connector.BotAuthenticationExtensions.AddBotAuthentication (builder, authenticationScheme, displayName, configureOptions)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.AspNetCore.Authentication.AuthenticationBuilder</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="builder" Type="Microsoft.AspNetCore.Authentication.AuthenticationBuilder" RefType="this" />
          <Parameter Name="authenticationScheme" Type="System.String" />
          <Parameter Name="displayName" Type="System.String" />
          <Parameter Name="configureOptions" Type="System.Action&lt;Microsoft.Bot.Connector.BotAuthenticationOptions&gt;" />
        </Parameters>
        <Docs>
          <param name="builder">To be added.</param>
          <param name="authenticationScheme">To be added.</param>
          <param name="displayName">To be added.</param>
          <param name="configureOptions">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.BotAuthenticationExtensions" Member="M:Microsoft.Bot.Connector.BotAuthenticationExtensions.AddBotAuthentication(Microsoft.AspNetCore.Authentication.AuthenticationBuilder,System.String,System.String,System.Action{Microsoft.Bot.Connector.BotAuthenticationOptions})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IBotSignIn" />
      </Targets>
      <Member MemberName="GetSignInUrlAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;string&gt; GetSignInUrlAsync (this Microsoft.Bot.Connector.IBotSignIn operations, string state, string codeChallenge = null, string emulatorUrl = null, string finalRedirect = null, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;string&gt; GetSignInUrlAsync(class Microsoft.Bot.Connector.IBotSignIn operations, string state, string codeChallenge, string emulatorUrl, string finalRedirect, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.BotSignInExtensions.GetSignInUrlAsync(Microsoft.Bot.Connector.IBotSignIn,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member GetSignInUrlAsync : Microsoft.Bot.Connector.IBotSignIn * string * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="Microsoft.Bot.Connector.BotSignInExtensions.GetSignInUrlAsync (operations, state, codeChallenge, emulatorUrl, finalRedirect, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IBotSignIn" RefType="this" />
          <Parameter Name="state" Type="System.String" />
          <Parameter Name="codeChallenge" Type="System.String" />
          <Parameter Name="emulatorUrl" Type="System.String" />
          <Parameter Name="finalRedirect" Type="System.String" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="operations">
            The operations group for this extension method.
            </param>
          <param name="state" />
          <param name="codeChallenge" />
          <param name="emulatorUrl" />
          <param name="finalRedirect" />
          <param name="cancellationToken">
            The cancellation token.
            </param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.BotSignInExtensions" Member="M:Microsoft.Bot.Connector.BotSignInExtensions.GetSignInUrlAsync(Microsoft.Bot.Connector.IBotSignIn,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IBotState" />
      </Targets>
      <Member MemberName="DeleteStateForUser">
        <MemberSignature Language="C#" Value="public static object DeleteStateForUser (this Microsoft.Bot.Connector.IBotState operations, string channelId, string userId);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig object DeleteStateForUser(class Microsoft.Bot.Connector.IBotState operations, string channelId, string userId) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.BotStateExtensions.DeleteStateForUser(Microsoft.Bot.Connector.IBotState,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DeleteStateForUser (operations As IBotState, channelId As String, userId As String) As Object" />
        <MemberSignature Language="F#" Value="static member DeleteStateForUser : Microsoft.Bot.Connector.IBotState * string * string -&gt; obj" Usage="Microsoft.Bot.Connector.BotStateExtensions.DeleteStateForUser (operations, channelId, userId)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Object</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IBotState" RefType="this" />
          <Parameter Name="channelId" Type="System.String" />
          <Parameter Name="userId" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="channelId">To be added.</param>
          <param name="userId">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.BotStateExtensions" Member="M:Microsoft.Bot.Connector.BotStateExtensions.DeleteStateForUser(Microsoft.Bot.Connector.IBotState,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IBotState" />
      </Targets>
      <Member MemberName="DeleteStateForUserAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;object&gt; DeleteStateForUserAsync (this Microsoft.Bot.Connector.IBotState operations, string channelId, string userId, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;object&gt; DeleteStateForUserAsync(class Microsoft.Bot.Connector.IBotState operations, string channelId, string userId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.BotStateExtensions.DeleteStateForUserAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member DeleteStateForUserAsync : Microsoft.Bot.Connector.IBotState * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="Microsoft.Bot.Connector.BotStateExtensions.DeleteStateForUserAsync (operations, channelId, userId, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IBotState" RefType="this" />
          <Parameter Name="channelId" Type="System.String" />
          <Parameter Name="userId" Type="System.String" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="channelId">To be added.</param>
          <param name="userId">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.BotStateExtensions" Member="M:Microsoft.Bot.Connector.BotStateExtensions.DeleteStateForUserAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IBotState" />
      </Targets>
      <Member MemberName="ExportBotStateData">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.BotStateDataResult ExportBotStateData (this Microsoft.Bot.Connector.IBotState operations, string channelId);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.BotStateDataResult ExportBotStateData(class Microsoft.Bot.Connector.IBotState operations, string channelId) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.BotStateExtensions.ExportBotStateData(Microsoft.Bot.Connector.IBotState,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ExportBotStateData (operations As IBotState, channelId As String) As BotStateDataResult" />
        <MemberSignature Language="F#" Value="static member ExportBotStateData : Microsoft.Bot.Connector.IBotState * string -&gt; Microsoft.Bot.Connector.BotStateDataResult" Usage="Microsoft.Bot.Connector.BotStateExtensions.ExportBotStateData (operations, channelId)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.BotStateDataResult</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IBotState" RefType="this" />
          <Parameter Name="channelId" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="channelId">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.BotStateExtensions" Member="M:Microsoft.Bot.Connector.BotStateExtensions.ExportBotStateData(Microsoft.Bot.Connector.IBotState,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IBotState" />
      </Targets>
      <Member MemberName="ExportBotStateDataAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.BotStateDataResult&gt; ExportBotStateDataAsync (this Microsoft.Bot.Connector.IBotState operations, string channelId, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.BotStateDataResult&gt; ExportBotStateDataAsync(class Microsoft.Bot.Connector.IBotState operations, string channelId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.BotStateExtensions.ExportBotStateDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ExportBotStateDataAsync : Microsoft.Bot.Connector.IBotState * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.BotStateDataResult&gt;" Usage="Microsoft.Bot.Connector.BotStateExtensions.ExportBotStateDataAsync (operations, channelId, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.BotStateDataResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IBotState" RefType="this" />
          <Parameter Name="channelId" Type="System.String" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="channelId">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.BotStateExtensions" Member="M:Microsoft.Bot.Connector.BotStateExtensions.ExportBotStateDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IBotState" />
      </Targets>
      <Member MemberName="GetConversationData">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.BotData GetConversationData (this Microsoft.Bot.Connector.IBotState operations, string channelId, string conversationId);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.BotData GetConversationData(class Microsoft.Bot.Connector.IBotState operations, string channelId, string conversationId) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.BotStateExtensions.GetConversationData(Microsoft.Bot.Connector.IBotState,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetConversationData (operations As IBotState, channelId As String, conversationId As String) As BotData" />
        <MemberSignature Language="F#" Value="static member GetConversationData : Microsoft.Bot.Connector.IBotState * string * string -&gt; Microsoft.Bot.Connector.BotData" Usage="Microsoft.Bot.Connector.BotStateExtensions.GetConversationData (operations, channelId, conversationId)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.BotData</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IBotState" RefType="this" />
          <Parameter Name="channelId" Type="System.String" />
          <Parameter Name="conversationId" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="channelId">To be added.</param>
          <param name="conversationId">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.BotStateExtensions" Member="M:Microsoft.Bot.Connector.BotStateExtensions.GetConversationData(Microsoft.Bot.Connector.IBotState,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IBotState" />
      </Targets>
      <Member MemberName="GetConversationDataAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.BotData&gt; GetConversationDataAsync (this Microsoft.Bot.Connector.IBotState operations, string channelId, string conversationId, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.BotData&gt; GetConversationDataAsync(class Microsoft.Bot.Connector.IBotState operations, string channelId, string conversationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.BotStateExtensions.GetConversationDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member GetConversationDataAsync : Microsoft.Bot.Connector.IBotState * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.BotData&gt;" Usage="Microsoft.Bot.Connector.BotStateExtensions.GetConversationDataAsync (operations, channelId, conversationId, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.BotData&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IBotState" RefType="this" />
          <Parameter Name="channelId" Type="System.String" />
          <Parameter Name="conversationId" Type="System.String" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="channelId">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.BotStateExtensions" Member="M:Microsoft.Bot.Connector.BotStateExtensions.GetConversationDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IBotState" />
      </Targets>
      <Member MemberName="GetPrivateConversationData">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.BotData GetPrivateConversationData (this Microsoft.Bot.Connector.IBotState operations, string channelId, string conversationId, string userId);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.BotData GetPrivateConversationData(class Microsoft.Bot.Connector.IBotState operations, string channelId, string conversationId, string userId) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.BotStateExtensions.GetPrivateConversationData(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetPrivateConversationData (operations As IBotState, channelId As String, conversationId As String, userId As String) As BotData" />
        <MemberSignature Language="F#" Value="static member GetPrivateConversationData : Microsoft.Bot.Connector.IBotState * string * string * string -&gt; Microsoft.Bot.Connector.BotData" Usage="Microsoft.Bot.Connector.BotStateExtensions.GetPrivateConversationData (operations, channelId, conversationId, userId)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.BotData</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IBotState" RefType="this" />
          <Parameter Name="channelId" Type="System.String" />
          <Parameter Name="conversationId" Type="System.String" />
          <Parameter Name="userId" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="channelId">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="userId">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.BotStateExtensions" Member="M:Microsoft.Bot.Connector.BotStateExtensions.GetPrivateConversationData(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IBotState" />
      </Targets>
      <Member MemberName="GetPrivateConversationDataAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.BotData&gt; GetPrivateConversationDataAsync (this Microsoft.Bot.Connector.IBotState operations, string channelId, string conversationId, string userId, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.BotData&gt; GetPrivateConversationDataAsync(class Microsoft.Bot.Connector.IBotState operations, string channelId, string conversationId, string userId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.BotStateExtensions.GetPrivateConversationDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member GetPrivateConversationDataAsync : Microsoft.Bot.Connector.IBotState * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.BotData&gt;" Usage="Microsoft.Bot.Connector.BotStateExtensions.GetPrivateConversationDataAsync (operations, channelId, conversationId, userId, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.BotData&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IBotState" RefType="this" />
          <Parameter Name="channelId" Type="System.String" />
          <Parameter Name="conversationId" Type="System.String" />
          <Parameter Name="userId" Type="System.String" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="channelId">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="userId">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.BotStateExtensions" Member="M:Microsoft.Bot.Connector.BotStateExtensions.GetPrivateConversationDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IBotState" />
      </Targets>
      <Member MemberName="GetUserData">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.BotData GetUserData (this Microsoft.Bot.Connector.IBotState operations, string channelId, string userId);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.BotData GetUserData(class Microsoft.Bot.Connector.IBotState operations, string channelId, string userId) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.BotStateExtensions.GetUserData(Microsoft.Bot.Connector.IBotState,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetUserData (operations As IBotState, channelId As String, userId As String) As BotData" />
        <MemberSignature Language="F#" Value="static member GetUserData : Microsoft.Bot.Connector.IBotState * string * string -&gt; Microsoft.Bot.Connector.BotData" Usage="Microsoft.Bot.Connector.BotStateExtensions.GetUserData (operations, channelId, userId)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.BotData</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IBotState" RefType="this" />
          <Parameter Name="channelId" Type="System.String" />
          <Parameter Name="userId" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="channelId">To be added.</param>
          <param name="userId">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.BotStateExtensions" Member="M:Microsoft.Bot.Connector.BotStateExtensions.GetUserData(Microsoft.Bot.Connector.IBotState,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IBotState" />
      </Targets>
      <Member MemberName="GetUserDataAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.BotData&gt; GetUserDataAsync (this Microsoft.Bot.Connector.IBotState operations, string channelId, string userId, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.BotData&gt; GetUserDataAsync(class Microsoft.Bot.Connector.IBotState operations, string channelId, string userId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.BotStateExtensions.GetUserDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member GetUserDataAsync : Microsoft.Bot.Connector.IBotState * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.BotData&gt;" Usage="Microsoft.Bot.Connector.BotStateExtensions.GetUserDataAsync (operations, channelId, userId, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.BotData&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IBotState" RefType="this" />
          <Parameter Name="channelId" Type="System.String" />
          <Parameter Name="userId" Type="System.String" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="channelId">To be added.</param>
          <param name="userId">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.BotStateExtensions" Member="M:Microsoft.Bot.Connector.BotStateExtensions.GetUserDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IBotState" />
      </Targets>
      <Member MemberName="SetConversationData">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.BotData SetConversationData (this Microsoft.Bot.Connector.IBotState operations, string channelId, string conversationId, Microsoft.Bot.Connector.BotData botData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.BotData SetConversationData(class Microsoft.Bot.Connector.IBotState operations, string channelId, string conversationId, class Microsoft.Bot.Connector.BotData botData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.BotStateExtensions.SetConversationData(Microsoft.Bot.Connector.IBotState,System.String,System.String,Microsoft.Bot.Connector.BotData)" />
        <MemberSignature Language="F#" Value="static member SetConversationData : Microsoft.Bot.Connector.IBotState * string * string * Microsoft.Bot.Connector.BotData -&gt; Microsoft.Bot.Connector.BotData" Usage="Microsoft.Bot.Connector.BotStateExtensions.SetConversationData (operations, channelId, conversationId, botData)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.BotData</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IBotState" RefType="this" />
          <Parameter Name="channelId" Type="System.String" />
          <Parameter Name="conversationId" Type="System.String" />
          <Parameter Name="botData" Type="Microsoft.Bot.Connector.BotData" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="channelId">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="botData">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.BotStateExtensions" Member="M:Microsoft.Bot.Connector.BotStateExtensions.SetConversationData(Microsoft.Bot.Connector.IBotState,System.String,System.String,Microsoft.Bot.Connector.BotData)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IBotState" />
      </Targets>
      <Member MemberName="SetConversationDataAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.BotData&gt; SetConversationDataAsync (this Microsoft.Bot.Connector.IBotState operations, string channelId, string conversationId, Microsoft.Bot.Connector.BotData botData, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.BotData&gt; SetConversationDataAsync(class Microsoft.Bot.Connector.IBotState operations, string channelId, string conversationId, class Microsoft.Bot.Connector.BotData botData, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.BotStateExtensions.SetConversationDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,Microsoft.Bot.Connector.BotData,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SetConversationDataAsync : Microsoft.Bot.Connector.IBotState * string * string * Microsoft.Bot.Connector.BotData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.BotData&gt;" Usage="Microsoft.Bot.Connector.BotStateExtensions.SetConversationDataAsync (operations, channelId, conversationId, botData, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.BotData&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IBotState" RefType="this" />
          <Parameter Name="channelId" Type="System.String" />
          <Parameter Name="conversationId" Type="System.String" />
          <Parameter Name="botData" Type="Microsoft.Bot.Connector.BotData" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="channelId">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="botData">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.BotStateExtensions" Member="M:Microsoft.Bot.Connector.BotStateExtensions.SetConversationDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,Microsoft.Bot.Connector.BotData,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IBotState" />
      </Targets>
      <Member MemberName="SetPrivateConversationData">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.BotData SetPrivateConversationData (this Microsoft.Bot.Connector.IBotState operations, string channelId, string conversationId, string userId, Microsoft.Bot.Connector.BotData botData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.BotData SetPrivateConversationData(class Microsoft.Bot.Connector.IBotState operations, string channelId, string conversationId, string userId, class Microsoft.Bot.Connector.BotData botData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.BotStateExtensions.SetPrivateConversationData(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.String,Microsoft.Bot.Connector.BotData)" />
        <MemberSignature Language="F#" Value="static member SetPrivateConversationData : Microsoft.Bot.Connector.IBotState * string * string * string * Microsoft.Bot.Connector.BotData -&gt; Microsoft.Bot.Connector.BotData" Usage="Microsoft.Bot.Connector.BotStateExtensions.SetPrivateConversationData (operations, channelId, conversationId, userId, botData)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.BotData</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IBotState" RefType="this" />
          <Parameter Name="channelId" Type="System.String" />
          <Parameter Name="conversationId" Type="System.String" />
          <Parameter Name="userId" Type="System.String" />
          <Parameter Name="botData" Type="Microsoft.Bot.Connector.BotData" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="channelId">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="userId">To be added.</param>
          <param name="botData">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.BotStateExtensions" Member="M:Microsoft.Bot.Connector.BotStateExtensions.SetPrivateConversationData(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.String,Microsoft.Bot.Connector.BotData)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IBotState" />
      </Targets>
      <Member MemberName="SetPrivateConversationDataAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.BotData&gt; SetPrivateConversationDataAsync (this Microsoft.Bot.Connector.IBotState operations, string channelId, string conversationId, string userId, Microsoft.Bot.Connector.BotData botData, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.BotData&gt; SetPrivateConversationDataAsync(class Microsoft.Bot.Connector.IBotState operations, string channelId, string conversationId, string userId, class Microsoft.Bot.Connector.BotData botData, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.BotStateExtensions.SetPrivateConversationDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.String,Microsoft.Bot.Connector.BotData,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SetPrivateConversationDataAsync : Microsoft.Bot.Connector.IBotState * string * string * string * Microsoft.Bot.Connector.BotData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.BotData&gt;" Usage="Microsoft.Bot.Connector.BotStateExtensions.SetPrivateConversationDataAsync (operations, channelId, conversationId, userId, botData, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.BotData&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IBotState" RefType="this" />
          <Parameter Name="channelId" Type="System.String" />
          <Parameter Name="conversationId" Type="System.String" />
          <Parameter Name="userId" Type="System.String" />
          <Parameter Name="botData" Type="Microsoft.Bot.Connector.BotData" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="channelId">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="userId">To be added.</param>
          <param name="botData">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.BotStateExtensions" Member="M:Microsoft.Bot.Connector.BotStateExtensions.SetPrivateConversationDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,System.String,Microsoft.Bot.Connector.BotData,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IBotState" />
      </Targets>
      <Member MemberName="SetUserData">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.BotData SetUserData (this Microsoft.Bot.Connector.IBotState operations, string channelId, string userId, Microsoft.Bot.Connector.BotData botData);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.BotData SetUserData(class Microsoft.Bot.Connector.IBotState operations, string channelId, string userId, class Microsoft.Bot.Connector.BotData botData) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.BotStateExtensions.SetUserData(Microsoft.Bot.Connector.IBotState,System.String,System.String,Microsoft.Bot.Connector.BotData)" />
        <MemberSignature Language="F#" Value="static member SetUserData : Microsoft.Bot.Connector.IBotState * string * string * Microsoft.Bot.Connector.BotData -&gt; Microsoft.Bot.Connector.BotData" Usage="Microsoft.Bot.Connector.BotStateExtensions.SetUserData (operations, channelId, userId, botData)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.BotData</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IBotState" RefType="this" />
          <Parameter Name="channelId" Type="System.String" />
          <Parameter Name="userId" Type="System.String" />
          <Parameter Name="botData" Type="Microsoft.Bot.Connector.BotData" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="channelId">To be added.</param>
          <param name="userId">To be added.</param>
          <param name="botData">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.BotStateExtensions" Member="M:Microsoft.Bot.Connector.BotStateExtensions.SetUserData(Microsoft.Bot.Connector.IBotState,System.String,System.String,Microsoft.Bot.Connector.BotData)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IBotState" />
      </Targets>
      <Member MemberName="SetUserDataAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.BotData&gt; SetUserDataAsync (this Microsoft.Bot.Connector.IBotState operations, string channelId, string userId, Microsoft.Bot.Connector.BotData botData, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.BotData&gt; SetUserDataAsync(class Microsoft.Bot.Connector.IBotState operations, string channelId, string userId, class Microsoft.Bot.Connector.BotData botData, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.BotStateExtensions.SetUserDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,Microsoft.Bot.Connector.BotData,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SetUserDataAsync : Microsoft.Bot.Connector.IBotState * string * string * Microsoft.Bot.Connector.BotData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.BotData&gt;" Usage="Microsoft.Bot.Connector.BotStateExtensions.SetUserDataAsync (operations, channelId, userId, botData, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.BotData&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IBotState" RefType="this" />
          <Parameter Name="channelId" Type="System.String" />
          <Parameter Name="userId" Type="System.String" />
          <Parameter Name="botData" Type="Microsoft.Bot.Connector.BotData" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="channelId">To be added.</param>
          <param name="userId">To be added.</param>
          <param name="botData">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.BotStateExtensions" Member="M:Microsoft.Bot.Connector.BotStateExtensions.SetUserDataAsync(Microsoft.Bot.Connector.IBotState,System.String,System.String,Microsoft.Bot.Connector.BotData,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Security.Claims.ClaimsIdentity" />
      </Targets>
      <Member MemberName="GetAppIdFromClaims">
        <MemberSignature Language="C#" Value="public static string GetAppIdFromClaims (this System.Security.Claims.ClaimsIdentity identity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetAppIdFromClaims(class System.Security.Claims.ClaimsIdentity identity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ClaimsIdentityEx.GetAppIdFromClaims(System.Security.Claims.ClaimsIdentity)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAppIdFromClaims (identity As ClaimsIdentity) As String" />
        <MemberSignature Language="F#" Value="static member GetAppIdFromClaims : System.Security.Claims.ClaimsIdentity -&gt; string" Usage="Microsoft.Bot.Connector.ClaimsIdentityEx.GetAppIdFromClaims identity" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="identity" Type="System.Security.Claims.ClaimsIdentity" RefType="this" />
        </Parameters>
        <Docs>
          <param name="identity">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ClaimsIdentityEx" Member="M:Microsoft.Bot.Connector.ClaimsIdentityEx.GetAppIdFromClaims(System.Security.Claims.ClaimsIdentity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Security.Claims.ClaimsIdentity" />
      </Targets>
      <Member MemberName="GetAppPasswordFromClaims">
        <MemberSignature Language="C#" Value="public static string GetAppPasswordFromClaims (this System.Security.Claims.ClaimsIdentity identity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetAppPasswordFromClaims(class System.Security.Claims.ClaimsIdentity identity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ClaimsIdentityEx.GetAppPasswordFromClaims(System.Security.Claims.ClaimsIdentity)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetAppPasswordFromClaims (identity As ClaimsIdentity) As String" />
        <MemberSignature Language="F#" Value="static member GetAppPasswordFromClaims : System.Security.Claims.ClaimsIdentity -&gt; string" Usage="Microsoft.Bot.Connector.ClaimsIdentityEx.GetAppPasswordFromClaims identity" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="identity" Type="System.Security.Claims.ClaimsIdentity" RefType="this" />
        </Parameters>
        <Docs>
          <param name="identity">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ClaimsIdentityEx" Member="M:Microsoft.Bot.Connector.ClaimsIdentityEx.GetAppPasswordFromClaims(System.Security.Claims.ClaimsIdentity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.Security.Claims.ClaimsIdentity" />
      </Targets>
      <Member MemberName="GetCredentialsFromClaims">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.MicrosoftAppCredentials GetCredentialsFromClaims (this System.Security.Claims.ClaimsIdentity claimsIdentity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.MicrosoftAppCredentials GetCredentialsFromClaims(class System.Security.Claims.ClaimsIdentity claimsIdentity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ClaimsIdentityEx.GetCredentialsFromClaims(System.Security.Claims.ClaimsIdentity)" />
        <MemberSignature Language="F#" Value="static member GetCredentialsFromClaims : System.Security.Claims.ClaimsIdentity -&gt; Microsoft.Bot.Connector.MicrosoftAppCredentials" Usage="Microsoft.Bot.Connector.ClaimsIdentityEx.GetCredentialsFromClaims claimsIdentity" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.MicrosoftAppCredentials</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="claimsIdentity" Type="System.Security.Claims.ClaimsIdentity" RefType="this" />
        </Parameters>
        <Docs>
          <param name="claimsIdentity">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ClaimsIdentityEx" Member="M:Microsoft.Bot.Connector.ClaimsIdentityEx.GetCredentialsFromClaims(System.Security.Claims.ClaimsIdentity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="CreateConversation">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.ConversationResourceResponse CreateConversation (this Microsoft.Bot.Connector.IConversations operations, Microsoft.Bot.Connector.ConversationParameters parameters);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.ConversationResourceResponse CreateConversation(class Microsoft.Bot.Connector.IConversations operations, class Microsoft.Bot.Connector.ConversationParameters parameters) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateConversation(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.ConversationParameters)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function CreateConversation (operations As IConversations, parameters As ConversationParameters) As ConversationResourceResponse" />
        <MemberSignature Language="F#" Value="static member CreateConversation : Microsoft.Bot.Connector.IConversations * Microsoft.Bot.Connector.ConversationParameters -&gt; Microsoft.Bot.Connector.ConversationResourceResponse" Usage="Microsoft.Bot.Connector.ConversationsExtensions.CreateConversation (operations, parameters)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.ConversationResourceResponse</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="parameters" Type="Microsoft.Bot.Connector.ConversationParameters" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="parameters">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateConversation(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.ConversationParameters)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="CreateConversationAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ConversationResourceResponse&gt; CreateConversationAsync (this Microsoft.Bot.Connector.IConversations operations, Microsoft.Bot.Connector.ConversationParameters parameters, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.ConversationResourceResponse&gt; CreateConversationAsync(class Microsoft.Bot.Connector.IConversations operations, class Microsoft.Bot.Connector.ConversationParameters parameters, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.ConversationParameters,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member CreateConversationAsync : Microsoft.Bot.Connector.IConversations * Microsoft.Bot.Connector.ConversationParameters * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ConversationResourceResponse&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.CreateConversationAsync (operations, parameters, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ConversationResourceResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="parameters" Type="Microsoft.Bot.Connector.ConversationParameters" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="parameters">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.ConversationParameters,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="CreateConversationAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ConversationResourceResponse&gt; CreateConversationAsync (this Microsoft.Bot.Connector.IConversations operations, Microsoft.Bot.Schema.ConversationParameters parameters, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Schema.ConversationResourceResponse&gt; CreateConversationAsync(class Microsoft.Bot.Connector.IConversations operations, class Microsoft.Bot.Schema.ConversationParameters parameters, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.ConversationParameters,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member CreateConversationAsync : Microsoft.Bot.Connector.IConversations * Microsoft.Bot.Schema.ConversationParameters * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ConversationResourceResponse&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.CreateConversationAsync (operations, parameters, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ConversationResourceResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" RefType="this" Index="0" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="parameters" Type="Microsoft.Bot.Schema.ConversationParameters" Index="1" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="botbuilder-dotnet-stable" />
        </Parameters>
        <Docs>
          <param name="operations">
             The operations group for this extension method.
             </param>
          <param name="parameters">
             Parameters to create the conversation from
             </param>
          <param name="cancellationToken">
             The cancellation token.
             </param>
          <summary>
             CreateConversation
             </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.ConversationParameters,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="CreateDirectConversation">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.ConversationResourceResponse CreateDirectConversation (this Microsoft.Bot.Connector.IConversations operations, Microsoft.Bot.Connector.ChannelAccount bot, Microsoft.Bot.Connector.ChannelAccount user, Microsoft.Bot.Connector.Activity activity = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.ConversationResourceResponse CreateDirectConversation(class Microsoft.Bot.Connector.IConversations operations, class Microsoft.Bot.Connector.ChannelAccount bot, class Microsoft.Bot.Connector.ChannelAccount user, class Microsoft.Bot.Connector.Activity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversation(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.ChannelAccount,Microsoft.Bot.Connector.ChannelAccount,Microsoft.Bot.Connector.Activity)" />
        <MemberSignature Language="F#" Value="static member CreateDirectConversation : Microsoft.Bot.Connector.IConversations * Microsoft.Bot.Connector.ChannelAccount * Microsoft.Bot.Connector.ChannelAccount * Microsoft.Bot.Connector.Activity -&gt; Microsoft.Bot.Connector.ConversationResourceResponse" Usage="Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversation (operations, bot, user, activity)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.ConversationResourceResponse</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="bot" Type="Microsoft.Bot.Connector.ChannelAccount" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="user" Type="Microsoft.Bot.Connector.ChannelAccount" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.Activity" Index="3" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="bot">To be added.</param>
          <param name="user">To be added.</param>
          <param name="activity">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversation(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.ChannelAccount,Microsoft.Bot.Connector.ChannelAccount,Microsoft.Bot.Connector.Activity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="CreateDirectConversation">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Schema.ConversationResourceResponse CreateDirectConversation (this Microsoft.Bot.Connector.IConversations operations, Microsoft.Bot.Schema.ChannelAccount bot, Microsoft.Bot.Schema.ChannelAccount user, Microsoft.Bot.Schema.Activity activity = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Schema.ConversationResourceResponse CreateDirectConversation(class Microsoft.Bot.Connector.IConversations operations, class Microsoft.Bot.Schema.ChannelAccount bot, class Microsoft.Bot.Schema.ChannelAccount user, class Microsoft.Bot.Schema.Activity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversation(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.ChannelAccount,Microsoft.Bot.Schema.ChannelAccount,Microsoft.Bot.Schema.Activity)" />
        <MemberSignature Language="F#" Value="static member CreateDirectConversation : Microsoft.Bot.Connector.IConversations * Microsoft.Bot.Schema.ChannelAccount * Microsoft.Bot.Schema.ChannelAccount * Microsoft.Bot.Schema.Activity -&gt; Microsoft.Bot.Schema.ConversationResourceResponse" Usage="Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversation (operations, bot, user, activity)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Schema.ConversationResourceResponse</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" RefType="this" Index="0" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="bot" Type="Microsoft.Bot.Schema.ChannelAccount" Index="1" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="user" Type="Microsoft.Bot.Schema.ChannelAccount" Index="2" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="activity" Type="Microsoft.Bot.Schema.Activity" Index="3" FrameworkAlternate="botbuilder-dotnet-stable" />
        </Parameters>
        <Docs>
          <param name="operations">The operations group for this extension method.</param>
          <param name="bot">Bot to create conversation from</param>
          <param name="user">User to create conversation with</param>
          <param name="activity">(OPTIONAL) initial message to send to the new conversation</param>
          <summary>
            Create a new direct conversation between a bot and a user
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversation(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.ChannelAccount,Microsoft.Bot.Schema.ChannelAccount,Microsoft.Bot.Schema.Activity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="CreateDirectConversation">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.ConversationResourceResponse CreateDirectConversation (this Microsoft.Bot.Connector.IConversations operations, string botAddress, string userAddress, Microsoft.Bot.Connector.Activity activity = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.ConversationResourceResponse CreateDirectConversation(class Microsoft.Bot.Connector.IConversations operations, string botAddress, string userAddress, class Microsoft.Bot.Connector.Activity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversation(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Connector.Activity)" />
        <MemberSignature Language="F#" Value="static member CreateDirectConversation : Microsoft.Bot.Connector.IConversations * string * string * Microsoft.Bot.Connector.Activity -&gt; Microsoft.Bot.Connector.ConversationResourceResponse" Usage="Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversation (operations, botAddress, userAddress, activity)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.ConversationResourceResponse</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="botAddress" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="userAddress" Type="System.String" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.Activity" Index="3" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="botAddress">To be added.</param>
          <param name="userAddress">To be added.</param>
          <param name="activity">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversation(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Connector.Activity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="CreateDirectConversation">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Schema.ConversationResourceResponse CreateDirectConversation (this Microsoft.Bot.Connector.IConversations operations, string botAddress, string userAddress, Microsoft.Bot.Schema.Activity activity = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Schema.ConversationResourceResponse CreateDirectConversation(class Microsoft.Bot.Connector.IConversations operations, string botAddress, string userAddress, class Microsoft.Bot.Schema.Activity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversation(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Schema.Activity)" />
        <MemberSignature Language="F#" Value="static member CreateDirectConversation : Microsoft.Bot.Connector.IConversations * string * string * Microsoft.Bot.Schema.Activity -&gt; Microsoft.Bot.Schema.ConversationResourceResponse" Usage="Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversation (operations, botAddress, userAddress, activity)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Schema.ConversationResourceResponse</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" RefType="this" Index="0" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="botAddress" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="userAddress" Type="System.String" Index="2" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="activity" Type="Microsoft.Bot.Schema.Activity" Index="3" FrameworkAlternate="botbuilder-dotnet-stable" />
        </Parameters>
        <Docs>
          <param name="operations">The operations group for this extension method.</param>
          <param name="botAddress">Bot to create conversation from</param>
          <param name="userAddress">User to create conversation with</param>
          <param name="activity">(OPTIONAL) initial message to send to the new conversation</param>
          <summary>
            Create a new direct conversation between a bot and a user
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversation(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Schema.Activity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="CreateDirectConversationAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ConversationResourceResponse&gt; CreateDirectConversationAsync (this Microsoft.Bot.Connector.IConversations operations, Microsoft.Bot.Connector.ChannelAccount bot, Microsoft.Bot.Connector.ChannelAccount user, Microsoft.Bot.Connector.Activity activity = null, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.ConversationResourceResponse&gt; CreateDirectConversationAsync(class Microsoft.Bot.Connector.IConversations operations, class Microsoft.Bot.Connector.ChannelAccount bot, class Microsoft.Bot.Connector.ChannelAccount user, class Microsoft.Bot.Connector.Activity activity, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.ChannelAccount,Microsoft.Bot.Connector.ChannelAccount,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member CreateDirectConversationAsync : Microsoft.Bot.Connector.IConversations * Microsoft.Bot.Connector.ChannelAccount * Microsoft.Bot.Connector.ChannelAccount * Microsoft.Bot.Connector.Activity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ConversationResourceResponse&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversationAsync (operations, bot, user, activity, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ConversationResourceResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="bot" Type="Microsoft.Bot.Connector.ChannelAccount" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="user" Type="Microsoft.Bot.Connector.ChannelAccount" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.Activity" Index="3" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="bot">To be added.</param>
          <param name="user">To be added.</param>
          <param name="activity">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.ChannelAccount,Microsoft.Bot.Connector.ChannelAccount,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="CreateDirectConversationAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ConversationResourceResponse&gt; CreateDirectConversationAsync (this Microsoft.Bot.Connector.IConversations operations, Microsoft.Bot.Schema.ChannelAccount bot, Microsoft.Bot.Schema.ChannelAccount user, Microsoft.Bot.Schema.Activity activity = null, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Schema.ConversationResourceResponse&gt; CreateDirectConversationAsync(class Microsoft.Bot.Connector.IConversations operations, class Microsoft.Bot.Schema.ChannelAccount bot, class Microsoft.Bot.Schema.ChannelAccount user, class Microsoft.Bot.Schema.Activity activity, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.ChannelAccount,Microsoft.Bot.Schema.ChannelAccount,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member CreateDirectConversationAsync : Microsoft.Bot.Connector.IConversations * Microsoft.Bot.Schema.ChannelAccount * Microsoft.Bot.Schema.ChannelAccount * Microsoft.Bot.Schema.Activity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ConversationResourceResponse&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversationAsync (operations, bot, user, activity, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ConversationResourceResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" RefType="this" Index="0" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="bot" Type="Microsoft.Bot.Schema.ChannelAccount" Index="1" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="user" Type="Microsoft.Bot.Schema.ChannelAccount" Index="2" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="activity" Type="Microsoft.Bot.Schema.Activity" Index="3" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="botbuilder-dotnet-stable" />
        </Parameters>
        <Docs>
          <param name="operations">The operations group for this extension method.</param>
          <param name="bot">Bot to create conversation from</param>
          <param name="user">User to create conversation with</param>
          <param name="activity">(OPTIONAL) initial message to send to the new conversation</param>
          <param name="cancellationToken">The cancellation token.</param>
          <summary>
            Create a new direct conversation between a bot and a user
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.ChannelAccount,Microsoft.Bot.Schema.ChannelAccount,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="CreateDirectConversationAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ConversationResourceResponse&gt; CreateDirectConversationAsync (this Microsoft.Bot.Connector.IConversations operations, string botAddress, string userAddress, Microsoft.Bot.Connector.Activity activity = null, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.ConversationResourceResponse&gt; CreateDirectConversationAsync(class Microsoft.Bot.Connector.IConversations operations, string botAddress, string userAddress, class Microsoft.Bot.Connector.Activity activity, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversationAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member CreateDirectConversationAsync : Microsoft.Bot.Connector.IConversations * string * string * Microsoft.Bot.Connector.Activity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ConversationResourceResponse&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversationAsync (operations, botAddress, userAddress, activity, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ConversationResourceResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="botAddress" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="userAddress" Type="System.String" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.Activity" Index="3" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="botAddress">To be added.</param>
          <param name="userAddress">To be added.</param>
          <param name="activity">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversationAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="CreateDirectConversationAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ConversationResourceResponse&gt; CreateDirectConversationAsync (this Microsoft.Bot.Connector.IConversations operations, string botAddress, string userAddress, Microsoft.Bot.Schema.Activity activity = null, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Schema.ConversationResourceResponse&gt; CreateDirectConversationAsync(class Microsoft.Bot.Connector.IConversations operations, string botAddress, string userAddress, class Microsoft.Bot.Schema.Activity activity, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversationAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member CreateDirectConversationAsync : Microsoft.Bot.Connector.IConversations * string * string * Microsoft.Bot.Schema.Activity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ConversationResourceResponse&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversationAsync (operations, botAddress, userAddress, activity, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ConversationResourceResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" RefType="this" Index="0" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="botAddress" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="userAddress" Type="System.String" Index="2" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="activity" Type="Microsoft.Bot.Schema.Activity" Index="3" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="botbuilder-dotnet-stable" />
        </Parameters>
        <Docs>
          <param name="operations">The operations group for this extension method.</param>
          <param name="botAddress">Bot to create conversation from</param>
          <param name="userAddress">User to create conversation with</param>
          <param name="activity">(OPTIONAL) initial message to send to the new conversation</param>
          <param name="cancellationToken">The cancellation token</param>
          <summary>
            Create a new direct conversation between a bot and a user
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.CreateDirectConversationAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="DeleteActivity">
        <MemberSignature Language="C#" Value="public static void DeleteActivity (this Microsoft.Bot.Connector.IConversations operations, string conversationId, string activityId);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteActivity(class Microsoft.Bot.Connector.IConversations operations, string conversationId, string activityId) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.DeleteActivity(Microsoft.Bot.Connector.IConversations,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub DeleteActivity (operations As IConversations, conversationId As String, activityId As String)" />
        <MemberSignature Language="F#" Value="static member DeleteActivity : Microsoft.Bot.Connector.IConversations * string * string -&gt; unit" Usage="Microsoft.Bot.Connector.ConversationsExtensions.DeleteActivity (operations, conversationId, activityId)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="activityId" Type="System.String" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="activityId">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.DeleteActivity(Microsoft.Bot.Connector.IConversations,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="DeleteActivityAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task DeleteActivityAsync (this Microsoft.Bot.Connector.IConversations operations, string conversationId, string activityId, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task DeleteActivityAsync(class Microsoft.Bot.Connector.IConversations operations, string conversationId, string activityId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.DeleteActivityAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member DeleteActivityAsync : Microsoft.Bot.Connector.IConversations * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Bot.Connector.ConversationsExtensions.DeleteActivityAsync (operations, conversationId, activityId, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="activityId" Type="System.String" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">
             The operations group for this extension method.
             </param>
          <param name="conversationId">
             Conversation ID
             </param>
          <param name="activityId">
             activityId to delete
             </param>
          <param name="cancellationToken">
             The cancellation token.
             </param>
          <summary>
             DeleteActivity
             </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.DeleteActivityAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="DeleteConversationMember">
        <MemberSignature Language="C#" Value="public static void DeleteConversationMember (this Microsoft.Bot.Connector.IConversations operations, string conversationId, string memberId);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteConversationMember(class Microsoft.Bot.Connector.IConversations operations, string conversationId, string memberId) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.DeleteConversationMember(Microsoft.Bot.Connector.IConversations,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub DeleteConversationMember (operations As IConversations, conversationId As String, memberId As String)" />
        <MemberSignature Language="F#" Value="static member DeleteConversationMember : Microsoft.Bot.Connector.IConversations * string * string -&gt; unit" Usage="Microsoft.Bot.Connector.ConversationsExtensions.DeleteConversationMember (operations, conversationId, memberId)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="memberId" Type="System.String" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="memberId">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.DeleteConversationMember(Microsoft.Bot.Connector.IConversations,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="DeleteConversationMemberAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task DeleteConversationMemberAsync (this Microsoft.Bot.Connector.IConversations operations, string conversationId, string memberId, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task DeleteConversationMemberAsync(class Microsoft.Bot.Connector.IConversations operations, string conversationId, string memberId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.DeleteConversationMemberAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member DeleteConversationMemberAsync : Microsoft.Bot.Connector.IConversations * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Bot.Connector.ConversationsExtensions.DeleteConversationMemberAsync (operations, conversationId, memberId, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="memberId" Type="System.String" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">
             The operations group for this extension method.
             </param>
          <param name="conversationId">
             Conversation ID
             </param>
          <param name="memberId">
             ID of the member to delete from this conversation
             </param>
          <param name="cancellationToken">
             The cancellation token.
             </param>
          <summary>
             DeleteConversationMember
             </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.DeleteConversationMemberAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="GetActivityMembers">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;Microsoft.Bot.Connector.ChannelAccount&gt; GetActivityMembers (this Microsoft.Bot.Connector.IConversations operations, string conversationId, string activityId);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;class Microsoft.Bot.Connector.ChannelAccount&gt; GetActivityMembers(class Microsoft.Bot.Connector.IConversations operations, string conversationId, string activityId) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.GetActivityMembers(Microsoft.Bot.Connector.IConversations,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetActivityMembers (operations As IConversations, conversationId As String, activityId As String) As IList(Of ChannelAccount)" />
        <MemberSignature Language="F#" Value="static member GetActivityMembers : Microsoft.Bot.Connector.IConversations * string * string -&gt; System.Collections.Generic.IList&lt;Microsoft.Bot.Connector.ChannelAccount&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.GetActivityMembers (operations, conversationId, activityId)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IList&lt;Microsoft.Bot.Connector.ChannelAccount&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="activityId" Type="System.String" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="activityId">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.GetActivityMembers(Microsoft.Bot.Connector.IConversations,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="GetActivityMembersAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.Bot.Connector.ChannelAccount&gt;&gt; GetActivityMembersAsync (this Microsoft.Bot.Connector.IConversations operations, string conversationId, string activityId, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;class Microsoft.Bot.Connector.ChannelAccount&gt;&gt; GetActivityMembersAsync(class Microsoft.Bot.Connector.IConversations operations, string conversationId, string activityId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.GetActivityMembersAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member GetActivityMembersAsync : Microsoft.Bot.Connector.IConversations * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.Bot.Connector.ChannelAccount&gt;&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.GetActivityMembersAsync (operations, conversationId, activityId, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.Bot.Connector.ChannelAccount&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="activityId" Type="System.String" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="activityId">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.GetActivityMembersAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="GetConversationMembers">
        <MemberSignature Language="C#" Value="public static System.Collections.Generic.IList&lt;Microsoft.Bot.Connector.ChannelAccount&gt; GetConversationMembers (this Microsoft.Bot.Connector.IConversations operations, string conversationId);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IList`1&lt;class Microsoft.Bot.Connector.ChannelAccount&gt; GetConversationMembers(class Microsoft.Bot.Connector.IConversations operations, string conversationId) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.GetConversationMembers(Microsoft.Bot.Connector.IConversations,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetConversationMembers (operations As IConversations, conversationId As String) As IList(Of ChannelAccount)" />
        <MemberSignature Language="F#" Value="static member GetConversationMembers : Microsoft.Bot.Connector.IConversations * string -&gt; System.Collections.Generic.IList&lt;Microsoft.Bot.Connector.ChannelAccount&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.GetConversationMembers (operations, conversationId)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Collections.Generic.IList&lt;Microsoft.Bot.Connector.ChannelAccount&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="conversationId">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.GetConversationMembers(Microsoft.Bot.Connector.IConversations,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="GetConversationMembersAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.Bot.Connector.ChannelAccount&gt;&gt; GetConversationMembersAsync (this Microsoft.Bot.Connector.IConversations operations, string conversationId, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;class Microsoft.Bot.Connector.ChannelAccount&gt;&gt; GetConversationMembersAsync(class Microsoft.Bot.Connector.IConversations operations, string conversationId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.GetConversationMembersAsync(Microsoft.Bot.Connector.IConversations,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member GetConversationMembersAsync : Microsoft.Bot.Connector.IConversations * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.Bot.Connector.ChannelAccount&gt;&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.GetConversationMembersAsync (operations, conversationId, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.Bot.Connector.ChannelAccount&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.GetConversationMembersAsync(Microsoft.Bot.Connector.IConversations,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="GetConversationPagedMembers">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.PagedMembersResult GetConversationPagedMembers (this Microsoft.Bot.Connector.IConversations operations, string conversationId, Nullable&lt;int&gt; pageSize = null, string continuationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.PagedMembersResult GetConversationPagedMembers(class Microsoft.Bot.Connector.IConversations operations, string conversationId, valuetype System.Nullable`1&lt;int32&gt; pageSize, string continuationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.GetConversationPagedMembers(Microsoft.Bot.Connector.IConversations,System.String,System.Nullable{System.Int32},System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetConversationPagedMembers (operations As IConversations, conversationId As String, Optional pageSize As Nullable(Of Integer) = null, Optional continuationToken As String = null) As PagedMembersResult" />
        <MemberSignature Language="F#" Value="static member GetConversationPagedMembers : Microsoft.Bot.Connector.IConversations * string * Nullable&lt;int&gt; * string -&gt; Microsoft.Bot.Connector.PagedMembersResult" Usage="Microsoft.Bot.Connector.ConversationsExtensions.GetConversationPagedMembers (operations, conversationId, pageSize, continuationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.PagedMembersResult</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="pageSize" Type="System.Nullable&lt;System.Int32&gt;" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="continuationToken" Type="System.String" Index="3" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="pageSize">To be added.</param>
          <param name="continuationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.GetConversationPagedMembers(Microsoft.Bot.Connector.IConversations,System.String,System.Nullable{System.Int32},System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="GetConversationPagedMembersAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.PagedMembersResult&gt; GetConversationPagedMembersAsync (this Microsoft.Bot.Connector.IConversations operations, string conversationId, Nullable&lt;int&gt; pageSize = null, string continuationToken = null, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.PagedMembersResult&gt; GetConversationPagedMembersAsync(class Microsoft.Bot.Connector.IConversations operations, string conversationId, valuetype System.Nullable`1&lt;int32&gt; pageSize, string continuationToken, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.GetConversationPagedMembersAsync(Microsoft.Bot.Connector.IConversations,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member GetConversationPagedMembersAsync : Microsoft.Bot.Connector.IConversations * string * Nullable&lt;int&gt; * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.PagedMembersResult&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.GetConversationPagedMembersAsync (operations, conversationId, pageSize, continuationToken, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.PagedMembersResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="pageSize" Type="System.Nullable&lt;System.Int32&gt;" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="continuationToken" Type="System.String" Index="3" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="pageSize">To be added.</param>
          <param name="continuationToken">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.GetConversationPagedMembersAsync(Microsoft.Bot.Connector.IConversations,System.String,System.Nullable{System.Int32},System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="GetConversations">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.ConversationsResult GetConversations (this Microsoft.Bot.Connector.IConversations operations, string continuationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.ConversationsResult GetConversations(class Microsoft.Bot.Connector.IConversations operations, string continuationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.GetConversations(Microsoft.Bot.Connector.IConversations,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GetConversations (operations As IConversations, Optional continuationToken As String = null) As ConversationsResult" />
        <MemberSignature Language="F#" Value="static member GetConversations : Microsoft.Bot.Connector.IConversations * string -&gt; Microsoft.Bot.Connector.ConversationsResult" Usage="Microsoft.Bot.Connector.ConversationsExtensions.GetConversations (operations, continuationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.ConversationsResult</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="continuationToken" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="continuationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.GetConversations(Microsoft.Bot.Connector.IConversations,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="GetConversationsAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ConversationsResult&gt; GetConversationsAsync (this Microsoft.Bot.Connector.IConversations operations, string continuationToken = null, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.ConversationsResult&gt; GetConversationsAsync(class Microsoft.Bot.Connector.IConversations operations, string continuationToken, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.GetConversationsAsync(Microsoft.Bot.Connector.IConversations,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member GetConversationsAsync : Microsoft.Bot.Connector.IConversations * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ConversationsResult&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.GetConversationsAsync (operations, continuationToken, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ConversationsResult&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="continuationToken" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="continuationToken">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.GetConversationsAsync(Microsoft.Bot.Connector.IConversations,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="ReplyToActivity">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.ResourceResponse ReplyToActivity (this Microsoft.Bot.Connector.IConversations operations, Microsoft.Bot.Connector.Activity activity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.ResourceResponse ReplyToActivity(class Microsoft.Bot.Connector.IConversations operations, class Microsoft.Bot.Connector.Activity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivity(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity)" />
        <MemberSignature Language="F#" Value="static member ReplyToActivity : Microsoft.Bot.Connector.IConversations * Microsoft.Bot.Connector.Activity -&gt; Microsoft.Bot.Connector.ResourceResponse" Usage="Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivity (operations, activity)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.ResourceResponse</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.Activity" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="activity">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivity(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="ReplyToActivity">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Schema.ResourceResponse ReplyToActivity (this Microsoft.Bot.Connector.IConversations operations, Microsoft.Bot.Schema.Activity activity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Schema.ResourceResponse ReplyToActivity(class Microsoft.Bot.Connector.IConversations operations, class Microsoft.Bot.Schema.Activity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivity(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity)" />
        <MemberSignature Language="F#" Value="static member ReplyToActivity : Microsoft.Bot.Connector.IConversations * Microsoft.Bot.Schema.Activity -&gt; Microsoft.Bot.Schema.ResourceResponse" Usage="Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivity (operations, activity)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Schema.ResourceResponse</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" RefType="this" Index="0" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="activity" Type="Microsoft.Bot.Schema.Activity" Index="1" FrameworkAlternate="botbuilder-dotnet-stable" />
        </Parameters>
        <Docs>
          <param name="operations">
            The operations group for this extension method.
            </param>
          <param name="activity">
            Activity to send
            </param>
          <summary>
            Replyto an activity in an existing conversation
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivity(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="ReplyToActivity">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.ResourceResponse ReplyToActivity (this Microsoft.Bot.Connector.IConversations operations, string conversationId, string activityId, Microsoft.Bot.Connector.Activity activity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.ResourceResponse ReplyToActivity(class Microsoft.Bot.Connector.IConversations operations, string conversationId, string activityId, class Microsoft.Bot.Connector.Activity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivity(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Connector.Activity)" />
        <MemberSignature Language="F#" Value="static member ReplyToActivity : Microsoft.Bot.Connector.IConversations * string * string * Microsoft.Bot.Connector.Activity -&gt; Microsoft.Bot.Connector.ResourceResponse" Usage="Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivity (operations, conversationId, activityId, activity)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.ResourceResponse</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="activityId" Type="System.String" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.Activity" Index="3" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="activityId">To be added.</param>
          <param name="activity">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivity(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Connector.Activity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="ReplyToActivityAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt; ReplyToActivityAsync (this Microsoft.Bot.Connector.IConversations operations, Microsoft.Bot.Connector.Activity activity, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.ResourceResponse&gt; ReplyToActivityAsync(class Microsoft.Bot.Connector.IConversations operations, class Microsoft.Bot.Connector.Activity activity, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivityAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ReplyToActivityAsync : Microsoft.Bot.Connector.IConversations * Microsoft.Bot.Connector.Activity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivityAsync (operations, activity, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.Activity" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="activity">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivityAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="ReplyToActivityAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt; ReplyToActivityAsync (this Microsoft.Bot.Connector.IConversations operations, Microsoft.Bot.Schema.Activity activity, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Schema.ResourceResponse&gt; ReplyToActivityAsync(class Microsoft.Bot.Connector.IConversations operations, class Microsoft.Bot.Schema.Activity activity, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivityAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ReplyToActivityAsync : Microsoft.Bot.Connector.IConversations * Microsoft.Bot.Schema.Activity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivityAsync (operations, activity, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" RefType="this" Index="0" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="activity" Type="Microsoft.Bot.Schema.Activity" Index="1" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="botbuilder-dotnet-stable" />
        </Parameters>
        <Docs>
          <param name="operations">
            The operations group for this extension method.
            </param>
          <param name="activity">
            Activity to send
            </param>
          <param name="cancellationToken">
            The cancellation token.
            </param>
          <summary>
            Reply to an activity in an existing conversation
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivityAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="ReplyToActivityAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt; ReplyToActivityAsync (this Microsoft.Bot.Connector.IConversations operations, string conversationId, string activityId, Microsoft.Bot.Connector.Activity activity, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.ResourceResponse&gt; ReplyToActivityAsync(class Microsoft.Bot.Connector.IConversations operations, string conversationId, string activityId, class Microsoft.Bot.Connector.Activity activity, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivityAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ReplyToActivityAsync : Microsoft.Bot.Connector.IConversations * string * string * Microsoft.Bot.Connector.Activity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivityAsync (operations, conversationId, activityId, activity, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="activityId" Type="System.String" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.Activity" Index="3" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="activityId">To be added.</param>
          <param name="activity">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivityAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="ReplyToActivityAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt; ReplyToActivityAsync (this Microsoft.Bot.Connector.IConversations operations, string conversationId, string activityId, Microsoft.Bot.Schema.Activity activity, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Schema.ResourceResponse&gt; ReplyToActivityAsync(class Microsoft.Bot.Connector.IConversations operations, string conversationId, string activityId, class Microsoft.Bot.Schema.Activity activity, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivityAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member ReplyToActivityAsync : Microsoft.Bot.Connector.IConversations * string * string * Microsoft.Bot.Schema.Activity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivityAsync (operations, conversationId, activityId, activity, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" RefType="this" Index="0" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="activityId" Type="System.String" Index="2" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="activity" Type="Microsoft.Bot.Schema.Activity" Index="3" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="botbuilder-dotnet-stable" />
        </Parameters>
        <Docs>
          <param name="operations">
             The operations group for this extension method.
             </param>
          <param name="conversationId">
             Conversation ID
             </param>
          <param name="activityId">
             activityId the reply is to (OPTIONAL)
             </param>
          <param name="activity">
             Activity to send
             </param>
          <param name="cancellationToken">
             The cancellation token.
             </param>
          <summary>
             ReplyToActivity
             </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.ReplyToActivityAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="SendConversationHistory">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.ResourceResponse SendConversationHistory (this Microsoft.Bot.Connector.IConversations operations, string conversationId, Microsoft.Bot.Connector.Transcript history);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.ResourceResponse SendConversationHistory(class Microsoft.Bot.Connector.IConversations operations, string conversationId, class Microsoft.Bot.Connector.Transcript history) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.SendConversationHistory(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Connector.Transcript)" />
        <MemberSignature Language="F#" Value="static member SendConversationHistory : Microsoft.Bot.Connector.IConversations * string * Microsoft.Bot.Connector.Transcript -&gt; Microsoft.Bot.Connector.ResourceResponse" Usage="Microsoft.Bot.Connector.ConversationsExtensions.SendConversationHistory (operations, conversationId, history)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SendConversationHistory (operations As IConversations, conversationId As String, history As Transcript) As ResourceResponse" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.ResourceResponse</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="history" Type="Microsoft.Bot.Connector.Transcript" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="history">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.SendConversationHistory(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Connector.Transcript)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="SendConversationHistoryAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt; SendConversationHistoryAsync (this Microsoft.Bot.Connector.IConversations operations, string conversationId, Microsoft.Bot.Connector.Transcript history, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.ResourceResponse&gt; SendConversationHistoryAsync(class Microsoft.Bot.Connector.IConversations operations, string conversationId, class Microsoft.Bot.Connector.Transcript history, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.SendConversationHistoryAsync(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Connector.Transcript,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SendConversationHistoryAsync : Microsoft.Bot.Connector.IConversations * string * Microsoft.Bot.Connector.Transcript * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.SendConversationHistoryAsync (operations, conversationId, history, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="history" Type="Microsoft.Bot.Connector.Transcript" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="history">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.SendConversationHistoryAsync(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Connector.Transcript,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="SendConversationHistoryAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt; SendConversationHistoryAsync (this Microsoft.Bot.Connector.IConversations operations, string conversationId, Microsoft.Bot.Schema.Transcript transcript, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Schema.ResourceResponse&gt; SendConversationHistoryAsync(class Microsoft.Bot.Connector.IConversations operations, string conversationId, class Microsoft.Bot.Schema.Transcript transcript, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.SendConversationHistoryAsync(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Schema.Transcript,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SendConversationHistoryAsync : Microsoft.Bot.Connector.IConversations * string * Microsoft.Bot.Schema.Transcript * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.SendConversationHistoryAsync (operations, conversationId, transcript, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" RefType="this" Index="0" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="transcript" Type="Microsoft.Bot.Schema.Transcript" Index="2" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="botbuilder-dotnet-stable" />
        </Parameters>
        <Docs>
          <param name="operations">
             The operations group for this extension method.
             </param>
          <param name="conversationId">
             Conversation ID
             </param>
          <param name="transcript">
             Transcript of activities
             </param>
          <param name="cancellationToken">
             The cancellation token.
             </param>
          <summary>
             SendConversationHistory
             </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.SendConversationHistoryAsync(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Schema.Transcript,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="SendToConversation">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.ResourceResponse SendToConversation (this Microsoft.Bot.Connector.IConversations operations, Microsoft.Bot.Connector.Activity activity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.ResourceResponse SendToConversation(class Microsoft.Bot.Connector.IConversations operations, class Microsoft.Bot.Connector.Activity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversation(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity)" />
        <MemberSignature Language="F#" Value="static member SendToConversation : Microsoft.Bot.Connector.IConversations * Microsoft.Bot.Connector.Activity -&gt; Microsoft.Bot.Connector.ResourceResponse" Usage="Microsoft.Bot.Connector.ConversationsExtensions.SendToConversation (operations, activity)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.ResourceResponse</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.Activity" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="activity">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversation(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="SendToConversation">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Schema.ResourceResponse SendToConversation (this Microsoft.Bot.Connector.IConversations operations, Microsoft.Bot.Schema.Activity activity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Schema.ResourceResponse SendToConversation(class Microsoft.Bot.Connector.IConversations operations, class Microsoft.Bot.Schema.Activity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversation(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity)" />
        <MemberSignature Language="F#" Value="static member SendToConversation : Microsoft.Bot.Connector.IConversations * Microsoft.Bot.Schema.Activity -&gt; Microsoft.Bot.Schema.ResourceResponse" Usage="Microsoft.Bot.Connector.ConversationsExtensions.SendToConversation (operations, activity)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Schema.ResourceResponse</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" RefType="this" Index="0" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="activity" Type="Microsoft.Bot.Schema.Activity" Index="1" FrameworkAlternate="botbuilder-dotnet-stable" />
        </Parameters>
        <Docs>
          <param name="operations">
            The operations group for this extension method.
            </param>
          <param name="activity">
            Activity to send
            </param>
          <summary>
            Send an activity to a conversation
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversation(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="SendToConversation">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.ResourceResponse SendToConversation (this Microsoft.Bot.Connector.IConversations operations, string conversationId, Microsoft.Bot.Connector.Activity activity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.ResourceResponse SendToConversation(class Microsoft.Bot.Connector.IConversations operations, string conversationId, class Microsoft.Bot.Connector.Activity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversation(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Connector.Activity)" />
        <MemberSignature Language="F#" Value="static member SendToConversation : Microsoft.Bot.Connector.IConversations * string * Microsoft.Bot.Connector.Activity -&gt; Microsoft.Bot.Connector.ResourceResponse" Usage="Microsoft.Bot.Connector.ConversationsExtensions.SendToConversation (operations, conversationId, activity)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.ResourceResponse</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.Activity" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="activity">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversation(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Connector.Activity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="SendToConversationAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt; SendToConversationAsync (this Microsoft.Bot.Connector.IConversations operations, Microsoft.Bot.Connector.Activity activity, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.ResourceResponse&gt; SendToConversationAsync(class Microsoft.Bot.Connector.IConversations operations, class Microsoft.Bot.Connector.Activity activity, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SendToConversationAsync : Microsoft.Bot.Connector.IConversations * Microsoft.Bot.Connector.Activity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.SendToConversationAsync (operations, activity, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.Activity" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="activity">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="SendToConversationAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt; SendToConversationAsync (this Microsoft.Bot.Connector.IConversations operations, Microsoft.Bot.Schema.Activity activity, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Schema.ResourceResponse&gt; SendToConversationAsync(class Microsoft.Bot.Connector.IConversations operations, class Microsoft.Bot.Schema.Activity activity, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SendToConversationAsync : Microsoft.Bot.Connector.IConversations * Microsoft.Bot.Schema.Activity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.SendToConversationAsync (operations, activity, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" RefType="this" Index="0" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="activity" Type="Microsoft.Bot.Schema.Activity" Index="1" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="botbuilder-dotnet-stable" />
        </Parameters>
        <Docs>
          <param name="operations">
            The operations group for this extension method.
            </param>
          <param name="activity">
            Activity to send
            </param>
          <param name="cancellationToken">
            The cancellation token.
            </param>
          <summary>
            Send an activity to a conversation
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversationAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="SendToConversationAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt; SendToConversationAsync (this Microsoft.Bot.Connector.IConversations operations, string conversationId, Microsoft.Bot.Connector.Activity activity, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.ResourceResponse&gt; SendToConversationAsync(class Microsoft.Bot.Connector.IConversations operations, string conversationId, class Microsoft.Bot.Connector.Activity activity, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversationAsync(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SendToConversationAsync : Microsoft.Bot.Connector.IConversations * string * Microsoft.Bot.Connector.Activity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.SendToConversationAsync (operations, conversationId, activity, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.Activity" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="activity">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversationAsync(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="SendToConversationAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt; SendToConversationAsync (this Microsoft.Bot.Connector.IConversations operations, string conversationId, Microsoft.Bot.Schema.Activity activity, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Schema.ResourceResponse&gt; SendToConversationAsync(class Microsoft.Bot.Connector.IConversations operations, string conversationId, class Microsoft.Bot.Schema.Activity activity, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversationAsync(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SendToConversationAsync : Microsoft.Bot.Connector.IConversations * string * Microsoft.Bot.Schema.Activity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.SendToConversationAsync (operations, conversationId, activity, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" RefType="this" Index="0" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="activity" Type="Microsoft.Bot.Schema.Activity" Index="2" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="botbuilder-dotnet-stable" />
        </Parameters>
        <Docs>
          <param name="operations">
             The operations group for this extension method.
             </param>
          <param name="conversationId">
             Conversation ID
             </param>
          <param name="activity">
             Activity to send
             </param>
          <param name="cancellationToken">
             The cancellation token.
             </param>
          <summary>
             SendToConversation
             </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.SendToConversationAsync(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="UpdateActivity">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.ResourceResponse UpdateActivity (this Microsoft.Bot.Connector.IConversations operations, Microsoft.Bot.Connector.Activity activity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.ResourceResponse UpdateActivity(class Microsoft.Bot.Connector.IConversations operations, class Microsoft.Bot.Connector.Activity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivity(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity)" />
        <MemberSignature Language="F#" Value="static member UpdateActivity : Microsoft.Bot.Connector.IConversations * Microsoft.Bot.Connector.Activity -&gt; Microsoft.Bot.Connector.ResourceResponse" Usage="Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivity (operations, activity)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.ResourceResponse</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.Activity" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="activity">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivity(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="UpdateActivity">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Schema.ResourceResponse UpdateActivity (this Microsoft.Bot.Connector.IConversations operations, Microsoft.Bot.Schema.Activity activity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Schema.ResourceResponse UpdateActivity(class Microsoft.Bot.Connector.IConversations operations, class Microsoft.Bot.Schema.Activity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivity(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity)" />
        <MemberSignature Language="F#" Value="static member UpdateActivity : Microsoft.Bot.Connector.IConversations * Microsoft.Bot.Schema.Activity -&gt; Microsoft.Bot.Schema.ResourceResponse" Usage="Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivity (operations, activity)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Schema.ResourceResponse</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" RefType="this" Index="0" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="activity" Type="Microsoft.Bot.Schema.Activity" Index="1" FrameworkAlternate="botbuilder-dotnet-stable" />
        </Parameters>
        <Docs>
          <param name="operations">
            The operations group for this extension method.
            </param>
          <param name="activity">
            Activity to update
            </param>
          <summary>
            Update an activity in an existing conversation
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivity(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="UpdateActivity">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.ResourceResponse UpdateActivity (this Microsoft.Bot.Connector.IConversations operations, string conversationId, string activityId, Microsoft.Bot.Connector.Activity activity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.ResourceResponse UpdateActivity(class Microsoft.Bot.Connector.IConversations operations, string conversationId, string activityId, class Microsoft.Bot.Connector.Activity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivity(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Connector.Activity)" />
        <MemberSignature Language="F#" Value="static member UpdateActivity : Microsoft.Bot.Connector.IConversations * string * string * Microsoft.Bot.Connector.Activity -&gt; Microsoft.Bot.Connector.ResourceResponse" Usage="Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivity (operations, conversationId, activityId, activity)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.ResourceResponse</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="activityId" Type="System.String" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.Activity" Index="3" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="activityId">To be added.</param>
          <param name="activity">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivity(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Connector.Activity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="UpdateActivityAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt; UpdateActivityAsync (this Microsoft.Bot.Connector.IConversations operations, Microsoft.Bot.Connector.Activity activity, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.ResourceResponse&gt; UpdateActivityAsync(class Microsoft.Bot.Connector.IConversations operations, class Microsoft.Bot.Connector.Activity activity, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivityAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member UpdateActivityAsync : Microsoft.Bot.Connector.IConversations * Microsoft.Bot.Connector.Activity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivityAsync (operations, activity, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.Activity" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="activity">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivityAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="UpdateActivityAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt; UpdateActivityAsync (this Microsoft.Bot.Connector.IConversations operations, Microsoft.Bot.Schema.Activity activity, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Schema.ResourceResponse&gt; UpdateActivityAsync(class Microsoft.Bot.Connector.IConversations operations, class Microsoft.Bot.Schema.Activity activity, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivityAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member UpdateActivityAsync : Microsoft.Bot.Connector.IConversations * Microsoft.Bot.Schema.Activity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivityAsync (operations, activity, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" RefType="this" Index="0" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="activity" Type="Microsoft.Bot.Schema.Activity" Index="1" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="2" FrameworkAlternate="botbuilder-dotnet-stable" />
        </Parameters>
        <Docs>
          <param name="operations">
            The operations group for this extension method.
            </param>
          <param name="activity">
            Activity to update
            </param>
          <param name="cancellationToken">
            The cancellation token.
            </param>
          <summary>
            Update an activity in an existing conversation
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivityAsync(Microsoft.Bot.Connector.IConversations,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="UpdateActivityAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt; UpdateActivityAsync (this Microsoft.Bot.Connector.IConversations operations, string conversationId, string activityId, Microsoft.Bot.Connector.Activity activity, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.ResourceResponse&gt; UpdateActivityAsync(class Microsoft.Bot.Connector.IConversations operations, string conversationId, string activityId, class Microsoft.Bot.Connector.Activity activity, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivityAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member UpdateActivityAsync : Microsoft.Bot.Connector.IConversations * string * string * Microsoft.Bot.Connector.Activity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivityAsync (operations, conversationId, activityId, activity, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="activityId" Type="System.String" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="activity" Type="Microsoft.Bot.Connector.Activity" Index="3" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="activityId">To be added.</param>
          <param name="activity">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivityAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Connector.Activity,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="UpdateActivityAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt; UpdateActivityAsync (this Microsoft.Bot.Connector.IConversations operations, string conversationId, string activityId, Microsoft.Bot.Schema.Activity activity, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Schema.ResourceResponse&gt; UpdateActivityAsync(class Microsoft.Bot.Connector.IConversations operations, string conversationId, string activityId, class Microsoft.Bot.Schema.Activity activity, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivityAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member UpdateActivityAsync : Microsoft.Bot.Connector.IConversations * string * string * Microsoft.Bot.Schema.Activity * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivityAsync (operations, conversationId, activityId, activity, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" RefType="this" Index="0" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="activityId" Type="System.String" Index="2" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="activity" Type="Microsoft.Bot.Schema.Activity" Index="3" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="4" FrameworkAlternate="botbuilder-dotnet-stable" />
        </Parameters>
        <Docs>
          <param name="operations">
             The operations group for this extension method.
             </param>
          <param name="conversationId">
             Conversation ID
             </param>
          <param name="activityId">
             activityId to update
             </param>
          <param name="activity">
             replacement Activity
             </param>
          <param name="cancellationToken">
             The cancellation token.
             </param>
          <summary>
             UpdateActivity
             </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.UpdateActivityAsync(Microsoft.Bot.Connector.IConversations,System.String,System.String,Microsoft.Bot.Schema.Activity,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="UploadAttachment">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.ResourceResponse UploadAttachment (this Microsoft.Bot.Connector.IConversations operations, string conversationId, Microsoft.Bot.Connector.AttachmentData attachmentUpload);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.ResourceResponse UploadAttachment(class Microsoft.Bot.Connector.IConversations operations, string conversationId, class Microsoft.Bot.Connector.AttachmentData attachmentUpload) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.UploadAttachment(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Connector.AttachmentData)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function UploadAttachment (operations As IConversations, conversationId As String, attachmentUpload As AttachmentData) As ResourceResponse" />
        <MemberSignature Language="F#" Value="static member UploadAttachment : Microsoft.Bot.Connector.IConversations * string * Microsoft.Bot.Connector.AttachmentData -&gt; Microsoft.Bot.Connector.ResourceResponse" Usage="Microsoft.Bot.Connector.ConversationsExtensions.UploadAttachment (operations, conversationId, attachmentUpload)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.ResourceResponse</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="attachmentUpload" Type="Microsoft.Bot.Connector.AttachmentData" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="attachmentUpload">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.UploadAttachment(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Connector.AttachmentData)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="UploadAttachmentAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt; UploadAttachmentAsync (this Microsoft.Bot.Connector.IConversations operations, string conversationId, Microsoft.Bot.Connector.AttachmentData attachmentUpload, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Connector.ResourceResponse&gt; UploadAttachmentAsync(class Microsoft.Bot.Connector.IConversations operations, string conversationId, class Microsoft.Bot.Connector.AttachmentData attachmentUpload, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.UploadAttachmentAsync(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Connector.AttachmentData,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member UploadAttachmentAsync : Microsoft.Bot.Connector.IConversations * string * Microsoft.Bot.Connector.AttachmentData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.UploadAttachmentAsync (operations, conversationId, attachmentUpload, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Connector.ResourceResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" Index="0" FrameworkAlternate="botbuilder-dotnet-3.0" RefType="this" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="attachmentUpload" Type="Microsoft.Bot.Connector.AttachmentData" Index="2" FrameworkAlternate="botbuilder-dotnet-3.0" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="botbuilder-dotnet-3.0" />
        </Parameters>
        <Docs>
          <param name="operations">To be added.</param>
          <param name="conversationId">To be added.</param>
          <param name="attachmentUpload">To be added.</param>
          <param name="cancellationToken">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.UploadAttachmentAsync(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Connector.AttachmentData,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IConversations" />
      </Targets>
      <Member MemberName="UploadAttachmentAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt; UploadAttachmentAsync (this Microsoft.Bot.Connector.IConversations operations, string conversationId, Microsoft.Bot.Schema.AttachmentData attachmentUpload, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Schema.ResourceResponse&gt; UploadAttachmentAsync(class Microsoft.Bot.Connector.IConversations operations, string conversationId, class Microsoft.Bot.Schema.AttachmentData attachmentUpload, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.ConversationsExtensions.UploadAttachmentAsync(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Schema.AttachmentData,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member UploadAttachmentAsync : Microsoft.Bot.Connector.IConversations * string * Microsoft.Bot.Schema.AttachmentData * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt;" Usage="Microsoft.Bot.Connector.ConversationsExtensions.UploadAttachmentAsync (operations, conversationId, attachmentUpload, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.ResourceResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IConversations" RefType="this" Index="0" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="conversationId" Type="System.String" Index="1" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="attachmentUpload" Type="Microsoft.Bot.Schema.AttachmentData" Index="2" FrameworkAlternate="botbuilder-dotnet-stable" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" Index="3" FrameworkAlternate="botbuilder-dotnet-stable" />
        </Parameters>
        <Docs>
          <param name="operations">
             The operations group for this extension method.
             </param>
          <param name="conversationId">
             Conversation ID
             </param>
          <param name="attachmentUpload">
             Attachment data
             </param>
          <param name="cancellationToken">
             The cancellation token.
             </param>
          <summary>
             UploadAttachment
             </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.ConversationsExtensions" Member="M:Microsoft.Bot.Connector.ConversationsExtensions.UploadAttachmentAsync(Microsoft.Bot.Connector.IConversations,System.String,Microsoft.Bot.Schema.AttachmentData,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.AnimationCard" />
      </Targets>
      <Member MemberName="ToAttachment">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.Attachment ToAttachment (this Microsoft.Bot.Connector.AnimationCard card);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.Attachment ToAttachment(class Microsoft.Bot.Connector.AnimationCard card) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.AnimationCard)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToAttachment (card As AnimationCard) As Attachment" />
        <MemberSignature Language="F#" Value="static member ToAttachment : Microsoft.Bot.Connector.AnimationCard -&gt; Microsoft.Bot.Connector.Attachment" Usage="Microsoft.Bot.Connector.Extensions.ToAttachment card" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.Attachment</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="card" Type="Microsoft.Bot.Connector.AnimationCard" RefType="this" />
        </Parameters>
        <Docs>
          <param name="card">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.Extensions" Member="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.AnimationCard)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.AudioCard" />
      </Targets>
      <Member MemberName="ToAttachment">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.Attachment ToAttachment (this Microsoft.Bot.Connector.AudioCard card);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.Attachment ToAttachment(class Microsoft.Bot.Connector.AudioCard card) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.AudioCard)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToAttachment (card As AudioCard) As Attachment" />
        <MemberSignature Language="F#" Value="static member ToAttachment : Microsoft.Bot.Connector.AudioCard -&gt; Microsoft.Bot.Connector.Attachment" Usage="Microsoft.Bot.Connector.Extensions.ToAttachment card" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.Attachment</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="card" Type="Microsoft.Bot.Connector.AudioCard" RefType="this" />
        </Parameters>
        <Docs>
          <param name="card">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.Extensions" Member="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.AudioCard)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.HeroCard" />
      </Targets>
      <Member MemberName="ToAttachment">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.Attachment ToAttachment (this Microsoft.Bot.Connector.HeroCard card);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.Attachment ToAttachment(class Microsoft.Bot.Connector.HeroCard card) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.HeroCard)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToAttachment (card As HeroCard) As Attachment" />
        <MemberSignature Language="F#" Value="static member ToAttachment : Microsoft.Bot.Connector.HeroCard -&gt; Microsoft.Bot.Connector.Attachment" Usage="Microsoft.Bot.Connector.Extensions.ToAttachment card" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.Attachment</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="card" Type="Microsoft.Bot.Connector.HeroCard" RefType="this" />
        </Parameters>
        <Docs>
          <param name="card">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.Extensions" Member="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.HeroCard)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.ReceiptCard" />
      </Targets>
      <Member MemberName="ToAttachment">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.Attachment ToAttachment (this Microsoft.Bot.Connector.ReceiptCard card);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.Attachment ToAttachment(class Microsoft.Bot.Connector.ReceiptCard card) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.ReceiptCard)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToAttachment (card As ReceiptCard) As Attachment" />
        <MemberSignature Language="F#" Value="static member ToAttachment : Microsoft.Bot.Connector.ReceiptCard -&gt; Microsoft.Bot.Connector.Attachment" Usage="Microsoft.Bot.Connector.Extensions.ToAttachment card" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.Attachment</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="card" Type="Microsoft.Bot.Connector.ReceiptCard" RefType="this" />
        </Parameters>
        <Docs>
          <param name="card">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.Extensions" Member="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.ReceiptCard)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.SigninCard" />
      </Targets>
      <Member MemberName="ToAttachment">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.Attachment ToAttachment (this Microsoft.Bot.Connector.SigninCard card);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.Attachment ToAttachment(class Microsoft.Bot.Connector.SigninCard card) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.SigninCard)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToAttachment (card As SigninCard) As Attachment" />
        <MemberSignature Language="F#" Value="static member ToAttachment : Microsoft.Bot.Connector.SigninCard -&gt; Microsoft.Bot.Connector.Attachment" Usage="Microsoft.Bot.Connector.Extensions.ToAttachment card" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.Attachment</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="card" Type="Microsoft.Bot.Connector.SigninCard" RefType="this" />
        </Parameters>
        <Docs>
          <param name="card">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.Extensions" Member="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.SigninCard)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.ThumbnailCard" />
      </Targets>
      <Member MemberName="ToAttachment">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.Attachment ToAttachment (this Microsoft.Bot.Connector.ThumbnailCard card);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.Attachment ToAttachment(class Microsoft.Bot.Connector.ThumbnailCard card) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.ThumbnailCard)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToAttachment (card As ThumbnailCard) As Attachment" />
        <MemberSignature Language="F#" Value="static member ToAttachment : Microsoft.Bot.Connector.ThumbnailCard -&gt; Microsoft.Bot.Connector.Attachment" Usage="Microsoft.Bot.Connector.Extensions.ToAttachment card" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.Attachment</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="card" Type="Microsoft.Bot.Connector.ThumbnailCard" RefType="this" />
        </Parameters>
        <Docs>
          <param name="card">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.Extensions" Member="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.ThumbnailCard)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.VideoCard" />
      </Targets>
      <Member MemberName="ToAttachment">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Connector.Attachment ToAttachment (this Microsoft.Bot.Connector.VideoCard card);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Connector.Attachment ToAttachment(class Microsoft.Bot.Connector.VideoCard card) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.VideoCard)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToAttachment (card As VideoCard) As Attachment" />
        <MemberSignature Language="F#" Value="static member ToAttachment : Microsoft.Bot.Connector.VideoCard -&gt; Microsoft.Bot.Connector.Attachment" Usage="Microsoft.Bot.Connector.Extensions.ToAttachment card" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Connector.Attachment</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="card" Type="Microsoft.Bot.Connector.VideoCard" RefType="this" />
        </Parameters>
        <Docs>
          <param name="card">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.Extensions" Member="M:Microsoft.Bot.Connector.Extensions.ToAttachment(Microsoft.Bot.Connector.VideoCard)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="System.Net.Http.HttpClient" />
      </Targets>
      <Member MemberName="AddAPIAuthorization">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task AddAPIAuthorization (this System.Net.Http.HttpClient client, string appId = null, string password = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task AddAPIAuthorization(class System.Net.Http.HttpClient client, string appId, string password) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.HttpClientEx.AddAPIAuthorization(System.Net.Http.HttpClient,System.String,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AddAPIAuthorization (client As HttpClient, Optional appId As String = null, Optional password As String = null) As Task" />
        <MemberSignature Language="F#" Value="static member AddAPIAuthorization : System.Net.Http.HttpClient * string * string -&gt; System.Threading.Tasks.Task" Usage="Microsoft.Bot.Connector.HttpClientEx.AddAPIAuthorization (client, appId, password)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="client" Type="System.Net.Http.HttpClient" RefType="this" />
          <Parameter Name="appId" Type="System.String" />
          <Parameter Name="password" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="client">To be added.</param>
          <param name="appId">To be added.</param>
          <param name="password">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.HttpClientEx" Member="M:Microsoft.Bot.Connector.HttpClientEx.AddAPIAuthorization(System.Net.Http.HttpClient,System.String,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IdentityToken" />
      </Targets>
      <Member MemberName="ValidateServiceUrlClaim">
        <MemberSignature Language="C#" Value="public static void ValidateServiceUrlClaim (this Microsoft.Bot.Connector.IdentityToken token, System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Connector.IActivity&gt; activities);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ValidateServiceUrlClaim(class Microsoft.Bot.Connector.IdentityToken token, class System.Collections.Generic.IEnumerable`1&lt;class Microsoft.Bot.Connector.IActivity&gt; activities) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.IdentityTokenExtensions.ValidateServiceUrlClaim(Microsoft.Bot.Connector.IdentityToken,System.Collections.Generic.IEnumerable{Microsoft.Bot.Connector.IActivity})" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Sub ValidateServiceUrlClaim (token As IdentityToken, activities As IEnumerable(Of IActivity))" />
        <MemberSignature Language="F#" Value="static member ValidateServiceUrlClaim : Microsoft.Bot.Connector.IdentityToken * seq&lt;Microsoft.Bot.Connector.IActivity&gt; -&gt; unit" Usage="Microsoft.Bot.Connector.IdentityTokenExtensions.ValidateServiceUrlClaim (token, activities)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Void</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="token" Type="Microsoft.Bot.Connector.IdentityToken" RefType="this" />
          <Parameter Name="activities" Type="System.Collections.Generic.IEnumerable&lt;Microsoft.Bot.Connector.IActivity&gt;" />
        </Parameters>
        <Docs>
          <param name="token">To be added.</param>
          <param name="activities">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.IdentityTokenExtensions" Member="M:Microsoft.Bot.Connector.IdentityTokenExtensions.ValidateServiceUrlClaim(Microsoft.Bot.Connector.IdentityToken,System.Collections.Generic.IEnumerable{Microsoft.Bot.Connector.IActivity})" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:System.TimeSpan" />
      </Targets>
      <Member MemberName="WithRandomNoise">
        <MemberSignature Language="C#" Value="public static TimeSpan WithRandomNoise (this TimeSpan delay, double multiplier = 0.1);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.TimeSpan WithRandomNoise(valuetype System.TimeSpan delay, float64 multiplier) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.Shared.Authentication.TimeSpanExtensions.WithRandomNoise(System.TimeSpan,System.Double)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function WithRandomNoise (delay As TimeSpan, Optional multiplier As Double = 0.1) As TimeSpan" />
        <MemberSignature Language="F#" Value="static member WithRandomNoise : TimeSpan * double -&gt; TimeSpan" Usage="Microsoft.Bot.Connector.Shared.Authentication.TimeSpanExtensions.WithRandomNoise (delay, multiplier)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.TimeSpan</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="delay" Type="System.TimeSpan" RefType="this" />
          <Parameter Name="multiplier" Type="System.Double" />
        </Parameters>
        <Docs>
          <param name="delay">To be added.</param>
          <param name="multiplier">To be added.</param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.Shared.Authentication.TimeSpanExtensions" Member="M:Microsoft.Bot.Connector.Shared.Authentication.TimeSpanExtensions.WithRandomNoise(System.TimeSpan,System.Double)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IUserToken" />
      </Targets>
      <Member MemberName="GetAadTokensAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.IDictionary&lt;string,Microsoft.Bot.Schema.TokenResponse&gt;&gt; GetAadTokensAsync (this Microsoft.Bot.Connector.IUserToken operations, string userId, string connectionName, Microsoft.Bot.Schema.AadResourceUrls aadResourceUrls, string channelId = null, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IDictionary`2&lt;string, class Microsoft.Bot.Schema.TokenResponse&gt;&gt; GetAadTokensAsync(class Microsoft.Bot.Connector.IUserToken operations, string userId, string connectionName, class Microsoft.Bot.Schema.AadResourceUrls aadResourceUrls, string channelId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.UserTokenExtensions.GetAadTokensAsync(Microsoft.Bot.Connector.IUserToken,System.String,System.String,Microsoft.Bot.Schema.AadResourceUrls,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member GetAadTokensAsync : Microsoft.Bot.Connector.IUserToken * string * string * Microsoft.Bot.Schema.AadResourceUrls * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IDictionary&lt;string, Microsoft.Bot.Schema.TokenResponse&gt;&gt;" Usage="Microsoft.Bot.Connector.UserTokenExtensions.GetAadTokensAsync (operations, userId, connectionName, aadResourceUrls, channelId, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IDictionary&lt;System.String,Microsoft.Bot.Schema.TokenResponse&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IUserToken" RefType="this" />
          <Parameter Name="userId" Type="System.String" />
          <Parameter Name="connectionName" Type="System.String" />
          <Parameter Name="aadResourceUrls" Type="Microsoft.Bot.Schema.AadResourceUrls" />
          <Parameter Name="channelId" Type="System.String" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="operations">
            The operations group for this extension method.
            </param>
          <param name="userId" />
          <param name="connectionName" />
          <param name="aadResourceUrls" />
          <param name="channelId" />
          <param name="cancellationToken">
            The cancellation token.
            </param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.UserTokenExtensions" Member="M:Microsoft.Bot.Connector.UserTokenExtensions.GetAadTokensAsync(Microsoft.Bot.Connector.IUserToken,System.String,System.String,Microsoft.Bot.Schema.AadResourceUrls,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IUserToken" />
      </Targets>
      <Member MemberName="GetTokenAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.TokenResponse&gt; GetTokenAsync (this Microsoft.Bot.Connector.IUserToken operations, string userId, string connectionName, string channelId = null, string code = null, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Schema.TokenResponse&gt; GetTokenAsync(class Microsoft.Bot.Connector.IUserToken operations, string userId, string connectionName, string channelId, string code, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.UserTokenExtensions.GetTokenAsync(Microsoft.Bot.Connector.IUserToken,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member GetTokenAsync : Microsoft.Bot.Connector.IUserToken * string * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.TokenResponse&gt;" Usage="Microsoft.Bot.Connector.UserTokenExtensions.GetTokenAsync (operations, userId, connectionName, channelId, code, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Schema.TokenResponse&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IUserToken" RefType="this" />
          <Parameter Name="userId" Type="System.String" />
          <Parameter Name="connectionName" Type="System.String" />
          <Parameter Name="channelId" Type="System.String" />
          <Parameter Name="code" Type="System.String" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="operations">
            The operations group for this extension method.
            </param>
          <param name="userId" />
          <param name="connectionName" />
          <param name="channelId" />
          <param name="code" />
          <param name="cancellationToken">
            The cancellation token.
            </param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.UserTokenExtensions" Member="M:Microsoft.Bot.Connector.UserTokenExtensions.GetTokenAsync(Microsoft.Bot.Connector.IUserToken,System.String,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IUserToken" />
      </Targets>
      <Member MemberName="GetTokenStatusAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.Bot.Schema.TokenStatus&gt;&gt; GetTokenStatusAsync (this Microsoft.Bot.Connector.IUserToken operations, string userId, string channelId = null, string include = null, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class System.Collections.Generic.IList`1&lt;class Microsoft.Bot.Schema.TokenStatus&gt;&gt; GetTokenStatusAsync(class Microsoft.Bot.Connector.IUserToken operations, string userId, string channelId, string include, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.UserTokenExtensions.GetTokenStatusAsync(Microsoft.Bot.Connector.IUserToken,System.String,System.String,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member GetTokenStatusAsync : Microsoft.Bot.Connector.IUserToken * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.Bot.Schema.TokenStatus&gt;&gt;" Usage="Microsoft.Bot.Connector.UserTokenExtensions.GetTokenStatusAsync (operations, userId, channelId, include, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Collections.Generic.IList&lt;Microsoft.Bot.Schema.TokenStatus&gt;&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IUserToken" RefType="this" />
          <Parameter Name="userId" Type="System.String" />
          <Parameter Name="channelId" Type="System.String" />
          <Parameter Name="include" Type="System.String" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="operations">
            The operations group for this extension method.
            </param>
          <param name="userId" />
          <param name="channelId" />
          <param name="include" />
          <param name="cancellationToken">
            The cancellation token.
            </param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.UserTokenExtensions" Member="M:Microsoft.Bot.Connector.UserTokenExtensions.GetTokenStatusAsync(Microsoft.Bot.Connector.IUserToken,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Connector.IUserToken" />
      </Targets>
      <Member MemberName="SignOutAsync">
        <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;object&gt; SignOutAsync (this Microsoft.Bot.Connector.IUserToken operations, string userId, string connectionName = null, string channelId = null, System.Threading.CancellationToken cancellationToken = null);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;object&gt; SignOutAsync(class Microsoft.Bot.Connector.IUserToken operations, string userId, string connectionName, string channelId, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Connector.UserTokenExtensions.SignOutAsync(Microsoft.Bot.Connector.IUserToken,System.String,System.String,System.String,System.Threading.CancellationToken)" />
        <MemberSignature Language="F#" Value="static member SignOutAsync : Microsoft.Bot.Connector.IUserToken * string * string * string * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="Microsoft.Bot.Connector.UserTokenExtensions.SignOutAsync (operations, userId, connectionName, channelId, cancellationToken)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="operations" Type="Microsoft.Bot.Connector.IUserToken" RefType="this" />
          <Parameter Name="userId" Type="System.String" />
          <Parameter Name="connectionName" Type="System.String" />
          <Parameter Name="channelId" Type="System.String" />
          <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
        </Parameters>
        <Docs>
          <param name="operations">
            The operations group for this extension method.
            </param>
          <param name="userId" />
          <param name="connectionName" />
          <param name="channelId" />
          <param name="cancellationToken">
            The cancellation token.
            </param>
          <summary>To be added.</summary>
        </Docs>
        <Link Type="Microsoft.Bot.Connector.UserTokenExtensions" Member="M:Microsoft.Bot.Connector.UserTokenExtensions.SignOutAsync(Microsoft.Bot.Connector.IUserToken,System.String,System.String,System.String,System.Threading.CancellationToken)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Schema.IMessageActivity" />
      </Targets>
      <Member MemberName="MentionsId">
        <MemberSignature Language="C#" Value="public static bool MentionsId (this Microsoft.Bot.Schema.IMessageActivity activity, string id);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool MentionsId(class Microsoft.Bot.Schema.IMessageActivity activity, string id) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Schema.ActivityExtensions.MentionsId(Microsoft.Bot.Schema.IMessageActivity,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MentionsId (activity As IMessageActivity, id As String) As Boolean" />
        <MemberSignature Language="F#" Value="static member MentionsId : Microsoft.Bot.Schema.IMessageActivity * string -&gt; bool" Usage="Microsoft.Bot.Schema.ActivityExtensions.MentionsId (activity, id)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="activity" Type="Microsoft.Bot.Schema.IMessageActivity" RefType="this" />
          <Parameter Name="id" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="activity" />
          <param name="id">ChannelAccount.Id</param>
          <summary>
            Is there a mention of Id in the Text Property 
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Schema.ActivityExtensions" Member="M:Microsoft.Bot.Schema.ActivityExtensions.MentionsId(Microsoft.Bot.Schema.IMessageActivity,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Schema.IMessageActivity" />
      </Targets>
      <Member MemberName="MentionsRecipient">
        <MemberSignature Language="C#" Value="public static bool MentionsRecipient (this Microsoft.Bot.Schema.IMessageActivity activity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool MentionsRecipient(class Microsoft.Bot.Schema.IMessageActivity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Schema.ActivityExtensions.MentionsRecipient(Microsoft.Bot.Schema.IMessageActivity)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function MentionsRecipient (activity As IMessageActivity) As Boolean" />
        <MemberSignature Language="F#" Value="static member MentionsRecipient : Microsoft.Bot.Schema.IMessageActivity -&gt; bool" Usage="Microsoft.Bot.Schema.ActivityExtensions.MentionsRecipient activity" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.Boolean</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="activity" Type="Microsoft.Bot.Schema.IMessageActivity" RefType="this" />
        </Parameters>
        <Docs>
          <param name="activity" />
          <summary>
            Is there a mention of Recipient.Id in the Text Property 
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Schema.ActivityExtensions" Member="M:Microsoft.Bot.Schema.ActivityExtensions.MentionsRecipient(Microsoft.Bot.Schema.IMessageActivity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Schema.IMessageActivity" />
      </Targets>
      <Member MemberName="RemoveMentionText">
        <MemberSignature Language="C#" Value="public static string RemoveMentionText (this Microsoft.Bot.Schema.IMessageActivity activity, string id);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string RemoveMentionText(class Microsoft.Bot.Schema.IMessageActivity activity, string id) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Schema.ActivityExtensions.RemoveMentionText(Microsoft.Bot.Schema.IMessageActivity,System.String)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveMentionText (activity As IMessageActivity, id As String) As String" />
        <MemberSignature Language="F#" Value="static member RemoveMentionText : Microsoft.Bot.Schema.IMessageActivity * string -&gt; string" Usage="Microsoft.Bot.Schema.ActivityExtensions.RemoveMentionText (activity, id)" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="activity" Type="Microsoft.Bot.Schema.IMessageActivity" RefType="this" />
          <Parameter Name="id" Type="System.String" />
        </Parameters>
        <Docs>
          <param name="activity" />
          <param name="id">id to match</param>
          <summary>
            Replace any mention text for given id from Text property
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Schema.ActivityExtensions" Member="M:Microsoft.Bot.Schema.ActivityExtensions.RemoveMentionText(Microsoft.Bot.Schema.IMessageActivity,System.String)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Schema.IMessageActivity" />
      </Targets>
      <Member MemberName="RemoveRecipientMention">
        <MemberSignature Language="C#" Value="public static string RemoveRecipientMention (this Microsoft.Bot.Schema.IMessageActivity activity);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig string RemoveRecipientMention(class Microsoft.Bot.Schema.IMessageActivity activity) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Schema.ActivityExtensions.RemoveRecipientMention(Microsoft.Bot.Schema.IMessageActivity)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function RemoveRecipientMention (activity As IMessageActivity) As String" />
        <MemberSignature Language="F#" Value="static member RemoveRecipientMention : Microsoft.Bot.Schema.IMessageActivity -&gt; string" Usage="Microsoft.Bot.Schema.ActivityExtensions.RemoveRecipientMention activity" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>System.String</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="activity" Type="Microsoft.Bot.Schema.IMessageActivity" RefType="this" />
        </Parameters>
        <Docs>
          <param name="activity" />
          <summary>
            Remove recipient mention text from Text property
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Schema.ActivityExtensions" Member="M:Microsoft.Bot.Schema.ActivityExtensions.RemoveRecipientMention(Microsoft.Bot.Schema.IMessageActivity)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Schema.AnimationCard" />
      </Targets>
      <Member MemberName="ToAttachment">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Schema.Attachment ToAttachment (this Microsoft.Bot.Schema.AnimationCard card);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Schema.Attachment ToAttachment(class Microsoft.Bot.Schema.AnimationCard card) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Schema.Extensions.ToAttachment(Microsoft.Bot.Schema.AnimationCard)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToAttachment (card As AnimationCard) As Attachment" />
        <MemberSignature Language="F#" Value="static member ToAttachment : Microsoft.Bot.Schema.AnimationCard -&gt; Microsoft.Bot.Schema.Attachment" Usage="Microsoft.Bot.Schema.Extensions.ToAttachment card" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Schema.Attachment</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="card" Type="Microsoft.Bot.Schema.AnimationCard" RefType="this" />
        </Parameters>
        <Docs>
          <param name="card"> The instance of <see cref="T:Microsoft.Bot.Schema.AnimationCard" />.</param>
          <summary>
            Creates a new attachment from <see cref="T:Microsoft.Bot.Schema.AnimationCard" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Schema.Extensions" Member="M:Microsoft.Bot.Schema.Extensions.ToAttachment(Microsoft.Bot.Schema.AnimationCard)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Schema.AudioCard" />
      </Targets>
      <Member MemberName="ToAttachment">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Schema.Attachment ToAttachment (this Microsoft.Bot.Schema.AudioCard card);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Schema.Attachment ToAttachment(class Microsoft.Bot.Schema.AudioCard card) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Schema.Extensions.ToAttachment(Microsoft.Bot.Schema.AudioCard)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToAttachment (card As AudioCard) As Attachment" />
        <MemberSignature Language="F#" Value="static member ToAttachment : Microsoft.Bot.Schema.AudioCard -&gt; Microsoft.Bot.Schema.Attachment" Usage="Microsoft.Bot.Schema.Extensions.ToAttachment card" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Schema.Attachment</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="card" Type="Microsoft.Bot.Schema.AudioCard" RefType="this" />
        </Parameters>
        <Docs>
          <param name="card"> The instance of <see cref="T:Microsoft.Bot.Schema.AudioCard" />.</param>
          <summary>
            Creates a new attachment from <see cref="T:Microsoft.Bot.Schema.AudioCard" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Schema.Extensions" Member="M:Microsoft.Bot.Schema.Extensions.ToAttachment(Microsoft.Bot.Schema.AudioCard)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Schema.HeroCard" />
      </Targets>
      <Member MemberName="ToAttachment">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Schema.Attachment ToAttachment (this Microsoft.Bot.Schema.HeroCard card);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Schema.Attachment ToAttachment(class Microsoft.Bot.Schema.HeroCard card) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Schema.Extensions.ToAttachment(Microsoft.Bot.Schema.HeroCard)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToAttachment (card As HeroCard) As Attachment" />
        <MemberSignature Language="F#" Value="static member ToAttachment : Microsoft.Bot.Schema.HeroCard -&gt; Microsoft.Bot.Schema.Attachment" Usage="Microsoft.Bot.Schema.Extensions.ToAttachment card" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Schema.Attachment</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="card" Type="Microsoft.Bot.Schema.HeroCard" RefType="this" />
        </Parameters>
        <Docs>
          <param name="card"> The instance of <see cref="T:Microsoft.Bot.Schema.HeroCard" />.</param>
          <summary>
            Creates a new attachment from <see cref="T:Microsoft.Bot.Schema.HeroCard" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Schema.Extensions" Member="M:Microsoft.Bot.Schema.Extensions.ToAttachment(Microsoft.Bot.Schema.HeroCard)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Schema.ReceiptCard" />
      </Targets>
      <Member MemberName="ToAttachment">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Schema.Attachment ToAttachment (this Microsoft.Bot.Schema.ReceiptCard card);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Schema.Attachment ToAttachment(class Microsoft.Bot.Schema.ReceiptCard card) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Schema.Extensions.ToAttachment(Microsoft.Bot.Schema.ReceiptCard)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToAttachment (card As ReceiptCard) As Attachment" />
        <MemberSignature Language="F#" Value="static member ToAttachment : Microsoft.Bot.Schema.ReceiptCard -&gt; Microsoft.Bot.Schema.Attachment" Usage="Microsoft.Bot.Schema.Extensions.ToAttachment card" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Schema.Attachment</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="card" Type="Microsoft.Bot.Schema.ReceiptCard" RefType="this" />
        </Parameters>
        <Docs>
          <param name="card"> The instance of <see cref="T:Microsoft.Bot.Schema.ReceiptCard" />.</param>
          <summary>
            Creates a new attachment from <see cref="T:Microsoft.Bot.Schema.ReceiptCard" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Schema.Extensions" Member="M:Microsoft.Bot.Schema.Extensions.ToAttachment(Microsoft.Bot.Schema.ReceiptCard)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Schema.SigninCard" />
      </Targets>
      <Member MemberName="ToAttachment">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Schema.Attachment ToAttachment (this Microsoft.Bot.Schema.SigninCard card);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Schema.Attachment ToAttachment(class Microsoft.Bot.Schema.SigninCard card) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Schema.Extensions.ToAttachment(Microsoft.Bot.Schema.SigninCard)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToAttachment (card As SigninCard) As Attachment" />
        <MemberSignature Language="F#" Value="static member ToAttachment : Microsoft.Bot.Schema.SigninCard -&gt; Microsoft.Bot.Schema.Attachment" Usage="Microsoft.Bot.Schema.Extensions.ToAttachment card" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Schema.Attachment</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="card" Type="Microsoft.Bot.Schema.SigninCard" RefType="this" />
        </Parameters>
        <Docs>
          <param name="card"> The instance of <see cref="T:Microsoft.Bot.Schema.SigninCard" />.</param>
          <summary>
            Creates a new attachment from <see cref="T:Microsoft.Bot.Schema.SigninCard" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Schema.Extensions" Member="M:Microsoft.Bot.Schema.Extensions.ToAttachment(Microsoft.Bot.Schema.SigninCard)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Schema.ThumbnailCard" />
      </Targets>
      <Member MemberName="ToAttachment">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Schema.Attachment ToAttachment (this Microsoft.Bot.Schema.ThumbnailCard card);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Schema.Attachment ToAttachment(class Microsoft.Bot.Schema.ThumbnailCard card) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Schema.Extensions.ToAttachment(Microsoft.Bot.Schema.ThumbnailCard)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToAttachment (card As ThumbnailCard) As Attachment" />
        <MemberSignature Language="F#" Value="static member ToAttachment : Microsoft.Bot.Schema.ThumbnailCard -&gt; Microsoft.Bot.Schema.Attachment" Usage="Microsoft.Bot.Schema.Extensions.ToAttachment card" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Schema.Attachment</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="card" Type="Microsoft.Bot.Schema.ThumbnailCard" RefType="this" />
        </Parameters>
        <Docs>
          <param name="card"> The instance of <see cref="T:Microsoft.Bot.Schema.ThumbnailCard" />.</param>
          <summary>
            Creates a new attachment from <see cref="T:Microsoft.Bot.Schema.ThumbnailCard" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Schema.Extensions" Member="M:Microsoft.Bot.Schema.Extensions.ToAttachment(Microsoft.Bot.Schema.ThumbnailCard)" />
      </Member>
    </ExtensionMethod>
    <ExtensionMethod>
      <Targets>
        <Target Type="T:Microsoft.Bot.Schema.VideoCard" />
      </Targets>
      <Member MemberName="ToAttachment">
        <MemberSignature Language="C#" Value="public static Microsoft.Bot.Schema.Attachment ToAttachment (this Microsoft.Bot.Schema.VideoCard card);" />
        <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Microsoft.Bot.Schema.Attachment ToAttachment(class Microsoft.Bot.Schema.VideoCard card) cil managed" />
        <MemberSignature Language="DocId" Value="M:Microsoft.Bot.Schema.Extensions.ToAttachment(Microsoft.Bot.Schema.VideoCard)" />
        <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToAttachment (card As VideoCard) As Attachment" />
        <MemberSignature Language="F#" Value="static member ToAttachment : Microsoft.Bot.Schema.VideoCard -&gt; Microsoft.Bot.Schema.Attachment" Usage="Microsoft.Bot.Schema.Extensions.ToAttachment card" />
        <MemberType>ExtensionMethod</MemberType>
        <ReturnValue>
          <ReturnType>Microsoft.Bot.Schema.Attachment</ReturnType>
        </ReturnValue>
        <Parameters>
          <Parameter Name="card" Type="Microsoft.Bot.Schema.VideoCard" RefType="this" />
        </Parameters>
        <Docs>
          <param name="card"> The instance of <see cref="T:Microsoft.Bot.Schema.VideoCard" />.</param>
          <summary>
            Creates a new attachment from <see cref="T:Microsoft.Bot.Schema.VideoCard" />.
            </summary>
        </Docs>
        <Link Type="Microsoft.Bot.Schema.Extensions" Member="M:Microsoft.Bot.Schema.Extensions.ToAttachment(Microsoft.Bot.Schema.VideoCard)" />
      </Member>
    </ExtensionMethod>
  </ExtensionMethods>
</Overview>
